{
'id': 'bugs.core_2940',
'qmid': None,
'tracker_id': 'CORE-2940',
'title': "Trace output could contain garbage data left from filtered out statements",
'description':
 """
   1. Obtain engine_version from built-in context variable.
   2. Make config for trace in proper format according to FB engine version, with 'exclude_filter' parameter from ticket.
   3. Launch trace session in separate child process using 'FBSVCMGR action_trace_start'
   4. Run ISQL with test commands. Only one of these command does not contain token that is specified in 'exclude_filter'
   5. Stop trace session. Output its log with filtering only statistics info.

   Checked on: WI-V2.5.5.26916 (SS, SC, CS); WI-V3.0.0.32008 (SS, SC, CS). Result: OK.
   ::: NB :::
   Several delays (time.sleep) added in main thread because of OS buffering. Couldn't switch this buffering off.
 """,
'min_versions': '2.5.0',
'versions': [
{
 'firebird_version': '2.5',
 'platform': 'All',
 'test_type': 'Python',
 'init_script':
  """
  """,
 'test_script':
  """\
import os
import subprocess
from subprocess import Popen
import time

db_conn.close()

#####################################################
# Obtain engine version, 2.5 or 3.0, for make trace config in appropriate format:

sqltxt='''set list on;select rdb$get_context('SYSTEM','ENGINE_VERSION') as engine_version from rdb$database;'''
sqllog=open( os.path.join(context['temp_directory'],'tmp_isql_2940.log'), 'w')
sqllog.close()
runProgram('isql',[dsn,'-user',user_name,'-pas',user_password,'-q','-o',sqllog.name],sqltxt)
with open( sqllog.name,'r') as f:
    for line in f:
        i=1
        if 'ENGINE_VERSION' in line:
            for word in line.split():
                if i==2:
                    engine=word
                i=i+1
            break
f.close()

txt25 = '''# Trace config, format for 2.5. Generated auto, do not edit!
<database %[\\\\\\\\/]bugs.core_2940.fdb>
  enabled true
  #include_filter
  exclude_filter %no_trace%
  log_connections true
  log_transactions true
  log_statement_finish true
  print_plan true
  print_perf true
  time_threshold 0 
</database>
'''

# NOTES ABOUT TRACE CONFIG FOR 3.0:
# 1) Header contains `database` clause in different format vs FB 2.5: its data must be enclosed with '{' '}'
# 2) Name and value must be separated by EQUALITY sign ('=') in FB-3 trace.conf, otherwise we get runtime error:
#    element "<. . .>" have no attribute value set

txt30 = '''# Trace config, format for 3.0. Generated auto, do not edit!
database=%[\\\\\\\\/]bugs.core_2940.fdb
{
  enabled = true
  #include_filter
  exclude_filter = %no_trace%
  log_connections = true
  log_transactions = true
  log_statement_finish = true
  print_plan = true
  print_perf = true
  time_threshold = 0 
}
'''
trccfg=open( os.path.join(context['temp_directory'],'tmp_trace_2940.cfg'), 'w')
if engine.startswith('2.5'):
    trccfg.write(txt25)
else:
    trccfg.write(txt30)
trccfg.close()

trclog=open( os.path.join(context['temp_directory'],'tmp_trace_2940.log'), 'w')
trclog.close()
trclst=open( os.path.join(context['temp_directory'],'tmp_trace_2940.lst'), 'w')
trclst.close()

#####################################################
# Starting trace session in new child process (async.):

f_trclog=open(trclog.name,'w')
# Execute a child program in a new process, redirecting STDERR to the same target as of STDOUT:
p_trace=Popen(["fbsvcmgr", "localhost:service_mgr", "user", "SYSDBA", "password", "masterkey",\
               "action_trace_start",\
                "trc_cfg", trccfg.name],\
                stdout=f_trclog, stderr=subprocess.STDOUT)

# Wait! Trace session is initialized not instantly!
time.sleep(1)

#####################################################
# Running ISQL with test commands:

sqltxt=\
'''
set list on;
-- statistics for this statement SHOULD appear in trace log:
select 1 k1 from rdb$database; 
commit;

-- statistics for this statement should NOT appear in trace log:
select 2 k2 from rdb$types rows 2 /* no_trace*/; 

-- statistics for this statement should NOT appear in trace log:
select 3 no_trace from rdb$types rows 3; 

-- statistics for this statement should NOT appear in trace log:
set term ^;
execute block returns(k4 int) as
begin
   for select 4 from rdb$types rows 4 into k4 do suspend;
end -- no_trace
^
set term ;^
'''

runProgram('isql',[dsn,'-user',user_name,'-pas',user_password,'-n'],sqltxt)

# do NOT remove this otherwise trace log can contain only message about its start before being closed!
time.sleep(3)

#####################################################
# Getting ID of launched trace session and STOP it:

# Save active trace session info into file for further parsing it and obtain session_id back (for stop):
f_trclst=open(trclst.name,'w')
subprocess.call(["fbsvcmgr", "localhost:service_mgr", "user", "SYSDBA", "password", "masterkey",\
                 "action_trace_list"],\
                 stdout=f_trclst, stderr=subprocess.STDOUT
               )
f_trclst.close()

trcssn=0
with open( trclst.name,'r') as f:
    for line in f:
        i=1
        if 'Session ID' in line:
            for word in line.split():
                if i==3:
                    trcssn=word
                i=i+1
            break
f.close()

# Result: `trcssn` is ID of active trace session. Now we have to terminate it:
f_trclst=open(trclst.name,'a')
f_trclst.seek(0,2)
subprocess.call(["fbsvcmgr", "localhost:service_mgr", "user", "SYSDBA", "password", "masterkey",\
                 "action_trace_stop",\
                 "trc_id",trcssn],\
                 stdout=f_trclst, stderr=subprocess.STDOUT
               )
f_trclst.close()

# Terminate child process of launched trace session (though it should already be killed):
p_trace.terminate()
f_trclog.close()

#####################################################
# Output log of trace session, with filtering only info about statistics ('fetches'):

# Output log of trace for comparing it with expected: it must contain only TWO events: TRACE_INIT and TRACE_FINI
with open( trclog.name,'r') as f:
    print(f.read())
f.close()

# Cleanup:
##########
time.sleep(1)

if os.path.isfile(sqllog.name):
    os.remove(sqllog.name)
if os.path.isfile(trccfg.name):
    os.remove(trccfg.name)
if os.path.isfile(trclst.name):
    os.remove(trclst.name)
if os.path.isfile(trclog.name):
    os.remove(trclog.name)
  """,
 'expected_stdout': 
  """
    1 records fetched
  """,
 'expected_stderr': 
  """
  """,
  'substitutions':[('^((?!records fetched).)*$','')]
}

]
}
