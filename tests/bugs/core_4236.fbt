{
'id': 'bugs.core_4236',
'qmid': None,
'tracker_id': 'CORE-4236',
'title': 'Database shutdown is reported as successfully completed before all active connections are in fact interrupted',
'description':
 """
    Test restores database with single table of following DDL:
        create table test(s varchar(1000));
        create index test_s on test(s);
    Than we start asynchronously several ISQL attachments which will do 'heavy DML' job: insert lot of rows in this table.
    After some delay (IMO, it should be at least 15..20 seconds) we start process of SHUTDOWN but with target mode = 'single'
    instead of 'full'. 
    After control will return from shutdown command, we can ensure that database has no any access and its file is closed 
    - this is done by call FBSVCMGR utility with arguments: action_repair rpr_validate_db rpr_full. This will launch process
    of database validation and it requires exclusive access, like 'gfix -v -full'.
    If validation will be able to open database in exclusive mode and do its job than NO any output will be produced. 
    Any problem with exclusive DB access will lead to error with text like: "database <db_file> shutdown".
    Finally, we check that:
    1) output of validation is really EMPTY - no any rows should present between two intentionally added lines 
       ("Validation start" and "validation finish" - they will be added only to improve visual perception of log);
    2) Every launched ISQL was really able to perform its task: at least to insert 100 row in the table, this result should
       be reflected in its log by message 'INS_PROGRESS ...' - it is suspended from EB every 100 rows.
    3) Every launched ISQL was really received exception with SQLCODE = HY000 - it also should be added at the end of ISQL log.

    Checked on WI-V3.0.0.32253, SS/SC/CS (OS=Win XP), with 30 attachments that worked for 30 seconds.
    NB: Issue about hang CS was found during this test implementation, fixed here: 
    http://sourceforge.net/p/firebird/code/62737
 """,
'min_versions': '3.0',
'versions': [
{
 'firebird_version': '3.0',
 'platform': 'All',
 'database': 'Restore',
 'backup_file': 'core4236.fbk',
 'test_type': 'Python',
 'init_script':
  """
  """,
 'test_script':
  """\
import os
import sys
import subprocess
from subprocess import Popen
import time
#import psutil

db_conn.close()

dmltxt='''\
set bail on;
set list on;
set term ^;
execute block returns(ins_progress int) as
  declare n int = 100000;
begin
  ins_progress=0;
  while ( n > 0 ) do
  begin
    insert into test(s) values( rpad('', 500, uuid_to_char(gen_uuid())) );

    ins_progress = ins_progress + 1;
    if ( mod(ins_progress, 100) = 0 ) then suspend;

    n = n - 1;
  end
end
^ set term ;^
quit;
'''

db_file='$(DATABASE_LOCATION)bugs.core_4236.fdb'

sqltxt=open( os.path.join(context['temp_directory'],'tmp_dml_4236.sql'), 'w')
sqltxt.write(dmltxt)
sqltxt.close()

#sys.exit(0)

f_list = []
p_list = []

########################################################################################
#  S T A R T I N G    S E V E R A L   I S Q L s    W I T H    H E A V Y    D M L   J O B
########################################################################################

planned_dml_attachments = 30

for i in range(0, planned_dml_attachments):
    sqllog=open( os.path.join(context['temp_directory'],'tmp_dml_4236_'+str(i)+'.log'), 'w')
    f_list.append(sqllog)

for i in range(len(f_list)):
    p_isql=Popen( [ "isql" , "localhost:"+db_file, "-user" , "SYSDBA" , "-password", "masterkey", "-i", sqltxt.name ], \
                  stdout=f_list[i], stderr=subprocess.STDOUT \
                )
    p_list.append(p_isql)

# Delay: let ISQL sessions do their job:

time.sleep(30)

shutdown_log=open( os.path.join(context['temp_directory'],'tmp_shutdown_4236.log'), 'w')
shutdown_log.close()
fn_shutdown_log = open(shutdown_log.name,'w')

# Move database to shutdown with ability to run after it validation (prp_sm_single):

###########################################################################################
# S H U T D O W N    D A T A B A S E   W I T H   T A R G E T   A C C E S S  = 'S I N G L E'
###########################################################################################
subprocess.call(["fbsvcmgr","localhost:service_mgr","user","SYSDBA","password","masterkey",\
                 "action_properties", "dbname", db_file, "prp_shutdown_mode", "prp_sm_single", "prp_force_shutdown", "0"],\
                stdout=fn_shutdown_log, stderr=subprocess.STDOUT)
fn_shutdown_log.close()

# At this point no further IO should be inside database, including internal engine actions
# that relates to backouts. This mean that we *must* have ability to run DB validation in
# _exclusive_ mode, like gfix -v -full does.

# Only for DEBUG: when this line is uncommented, validation should FAIL with message: database <db_file> shutdown. 
# Normally this line should be commented.
# conx = kdb.connect(dsn='localhost:'+db_file, user='SYSDBA', password='masterkey')

validate_log=open( os.path.join(context['temp_directory'],'tmp_validate_4236.log'), 'w')
validate_log.close()
fn_validate_log = open(validate_log.name,'w')
fn_validate_log.write("Validation start.")
fn_validate_log.write("\\n")
fn_validate_log.seek(0,2)

# Run validation that requires exclusive database access. 
# This process normally should produce NO output at all, it is "silent".
# If database currently is in use by engine or some attachments than it shoudl fail
# with message "database <db_file> shutdown."

######################################################################
#  V A L I D A T I O N    W I T H     E X C L U S I V E    A C C E S S
######################################################################
subprocess.call(["fbsvcmgr","localhost:service_mgr","user","SYSDBA","password","masterkey",\
                 "action_repair", "dbname", db_file, "rpr_validate_db", "rpr_full"],\
                stdout=fn_validate_log, stderr=subprocess.STDOUT)

fn_validate_log.seek(0,2)
fn_validate_log.write("Validation finish.")
fn_validate_log.close()

for i in range(len(f_list)):
    f_list[i].close()

for i in range(len(p_list)):
    p_list[i].terminate()

# This should be empty:
with open( shutdown_log.name,'r') as f:
    for line in f:
        print(line.upper())
f.close()

# This shoudl contain only two lines that were intentionally added before and after validation:
# "Validation start" and "Validation finish"
with open( validate_log.name,'r') as f:
    for line in f:
        print(line.upper())
f.close()

actual_dml_attachments = 0
logged_shutdown_count = 0

for i in range(len(f_list)):
    sqllog=open(f_list[i].name, 'r').read()
    if 'INS_PROGRESS' in sqllog:
        actual_dml_attachments = actual_dml_attachments + 1
    if 'SQLSTATE = HY000' in sqllog:
        logged_shutdown_count = logged_shutdown_count + 1

print("Check-1: how many DML attachments really could do their job ?")
if planned_dml_attachments == actual_dml_attachments:
     print("Result: OK, launched = actual")
else:
     print("Result: BAD, launched<>actual")

print("Check-2: how many sessions got SQLSTATE = HY000 on shutdown ?")
if planned_dml_attachments == logged_shutdown_count:
     print("Result: OK, launched = actual")
else:
     print("Result: BAD, launched<>actual")

time.sleep(1)

for i in range(len(f_list)):
  os.remove(f_list[i].name)
os.remove(shutdown_log.name)
os.remove(validate_log.name)
os.remove(sqltxt.name)

  """,
 'expected_stdout': 
  """
    VALIDATION START.
    VALIDATION FINISH.
    Check-1: how many DML attachments really could do their job ?
    Result: OK, launched = actual
    Check-2: how many sessions got SQLSTATE = HY000 on shutdown ?
    Result: OK, launched = actual
  """,
 'expected_stderr': 
  """
  """
}
]
}
