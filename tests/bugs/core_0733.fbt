{
'id': 'bugs.core_0733',
'qmid': None,
'tracker_id': 'CORE-0733',
'title': 'Compress Data over the Network',
'description':
  """
    We create selective procedure (name: "sp_uuid") that produces arbitrary number of rows and accepts as 1st argument parameter 
    that defines "quality" of issued data for compression: either with excellent ratio of expected compression or with poor ability 
    to do any compress because of random characters from wide scope.
    Currently this SP is used only to produce 1st type of data (i.e. lines which can be compressed with MAXIMAL ratio).

    Test opens firebird.conf and changes there value of WireCompression parameter to FALSE. Then we generate .sql file
    which will obtain <N_ROWS> of lines from sp_uuid() and redirect output to temporary dump storage. We log timestamps
    when this action starts and finishes in the table T_LOG for further analisys.

    After this, test again opens firebird.conf and changes value WireCompression parameter to TCRUE, and all actions repeat
    again for logging duration in T_LOG table.
  
    Finally, test does query to T_LOG table and checks that:
    1) required value of WireCompression parameter (i.e. that is changed in firebird.conf) equals to 
       value that can be obtained from RDB$GET_CONTEXT('SYSTEM', 'WIRE_COMPRESSED');
    2) slowest duration for COMPRESSED traffic is LESS than fastest duration of UNCOMPRESSED one. 
       Several measures showed that profit is about 14-16%.

    ### NOTE ###
    Changed value of parameter WireCompression (in firebird.conf) will be seen by application if it reloads client library. 
    Reconnect is NOT enough for this. For this reason we use subprocess and call ISQL utility to do above mentioned actions
    in new execution context.
    
    See also tests for CORE-5536, 5913.

    Checked on:
    3.0.5.33084 SS: 6.82", SC: 6.05"
    4.0.0.1347  SS: 8.88", SC: 10.00"
  """,
'min_versions': '3.0.0',
'versions': [
{
 'firebird_version': '3.0',
 'platform': 'All',
 'init_script':
  """
    recreate table t_log( required_value varchar(5), actual_value varchar(5), elap_ms int );
    commit;
    set term ^; 
    create or alter procedure sp_uuid(a_compressable boolean, n_limit int default 1) 
    --returns (b blob character set octets) as
    returns (b varchar(32700) character set none) as
        declare g char(16) character set octets;
    begin
        if ( a_compressable ) then
           while (n_limit > 0) do
           begin
               g = gen_uuid();
               b = lpad('',32700,  'AAAAAAAAAAAAAAAA' );
               n_limit = n_limit - 1;
               suspend;
           end
        else
           while (n_limit > 0) do
           begin
               b = lpad('',32700, gen_uuid() );
               n_limit = n_limit - 1;
               suspend;
           end
    end
    ^
    set term ;^
    commit;
  """,
 'test_type': 'Python',
 'test_script': 
  """
import os
import time as tm
import datetime
from time import time
import re
import shutil
import subprocess

from fdb import services

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

DB_NAME = '$(DATABASE_LOCATION)' + 'bugs.core_0733.fdb'

DB_PATH = '$(DATABASE_LOCATION)'
U_NAME = user_name
U_PSWD = user_password
N_ROWS = 1000
F_SQL_NAME=os.path.join(context['temp_directory'],'tmp_core_0733.sql')

fb_home = services.connect(host='localhost', user= user_name, password= user_password).get_home_directory()
dts = datetime.datetime.now().strftime("%y%m%d_%H%M%S")
fbconf_bak = fb_home+'firebird_'+dts+'.bak'
shutil.copy2( fb_home+'firebird.conf', fbconf_bak )

db_conn.close()

def prepare_fb_conf( fb_home, a_required_value ):
    
    f_fbconf=open(fb_home+'firebird.conf','r')
    fbconf_content=f_fbconf.readlines()
    f_fbconf.close()
    for i,s in enumerate( fbconf_content ):
        if s.lower().lstrip().startswith( 'wirecompression'.lower() ):
            fbconf_content[i] = '# <temply commented> ' + s

    fbconf_content.append('\\n# Temporarily added by fbtest, CORE-0733. Should be removed auto:')
    fbconf_content.append("\\n#" + '='*30 )
    fbconf_content.append('\\nWireCompression = %s' % a_required_value )
    fbconf_content.append("\\n#" + '='*30 )
    fbconf_content.append("\\n" )

    f_fbconf=open(fb_home+'firebird.conf','w')
    f_fbconf.writelines( fbconf_content )
    f_fbconf.close()
#------------------------------------------------------------------------------------

#def prepare_sql_4run( sql_file_name, db_path, n_rows, required_compression ):
def prepare_sql_4run( required_compression, db_path, n_rows, sql_file_name ):
    global os

    sql_dump='tmp_core_0733_compression_%(required_compression)s.dump' % ( locals() )

    if os.path.isfile( '%(db_path)s%(sql_dump)s' % (locals()) ):
        os.remove( '%(db_path)s%(sql_dump)s' % (locals()) )

    if n_rows is None:
        return
    
    #------------------

    sql_text='''
        set list on;

        out %(db_path)s%(sql_dump)s;
        set term ^;
        execute block returns(dts timestamp) as
        begin
           rdb$set_context('USER_SESSION','DTS_BEG',current_timestamp);
           dts = 'now';
           suspend;
        end
        ^
        set term ;^

        select b from sp_uuid( true, %(n_rows)s );

        set term ^;
        execute block returns(dts timestamp) as
        begin
           rdb$set_context('USER_SESSION','DTS_END',current_timestamp);
           dts = 'now';
           suspend;
        end
        ^
        set term ;^

        out;

        insert into t_log( required_value, actual_value, elap_ms)
        values(
                upper( '%(required_compression)s' )
               ,upper( rdb$get_context('SYSTEM','WIRE_COMPRESSED') )
               ,datediff( millisecond 
                          from cast(rdb$get_context('USER_SESSION','DTS_BEG') as timestamp) 
                          to cast(rdb$get_context('USER_SESSION','DTS_END') as timestamp) 
                        )           
              );
        commit;
    ''' % ( locals() )

    f_sql=open( sql_file_name, 'w')
    f_sql.write( sql_text )
    f_sql.close()

#-------------------------

REQUIRED_WIRE_COMPRESSION = 'false'
# ------------------------------------------------------ ###########
# Generate SQL script for running when WireCompression = |||FALSE|||
# ------------------------------------------------------ ###########
prepare_sql_4run( REQUIRED_WIRE_COMPRESSION, DB_PATH, N_ROWS, F_SQL_NAME )

# ------------------------------------------------------ ###########
# Update content of firebird.conf with WireCompression = |||FALSE|||
# ------------------------------------------------------ ###########
prepare_fb_conf( fb_home, REQUIRED_WIRE_COMPRESSION)


# --------------------------------------------------------------------------------------
#  Launch ISQL in separate context of execution with job to obtain data and log duration
# --------------------------------------------------------------------------------------

fn_nul = open(os.devnull, 'w') # open( os.path.join(context['temp_directory'],'tmp_core_0733_obtain_data.log'), 'w')
f_isql_obtain_data_err = open( os.path.join(context['temp_directory'],'tmp_core_0733_obtain_data.err'), 'w')

subprocess.call( ["isql", dsn, "-i", F_SQL_NAME ],
                 stdout = fn_nul,
                 stderr = f_isql_obtain_data_err
               )
fn_nul.close()
f_isql_obtain_data_err.close()

# Call for removing dump from disk:
prepare_sql_4run( REQUIRED_WIRE_COMPRESSION, DB_PATH, None, None )


# Update content of firebird.conf with WireCompression = true
##############################################################

REQUIRED_WIRE_COMPRESSION = 'true'
# ------------------------------------------------------ ###########
# Generate SQL script for running when WireCompression = ||| TRUE|||
# ------------------------------------------------------ ###########
prepare_sql_4run( REQUIRED_WIRE_COMPRESSION, DB_PATH, N_ROWS, F_SQL_NAME )

# ------------------------------------------------------ ###########
# Update content of firebird.conf with WireCompression = ||| TRUE|||
# ------------------------------------------------------ ###########
prepare_fb_conf( fb_home, REQUIRED_WIRE_COMPRESSION)

fn_nul = open(os.devnull, 'w') # open( os.path.join(context['temp_directory'],'tmp_core_0733_obtain_data.log'), 'w')
f_isql_obtain_data_err = open( os.path.join(context['temp_directory'],'tmp_core_0733_obtain_data.err'), 'a')

subprocess.call( ["isql", dsn, "-i", F_SQL_NAME ],
                 stdout = fn_nul,
                 stderr = f_isql_obtain_data_err
               )
fn_nul.close()
f_isql_obtain_data_err.close()

# Call for removing dump from disk:
prepare_sql_4run( REQUIRED_WIRE_COMPRESSION, DB_PATH, None, None )

# RESTORE original config:
##########################
shutil.copy2( fbconf_bak , fb_home+'firebird.conf')
os.remove(fbconf_bak)
os.remove(F_SQL_NAME)

sql='''
    -- select * from t_log;
    --   REQUIRED_VALUE ACTUAL_VALUE      ELAP_MS
    --   ============== ============ ============
    --   FALSE          FALSE                2187
    --   TRUE           TRUE                 1782
    set list on;
    select
         result_of_req_compare_to_actual
        ,iif( slowest_with_compression < fastest_without_compression, 'COOL: compression was FASTER.', 'POOR: Compression was SLOWER.') as result_of_compression_benchmark
        -- ,100 - 100 * ( 1.00 * slowest_with_compression / fastest_without_compression) as diff_prc -- 16...18%
    from (
        select 
             min( iif( upper(required_value) is distinct from upper(actual_value)
                       ,coalesce(required_value,'<null>') || coalesce(actual_value,'<null>')
                       ,'Cool: actual values were equal to required.' 
                     )
                ) as result_of_req_compare_to_actual
            ,min( iif( upper(required_value) = upper('false'), elap_ms, null ) ) fastest_without_compression
            ,max( iif( upper(required_value) = upper('true'), elap_ms, null ) ) slowest_with_compression
        from t_log
    )
    ;

'''
runProgram('isql', [ dsn ], sql)


# Additional check: STDERR for ISQL must be EMPTY.
##################################################

f_list=(f_isql_obtain_data_err,)
for i in range(len(f_list)):
   f_name=f_list[i].name
   if os.path.getsize(f_name) > 0:
       with open( f_name,'r') as f:
           for line in f:
               print("Unexpected STDERR, file "+f_name+": "+line)
       f.close()

os.remove(f_isql_obtain_data_err.name)
  """,
 'expected_stdout':
  """
    RESULT_OF_REQ_COMPARE_TO_ACTUAL Cool: actual values were equal to required.
    RESULT_OF_COMPRESSION_BENCHMARK COOL: compression was FASTER.
  """,
 'expected_stderr':
  """
  """
}
]
}
