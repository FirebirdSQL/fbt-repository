{
'id': 'functional.arno.optimizer.opt_single_index_selection_03',
'qmid': 'functional.arno.optimizer.opt_single_index_selection_03',
'tracker_id': '',
'title': 'Best match index selection (single segment)',
'description': 
 """
   Check if it will select the indexes which can be used. 
   Also prefer ASC index above DESC unique index.
   Unique index isn't the only best to use here, because 
   there's not a equals operator on it.
 """,
'versions': [
{
 'firebird_version': '2.0',
 'platform': 'All',
 'init_script': """CREATE TABLE SelectionTest (
  F1 INTEGER NOT NULL,
  F2 INTEGER
);

SET TERM ^^ ;
CREATE PROCEDURE PR_SelectionTest
AS
DECLARE VARIABLE FillID INTEGER;
BEGIN
  FillID = 1;
  WHILE (FillID <= 1000) DO
  BEGIN
    INSERT INTO SelectionTest
      (F1, F2)
    VALUES
      (:FillID, (:FILLID / 2) * 2);
    FillID = FillID + 1;
  END
END
^^
SET TERM ; ^^

COMMIT;

/* Fill table with data */
EXECUTE PROCEDURE PR_SelectionTest;

COMMIT;

/* Create indexes */
CREATE UNIQUE ASC INDEX I_F1_UNIQUE_ASC ON SelectionTest (F1);
CREATE UNIQUE DESC INDEX I_F1_UNIQUE_DESC ON SelectionTest (F1);
CREATE ASC INDEX I_F2_ASC ON SelectionTest (F2);
CREATE DESC INDEX I_F2_DESC ON SelectionTest (F2);

COMMIT;
""",
 'test_type': 'ISQL',
 'test_script': """SET PLAN ON;
SELECT
  st.F1, st.F2
FROM
  SelectionTest st
WHERE
  st.F2 = 100 and
  st.F1 >= 1;
""",
 'expected_stdout': """PLAN (ST INDEX (I_F2_ASC, I_F1_UNIQUE_ASC))

          F1           F2
============ ============
         100          100
         101          100

"""
},
{
 'firebird_version': '3.0',
 'platform': 'All',
 'test_type': 'ISQL',
 'init_script': 
  """
    recreate table sel_test( f1 int not null, f2 int );
    commit;
    insert into sel_test(f1, f2)
    select r, (r/2)*2
    from (select row_number()over() r from rdb$types a, (select 1 i from rdb$types rows 10) b)
    rows 1000;
    commit;
    create unique desc index idx_f1_unq_desc on sel_test(f1);
    create unique index idx_f1_unq_asc on sel_test(f1);
    create desc index idx_f2_desc on sel_test(f2);
    create index idx_f2_asc on sel_test(f2);
    commit;

  """,
 'test_script': 
  """
    set plan on;
    select st.f1, st.f2
    from sel_test st
    where
        st.f1 >= 1 and -- we have UNIQUE indices for this field but this is INequality expression.
        st.f2 = 100; -- Optimizer should choose to scan only index on `F2`, and choose ASCending one.
  """,
 'expected_stdout': 
  """
    PLAN (ST INDEX (IDX_F2_ASC))
          F1           F2 
         100          100 
         101          100 
  """,
 'substitutions': [('=.*','')]
}

]
}
