{
'id': 'functional.syspriv.change_shutdown_mode',
'tracker_id': '',
'title': 'Check ability to change database shutdown mode by non-sysdba user who is granted with necessary system privileges.',
'description':
 """
   Checked on 4.0.0.262.
 """,
'min_versions': '4.0.0',
'versions': [
{
 'firebird_version': '4.0',
 'platform': 'All',
 'init_script':
  """
    set wng off;
    set bail on;
    set list on;
    set count on;
    set echo on;

    create or alter view v_check as
    select 
         current_user as who_ami
        ,r.rdb$role_name
        ,rdb$role_in_use(r.rdb$role_name) as rdb$role_in_use
        ,r.rdb$system_privileges
    from mon$database m cross join rdb$roles r;
    commit;

    create or alter user u01 password '123' revoke admin role;
    revoke all on all from u01;

    create or alter trigger trg_connect active on connect as
    begin
    end;
    commit;

    recreate table att_log (
        att_id int,
        att_name varchar(255),
        att_user varchar(255),
        att_addr varchar(255),
        att_prot varchar(255),
        att_dts timestamp default 'now'
    );

    commit;

    grant select on v_check to public;
    grant all on att_log to public;
    commit;

    set term ^;
    execute block as
    begin
      execute statement 'drop role role_for_change_shutdown_mode';
      when any do begin end
    end
    ^
    create or alter trigger trg_connect active on connect as
    begin
      if ( upper(current_user) <> upper('SYSDBA') ) then
         in autonomous transaction do
         insert into att_log(att_id, att_name, att_user, att_prot)
         select
              mon$attachment_id
             ,mon$attachment_name
             ,mon$user
             ,mon$remote_protocol
         from mon$attachments
         where mon$user = current_user
         ;
    end
    ^
    set term ;^
    commit;

    -- Shutdown DB and bring online
    -- Add/change/delete non-system records in RDB$TYPES.
    -- NB: Privilege 'IGNORE_DB_TRIGGERS' is needed when we return database to ONLINE
    -- and this DB has DB-level trigger.
    create role role_for_change_shutdown_mode 
        set system privileges to CHANGE_SHUTDOWN_MODE, USE_GFIX_UTILITY, IGNORE_DB_TRIGGERS;
    commit;
    grant default role_for_change_shutdown_mode to user u01;
    commit;
  """,
 'test_type': 'Python',
 'test_script': 
  """
import os
import subprocess

db_conn.close()
db_file="$(DATABASE_LOCATION)functional.syspriv.change_shutdown_mode.fdb"

# Check that current non-sysdba user:
# 1) can SKIP db-level trigger firing:
# 2) IS granted with role 'role_for_change_shutdown_mode':

runProgram('isql',[dsn,'-nod','-user','U01', '-pas', '123'], 'set list on; set count on; select * from att_log; select * from v_check;')

f_shutdown_log = open( os.path.join(context['temp_directory'],'tmp_syspriv_dbshut.log'), 'w')
subprocess.call( ["fbsvcmgr","localhost:service_mgr",
                  "user","U01", "password", "123",
                  "action_properties",
                  "dbname", db_file,
                  "prp_shutdown_mode", "prp_sm_full", "prp_force_shutdown", "0"
                 ],
                 stdout=f_shutdown_log,
                 stderr=subprocess.STDOUT
               )
f_shutdown_log.close()

f_dbheader_log = open( os.path.join(context['temp_directory'],'tmp_syspriv_dbhead.log'), 'w')
subprocess.call(["fbsvcmgr", "localhost:service_mgr", 
                 "user", "U01", "password" , "123",
                 "action_db_stats", "sts_hdr_pages",
                 "dbname", db_file
                ],
                stdout=f_dbheader_log, 
                stderr=subprocess.STDOUT
               )
f_dbheader_log.close()

f_ret2online_log = open( os.path.join(context['temp_directory'],'tmp_syspriv_dbonline.log'), 'w')
subprocess.call( ["fbsvcmgr", "localhost:service_mgr",
                  "user","U01", "password", "123",
                  "action_properties", "prp_db_online",
                  "dbname", db_file,
                 ],
                 stdout = f_ret2online_log,
                 stderr = subprocess.STDOUT
               )
f_ret2online_log.close()

# Must be EMPTY:
with open( f_shutdown_log.name,'r') as f:
    for line in f:
        print('DB SHUTDOWN LOG: '+line.upper())
f.close()

# Must contain: "Attributes force write, full shutdown"
with open( f_dbheader_log.name,'r') as f:
    for line in f:
        if 'Attributes' in line:
            print('DB HEADER: ' + ' '.join(line.split()).upper() )
f.close()

# Must be EMPTY:
with open( f_ret2online_log.name,'r') as f:
    for line in f:
        print('DB ONLINE LOG: '+line.upper())
f.close()

# Cleanup:

f_list=[f_shutdown_log, f_dbheader_log, f_ret2online_log]

for i in range(len(f_list)):
   if os.path.isfile(f_list[i].name):
       os.remove(f_list[i].name)

  """,
  'expected_stdout':
  """
    Records affected: 0
    WHO_AMI                         U01
    RDB$ROLE_NAME                   RDB$ADMIN
    RDB$ROLE_IN_USE                 <false>
    RDB$SYSTEM_PRIVILEGES           FFFFFFFFFFFFFFFF
    WHO_AMI                         U01
    RDB$ROLE_NAME                   ROLE_FOR_CHANGE_SHUTDOWN_MODE
    RDB$ROLE_IN_USE                 <true>
    RDB$SYSTEM_PRIVILEGES           2060000000000000
    Records affected: 2
    DB HEADER: ATTRIBUTES FORCE WRITE, FULL SHUTDOWN
  """,
  'expected_stderr':
  """
  """
}
]
}
