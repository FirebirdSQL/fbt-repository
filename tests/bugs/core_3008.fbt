{
'id': 'bugs.core_3008',
'qmid': None,
'tracker_id': 'CORE-3008',
'title': "Add attachment's CHARACTER SET name into corresponding trace records",
'description': """###   W A R N I N G   ###
1) This test uses async. calls of external routine (fbsvcmgr) with opening it in separate command window,
   see: subprocess.call('start /min cmd /c ...', shell=True).
2) It was encountered that launching trace session by FBSVCMGR requires 1-2 seconds to be finished,
   so this test intentionally uses delay (see calls `time.sleep()`).
3) Format of `database` section differ in 2.5 vs 3.0, so two separate sections have been created here for each FB version.
4) Correct work was checked on: WI-V2.5.5.26916 (SS, SC) and WI-V3.0.0.31948 (SS, SC, CS)
""",
'min_versions': '2.5.0',
'versions': [
{
 'firebird_version': '2.5',
 'platform': 'Windows',
 'test_type': 'Python',
 'init_script':
  """
  """,
 'test_script':
  """import os
import subprocess
import time

db_conn.close()
# format in 3.0 differ: database=%[\\\\\\\\/]bugs.core_3008.fdb
txt = '''# Generated auto, do not edit!
<database %[\\\\\\\\/]bugs.core_3008.fdb>
  enabled true
  time_threshold 0
  log_connections true
</database>
'''
trccfg=open( os.path.join(context['temp_directory'],'tmp_trace_3008.cfg'), 'w')
trccfg.write(txt)
trccfg.close()
trclog=open( os.path.join(context['temp_directory'],'tmp_trace_3008.log'), 'w')
trclog.close()
trclst=open( os.path.join(context['temp_directory'],'tmp_trace_3008.lst'), 'w')
trclst.close()

trc_launch='"fbsvcmgr localhost:service_mgr user SYSDBA password masterkey action_trace_start trc_cfg %s 1>%s 2>&1"' % (trccfg.name, trclog.name )

# Launch program in separate (new) window via START command:
subprocess.call('start /min cmd /c %s' % trc_launch, shell=True)
time.sleep(2)

sqltxt='''quit;'''

runProgram('isql',[dsn,'-user',user_name,'-pas',user_password,'-ch','utf8'],sqltxt)
runProgram('isql',[dsn,'-user',user_name,'-pas',user_password,'-ch','iso8859_1'],sqltxt)

# Wait! Trace session is initialized not instantly!
time.sleep(2)

# Save active trace session info into file for further parsing it and obtain session_id back (for stop):
svc_launch='"fbsvcmgr localhost:service_mgr user SYSDBA password masterkey action_trace_list 1>%s 2>&1"' % trclst.name
subprocess.call('cmd /c %s' % svc_launch)

trcssn=0
with open( trclst.name,'r') as f:
    for line in f:
        i=1
        if 'Session ID' in line:
            for word in line.split():
                if i==3:
                    trcssn=word
                i=i+1
            break

# Result: `trcssn` is ID of active trace session. Now we have to terminate it:
runProgram('fbsvcmgr', ['localhost:service_mgr','user','SYSDBA','password','masterkey','action_trace_stop','trc_id',trcssn])

time.sleep(1)

# Repeat: check that this trace session really have been terminated:
runProgram('fbsvcmgr', ['localhost:service_mgr','user','SYSDBA','password','masterkey','action_trace_list'])

# Output log of trace for comparing it with expected: it must contain only TWO events: TRACE_INIT and TRACE_FINI
# ::: NB ::: Content if trace log is converted to UPPER case in order to reduce change of mismatching with
# updated trace output in some future versions:
with open( trclog.name,'r') as f:
    print(f.read().upper())
f.close()

if os.path.isfile(trccfg.name):
    os.remove(trccfg.name)
if os.path.isfile(trclst.name):
    os.remove(trclst.name)
if os.path.isfile(trclog.name):
    os.remove(trclog.name)
  """,
 'expected_stdout': 
  """
    C:\MIX\FIREBIRD\QA\FBT-REPO\TMP\BUGS.CORE_3008.FDB (ATT_4, SYSDBA:NONE, UTF8, TCPV4:127.0.0.1)
    C:\MIX\FIREBIRD\QA\FBT-REPO\TMP\BUGS.CORE_3008.FDB (ATT_4, SYSDBA:NONE, UTF8, TCPV4:127.0.0.1)
    C:\MIX\FIREBIRD\QA\FBT-REPO\TMP\BUGS.CORE_3008.FDB (ATT_4, SYSDBA:NONE, ISO88591, TCPV4:127.0.0.1)
    C:\MIX\FIREBIRD\QA\FBT-REPO\TMP\BUGS.CORE_3008.FDB (ATT_4, SYSDBA:NONE, ISO88591, TCPV4:127.0.0.1)
  """,
 'expected_stderr': 
  """
  """,
  'substitutions':[
    ('^((?!ERROR|ELEMENT|BUGS.CORE_3008.FDB).)*$',''),
    ('TCPV.*','TCP'),
    ('.*\(ATT_[0-9]+','ATT_')
  ]
},
{
 'firebird_version': '3.0',
 'platform': 'Windows',
 'test_type': 'Python',
 'init_script':
  """
  """,
 'test_script':
  """import os
import subprocess
import time

db_conn.close()

# ### NOTES ABOUT TRACE CONFIG FOR 3.0 ###
# 1) Header contains `database` clause in different format vs FB 2.5.
# 2) Name and value must be separated by EQUALITY sign ('=') in FB-3 trace.conf, otherwise we get runtime error:
#    element "<. . .>" have no attribute value set

txt = '''# Generated auto, do not edit!
database=%[\\\\\\\\/]bugs.core_3008.fdb
{
  enabled = true
  time_threshold = 0
  log_connections =  true
}
'''
trccfg=open( os.path.join(context['temp_directory'],'tmp_trace_3008.cfg'), 'w')
trccfg.write(txt)
trccfg.close()
trclog=open( os.path.join(context['temp_directory'],'tmp_trace_3008.log'), 'w')
trclog.close()
trclst=open( os.path.join(context['temp_directory'],'tmp_trace_3008.lst'), 'w')
trclst.close()

trc_launch='"fbsvcmgr localhost:service_mgr user SYSDBA password masterkey action_trace_start trc_cfg %s 1>%s 2>&1"' % (trccfg.name, trclog.name )

# Launch program in separate (new) window via START command:
subprocess.call('start /min cmd /c %s' % trc_launch, shell=True)
time.sleep(2)

sqltxt='''quit;'''

runProgram('isql',[dsn,'-user',user_name,'-pas',user_password,'-ch','utf8'],sqltxt)
runProgram('isql',[dsn,'-user',user_name,'-pas',user_password,'-ch','iso8859_1'],sqltxt)

# Wait! Trace session is initialized not instantly!
time.sleep(2)

# Save active trace session info into file for further parsing it and obtain session_id back (for stop):
svc_launch='"fbsvcmgr localhost:service_mgr user SYSDBA password masterkey action_trace_list 1>%s 2>&1"' % trclst.name
subprocess.call('cmd /c %s' % svc_launch)

trcssn=0
with open( trclst.name,'r') as f:
    for line in f:
        i=1
        if 'Session ID' in line:
            for word in line.split():
                if i==3:
                    trcssn=word
                i=i+1
            break

# Result: `trcssn` is ID of active trace session. Now we have to terminate it:
runProgram('fbsvcmgr', ['localhost:service_mgr','user','SYSDBA','password','masterkey','action_trace_stop','trc_id',trcssn])

time.sleep(1)

# Repeat: check that this trace session really have been terminated:
runProgram('fbsvcmgr', ['localhost:service_mgr','user','SYSDBA','password','masterkey','action_trace_list'])

# Output log of trace for comparing it with expected: it must contain only TWO events: TRACE_INIT and TRACE_FINI
# ::: NB ::: Content if trace log is converted to UPPER case in order to reduce change of mismatching with
# updated trace output in some future versions:
with open( trclog.name,'r') as f:
    print(f.read().upper())
f.close()

if os.path.isfile(trccfg.name):
    os.remove(trccfg.name)
if os.path.isfile(trclst.name):
    os.remove(trclst.name)
if os.path.isfile(trclog.name):
    os.remove(trclog.name)
  """,
 'expected_stdout': 
  """
    C:\MIX\FIREBIRD\QA\FBT-REPO\TMP\BUGS.CORE_3008.FDB (ATT_4, SYSDBA:NONE, UTF8, TCPV4:127.0.0.1)
    C:\MIX\FIREBIRD\QA\FBT-REPO\TMP\BUGS.CORE_3008.FDB (ATT_4, SYSDBA:NONE, UTF8, TCPV4:127.0.0.1)
    C:\MIX\FIREBIRD\QA\FBT-REPO\TMP\BUGS.CORE_3008.FDB (ATT_4, SYSDBA:NONE, ISO88591, TCPV4:127.0.0.1)
    C:\MIX\FIREBIRD\QA\FBT-REPO\TMP\BUGS.CORE_3008.FDB (ATT_4, SYSDBA:NONE, ISO88591, TCPV4:127.0.0.1)
  """,
 'expected_stderr': 
  """
  """,
  'substitutions':[
    ('^((?!ERROR|ELEMENT|BUGS.CORE_3008.FDB).)*$',''),
    ('TCPV.*','TCP'),
    ('.*\(ATT_[0-9]+','ATT_')
  ]
}
]
}
