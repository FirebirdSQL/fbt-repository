{
'id': 'bugs.core_6438',
'tracker_id': 'CORE-6438',
'title': "ISQL: bad headers when text columns has >= 80 characters",
'description':
 """
    Test creates .sql script with query that contains literal (similar to descriped in the ticket, but much longer).
    Then we parse result of this query and compare length of header and data. They both must be equal to the same value.
    Confirmed truncated length of header on 4.0.0.2225
    Checked on 4.0.0.2249 - all fine.
 """,
'min_versions': '4.0',
'versions': [
{
 'firebird_version': '4.0',
 'platform': 'All',
 'test_type': 'Python',
 'test_script': 
  """
import sys
import os
import time
import subprocess
from fdb import services

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

#--------------------------------------------

def flush_and_close(file_handle):
    # https://docs.python.org/2/library/os.html#os.fsync
    # If you're starting with a Python file object f, 
    # first do f.flush(), and 
    # then do os.fsync(f.fileno()), to ensure that all internal buffers associated with f are written to disk.
    global os
    
    file_handle.flush()
    if file_handle.mode not in ('r', 'rb'):
        # otherwise: "OSError: [Errno 9] Bad file descriptor"!
        os.fsync(file_handle.fileno())
    file_handle.close()

#--------------------------------------------

def cleanup( f_names_list ):
    global os
    for i in range(len( f_names_list )):
       if os.path.isfile( f_names_list[i]):
            os.remove( f_names_list[i] )
            if os.path.isfile( f_names_list[i]):
                print('ERROR: can not remove file ' + f_names_list[i])

#--------------------------------------------

db_conn.close()
fb_home = services.connect(host='localhost', user=user_name, password=user_password).get_home_directory()

data = '1' * 65533
sql_run = '''select '%(data)s' as " ", 1 as "  " from rdb$database;''' % locals()

f_run_sql = open( os.path.join(context['temp_directory'],'tmp_6438.sql'), 'w')
f_run_sql.write(sql_run)
flush_and_close(f_run_sql)

f_run_log=open( os.path.join(context['temp_directory'],'tmp_6438.log'), 'w')
subprocess.call( [ fb_home + "isql", dsn, "-i", f_run_sql.name ], stdout=f_run_log, stderr=subprocess.STDOUT )
flush_and_close(f_run_log)

hdr_len, txt_len = 0,0
with open(f_run_log.name,'r') as f:
    for line in f:
        if line.startswith('='):
            hdr_len = len(line.split()[0])
        elif line.startswith('1'):
            txt_len = len(line.split()[0])

print('hdr_len:', hdr_len)
print('txt_len:', txt_len)

# Cleanup
##########
cleanup( [ i.name for i in ( f_run_sql, f_run_log ) ] )


  """,
 'expected_stdout': 
  """
hdr_len: 65533
txt_len: 65533
  """,
 'expected_stderr': 
  """
  """
}
]
}
