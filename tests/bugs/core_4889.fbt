{
'id': 'bugs.core_4889',
'qmid': None,
'tracker_id': 'CORE-4889',
'title': 'FBSVCMGR with `action_trace_start` prevents in 3.0 SuperServer from connecting using local protocol',
'description': 
 """
   Confirmed failing to create embedded attach on build 31948.
   Confirmed successful work on build 32268, architectures: SS, SC and CS.
 """,
'min_versions': '3.0',
'versions': [
{
 'firebird_version': '3.0',
 'platform': 'Windows',
 'init_script': 
  """
  """,
 'test_type': 'Python',
 'test_script':"""\

import os
import subprocess
from subprocess import Popen
import time

fdb_file='$(DATABASE_LOCATION)bugs.core_4889.fdb'

db_conn.close()

#####################################################################
# Prepare config for trace session that will be launched by call of FBSVCMGR:

txt = '''\
database= %[\\\\\\\\/]bugs.core_4889.fdb
{
  enabled = true
  time_threshold = 0 
  log_errors = true
  log_statement_finish = true
}
'''
trc_cfg=open( os.path.join(context['temp_directory'],'tmp_trace_4889.cfg'), 'w')
trc_cfg.write(txt)
trc_cfg.close()
trc_log=open( os.path.join(context['temp_directory'],'tmp_trace_4889.log'), 'w')
trc_log.close()
trc_lst=open( os.path.join(context['temp_directory'],'tmp_trace_4889.lst'), 'w')
trc_lst.close()

#sys.stdout.flush()
#os._exit(0)

#####################################################################
# Async. launch of trace session using FBSVCMGR action_trace_start:

trc_log=open(trc_log.name, "w")
# Execute a child program in a new process, redirecting STDERR to the same target as of STDOUT:
p_svcmgr = Popen( ["fbsvcmgr", "localhost:service_mgr", "user" , "SYSDBA" , "password" , "masterkey", \
                   "action_trace_start","trc_cfg", trc_cfg.name], \
                  stdout=trc_log, stderr=subprocess.STDOUT)

# Wait! Trace session is initialized not instantly!
time.sleep(2)

#####################################################################

# Determine active trace session ID (for further stop):

trc_lst=open(trc_lst.name, "w")
subprocess.call(["fbsvcmgr", "localhost:service_mgr", "user" , "SYSDBA" , "password" , "masterkey", \
                 "action_trace_list"], \
                 stdout=trc_lst, stderr=subprocess.STDOUT \
               )
trc_lst.close()

# Session ID: 5 
#   user:   
#   date:  2015-08-27 15:24:14 
#   flags: active, trace 

trcssn=0
with open( trc_lst.name,'r') as f:
    for line in f:
        i=1
        if 'Session ID' in line:
            for word in line.split():
                if i==3:
                    trcssn=word
                i=i+1
            break

# Result: `trcssn` is ID of active trace session. 
# We have to terminate trace session that is running on server BEFORE we termitane process `p_svcmgr`
if trcssn==0:
    print("Error parsing trace session ID.")
    os.remove(fdb_file)
    os.exit(0)

#####################################################################

# Preparing script for ISQL:

sql_cmd='''
set list on; 
set count on;
select 
    iif(a.mon$remote_protocol is null, 'internal', 'remote') as connection_protocol,
    iif(a.mon$remote_process is null,  'internal', 'remote') as connection_process,
    iif(a.mon$remote_pid     is null,  'internal', 'remote') as connection_remote_pid,
    a.mon$auth_method as auth_method -- should be: 'User name in DPB'
from rdb$database r
left join mon$attachments a on a.mon$attachment_id = current_connection and a.mon$system_flag = 0;
commit; 
'''

isql_cmd=open( os.path.join(context['temp_directory'],'tmp_isql_4889.sql'), 'w')
isql_cmd.write(sql_cmd)
isql_cmd.close()

#######################################################################

# Async. launch ISQL process with EMBEDDED connect. 
# ::::: NB :::::
# Confirmed that this action:
# works fine on WI-V3.0.0.31940, build 14-jul-2015
# **HANGS**  on WI-V3.0.0.31948, build 16-jul-2015

isql_log=open( os.path.join(context['temp_directory'],'tmp_isql_4889.log'), 'w')
p_isql = Popen( [ "isql" , fdb_file, \
                  "-user", "tmp$no$such$user$4889", \
                  "-n", "-i", isql_cmd.name ], \
                stdout=isql_log, \
                stderr=subprocess.STDOUT \
              )

# do NOT remove this delay:
time.sleep(5)

p_isql.terminate()
isql_log.close()

#####################################################################

# Stop trace session:

trc_lst=open(trc_lst.name, "a")
trc_lst.seek(0,2)
subprocess.call([ "fbsvcmgr", "localhost:service_mgr", "user" , "SYSDBA" , "password" , "masterkey", \
                  "action_trace_stop","trc_id",trcssn], \
                  stdout=trc_lst, stderr=subprocess.STDOUT \
               )
trc_lst.close()

p_svcmgr.terminate()
trc_log.close()

# do NOT remove this delay:
time.sleep(2)

#####################################################################

# Output logs:

i=0
with open( trc_log.name,'r') as f:
    for line in f:
        if ') EXECUTE_STATEMENT_FINISH' in line:
           i=1
        if i==1 and '1 records fetched' in line:
           i=2
           print("OK: found text in trace related to EMBEDDED connect.")
           break

if not i==2:
    print("FAILED to found text in trace related to EMBEDDED connect.")

if os.path.getsize(isql_log.name) == 0:
    print("FAILED to print log from EMBEDDED connect: log is EMPTY.")
else:
    with open( isql_log.name,'r') as f:
        print(f.read())
    f.close()

# do NOT remove this pause otherwise log of trace will not be enable for deletion and test will finish with 
# Exception raised while executing Python test script. exception: WindowsError: 32

time.sleep(1)

# On WI-V3.0.0.31948 final output was:
# FAILED to found text in trace related to EMBEDDED connect.
# FAILED to print log from EMBEDDED connect: log is EMPTY.

#####################################################################

# Cleanup:

if os.path.isfile(isql_cmd.name):
    os.remove(isql_cmd.name)

if os.path.isfile(isql_log.name):
    os.remove(isql_log.name)

if os.path.isfile(trc_cfg.name):
    os.remove(trc_cfg.name)

if os.path.isfile(trc_lst.name):
    os.remove(trc_lst.name)

if os.path.isfile(trc_log.name):
    os.remove(trc_log.name)

  """,
 'expected_stdout':
  """
     OK: found text in trace related to EMBEDDED connect.
     CONNECTION_PROTOCOL             internal
     CONNECTION_PROCESS              internal
     CONNECTION_REMOTE_PID           internal
     AUTH_METHOD                     User name in DPB
     Records affected: 1
  """,
 'expected_stderr':
  """
  """
}
]
}
