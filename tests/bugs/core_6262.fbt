{
'id': 'bugs.core_6262',
'qmid': None,
'tracker_id': 'CORE-6262',
'title': 'SHOW DOMAIN/TABLE does not display character set of system objects',
'description': 
 """
    We gather all system domains which belongs to TEXT family by query to rdb$fields.
    Then for each record from its resulset we issue statement: 'SHOW DOMAIN ... ;'
    and write it to .SQL file. After all records will be processed, we run ISQL and
    perform this script. Every row from its output must contain phrase 'CHARACTER SET'.

    Checked on 4.0.0.1803.

    ::: NB ::: additional filtering: "where f.rdb$character_set_id > 1" is needed when
    we query rdb$fields. Otherwise we get some domains without 'CHARACTER SET' phrases
    domains definition:
        rdb$character_set_id=0:
            show domain RDB$EDIT_STRING;
            RDB$EDIT_STRING                 VARCHAR(127) Nullable
            show domain RDB$MESSAGE;
            RDB$MESSAGE                     VARCHAR(1023) Nullable
        rdb$character_set_id=1:
            RDB$SYSTEM_PRIVILEGES           BINARY(8) Nullable
 """,
'min_versions': '4.0',
'versions': [
{
 'firebird_version': '4.0',
 'platform': 'All',
 'test_type': 'Python',
 'test_script':
"""
import os
import sys
import subprocess
from fdb import services

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

#--------------------------------------------

def cleanup( f_names_list ):
    global os
    for i in range(len( f_names_list )):
       if os.path.isfile( f_names_list[i]):
            os.remove( f_names_list[i] )

#--------------------------------------------

fb_home = services.connect(host='localhost', user= user_name, password= user_password).get_home_directory()

f_sql_chk = open( os.path.join(context['temp_directory'],'tmp_6262_chk.sql'), 'w')

cur = db_conn.cursor()
sql=\
'''
    select 'show domain '|| trim(f.rdb$field_name) ||';' as show_expr
    from rdb$fields f
    where f.rdb$character_set_id > 1
    order by f.rdb$field_name
'''

cur.execute(sql)
text_domains_count = 0
for r in cur:
    f_sql_chk.write( r[0]+os.linesep )
    text_domains_count += 1

f_sql_chk.close()
db_conn.close()


f_sql_log = open( ''.join( (os.path.splitext(f_sql_chk.name)[0], '.log' ) ), 'w', buffering = 0)
f_sql_err = open( ''.join( (os.path.splitext(f_sql_log.name)[0], '.err' ) ), 'w', buffering = 0)

subprocess.call( [ os.path.join( fb_home, 'isql'), dsn, '-i', f_sql_chk.name ], stdout = f_sql_log, stderr = f_sql_err)

f_sql_log.close()
f_sql_err.close()

# Checks:
#########
# 1. Result of STDERR must be empty:
with open(f_sql_err.name,'r') as f:
    for line in f:
        if line.split():
            print('UNEXPECTED STDERR: '+line)

# 2. All <text_domains_count> lines in STDOUT have to contain phrase 'CHARACTER SET':

lines_with_charset, lines_without_charset = 0, 0

with open(f_sql_log.name,'r') as f:
    for line in f:
        if line.split():
            if 'CHARACTER SET' in line:
                lines_with_charset += 1
            else:
                lines_without_charset += 1

if lines_with_charset > 0:
    print('Number of lines with specified charset: '  + ( 'SAME AS' if lines_with_charset == text_domains_count else str(lines_with_charset)+' - LESS THEN' ) + ' NUMBER OF TEXT DOMAINS' )
else:
    print('SOMETHING WAS WRONG: COULD NOT FIND ANY LINE WITH "CHARACTER SET" PHRASE')

print('Number of lines with missed charset:',lines_without_charset)

cleanup( [ c.name for c in (f_sql_chk, f_sql_log, f_sql_err ) ] )

""",
 'expected_stdout': 
  """
    Number of lines with specified charset: SAME AS NUMBER OF TEXT DOMAINS
    Number of lines with missed charset: 0
  """,
 'expected_stderr': 
  """
  """,
  'substitutions':[ ('[ \t]+',' ') ]
}
]
}
