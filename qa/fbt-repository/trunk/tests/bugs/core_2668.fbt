{
'id': 'bugs.core_2668',
'qmid': None,
'tracker_id': 'CORE-2668',
'title': 'Write note into log when automatic sweep is started',
'description': 
 """
   In order to make database be 'ready' for sweep auto-start we:
   1. Launch ISQL in async. process (using Python subprocess.Popen() unit) which does:
     1.1. Change DB sweep interval to small value (100 selected).
     1.2. Create table and add one row in it (marked as 'LOCKED_FOR_PAUSE') + COMMIT.
     1.3. Start EXECUTE BLOCK with adding 150 of rows in autonomous transactions 
          (this lead eventually to difference Next - OIT =~ 150).
     1.4. Run execute block with ES/EDS which will establish new attachment (we specify
          there connection ROLE as some non-existent string, see ":v_role" usage below).
          This EB will try to UPDATE record which is LOCKED now by 1st ("main") attachment.
     ISQL will infinitelly hang since this moment.
   
   2. Run (in main Python thread) FBSVCMGR with:
     2.1. Moving database to SHUTDOWN state;
     2.2. Returning database back to ONLINE.
     2.3. Obtaining content of firebird.log and storing it in separate file ('f_fblog_before').
     2.4. Running ISQL process with single command: QUIT (we need just one attachment to 
          that database in order SWEEP will auto started inside it).
     2.5. Take small delay (~2 seconds) in order to allow OS to finish writing __new__ messages
          about SWEEP auto-start in firebird.log.
     2.6. Obtaining content of firebird.log and storing it in separate file ('f_fblog_after').
 
   3. Compare two files: f_fblog_before and f_fblog_after (using Python package "diff").
     3.1. We are intereated only on lines with info about SWEEP, other text is filtered out.
     3.2. Lines with Tx counters (OIT, OAT, OST and Next) can contain different values depending
          on FB architecture, so finally we apply appropriate substitutions.

   Checked on: WI-V2.5.6.26965 (SC); WI-V3.0.0.32300 (SS/SC/CS).
 """,
'min_versions': '2.5.2',
'versions': [
{
 'firebird_version': '2.5',
 'platform': 'All',
 'test_type': 'Python',
 'test_script': 
  """\
import os
#import sys
import time
import subprocess
from subprocess import Popen
import difflib
import re

def svc_get_fb_log( engine, f_fb_log ):

  import subprocess

  if engine.startswith('2.5'):
      get_firebird_log_key='action_get_ib_log'
  else:
      get_firebird_log_key='action_get_fb_log'

  subprocess.call([ "fbsvcmgr", \
                    "localhost:service_mgr",\
                    get_firebird_log_key \
                  ], \
                   stdout=f_fb_log, stderr=subprocess.STDOUT
                 )
  return


db_conn.close()

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

f_init_log = open( os.path.join(context['temp_directory'],'tmp_init_2668.log'), 'w')

db_file="$(DATABASE_LOCATION)bugs.core_2668.fdb"

subprocess.call( ["fbsvcmgr", "localhost:service_mgr", \
                  "action_properties", "prp_sweep_interval", "100", \
                  "dbname", db_file, \
                 ], \
                 stdout = f_init_log, \
                 stderr = subprocess.STDOUT \
               )

subprocess.call([ "fbsvcmgr", "localhost:service_mgr", \
                  "action_properties", "prp_write_mode", "prp_wm_async", \
                  "dbname", db_file ],\
                  stdout = f_init_log, \
                  stderr = subprocess.STDOUT \
               )
'''
subprocess.call( ["fbsvcmgr", "localhost:service_mgr", \
                          "action_db_stats", "dbname", dsn, \
                          "sts_hdr_pages" \
                         ], \
                         stdout = f_init_log, \
                         stderr = subprocess.STDOUT \
                       )
'''
f_work_sql=open( os.path.join(context['temp_directory'],'tmp_work_2668.sql'), 'w')

sql_dml='''
    set list on;
    select rdb$get_context('SYSTEM','ENGINE_VERSION') as engine_version 
    from rdb$database;
    commit;

    recreate table test(s varchar(500) unique);
    insert into test(s) values('LOCKED_FOR_PAUSE');
    commit;

    set transaction read committed WAIT;

    update test set s = s where s = 'LOCKED_FOR_PAUSE';


    set term ^;
    execute block as
      declare n int = 150;
      declare v_role varchar(31);
    begin
      while (n > 0) do 
          in autonomous transaction do 
          insert into test(s) values( rpad('', 500, uuid_to_char(gen_uuid()) ) ) 
          returning :n-1 into n;

      v_role = left(replace( uuid_to_char(gen_uuid()), '-', ''), 31);
      execute statement ('update test set s = s where s = ?') ('LOCKED_FOR_PAUSE')
      on external 
          'localhost:' || rdb$get_context('SYSTEM', 'DB_NAME')
          as user 'SYSDBA' password 'masterkey' role v_role
      with autonomous transaction;
      
    end
    ^
    set term ;^
    set heading off;
    select '-- shutdown me now --' from rdb$database;
'''
f_work_sql.write(sql_dml)
f_work_sql.close()

f_work_log=open( os.path.join(context['temp_directory'],'tmp_work_2668.log'), 'w')

p_work_sql=\
subprocess.Popen( ["isql", dsn, "-i", f_work_sql.name], \
                  stdout = f_work_log, \
                  stderr = subprocess.STDOUT \
                )
time.sleep(5)

subprocess.call( ["fbsvcmgr", "localhost:service_mgr", \
                  "action_properties", "prp_shutdown_mode", "prp_sm_full", "prp_shutdown_db", "0", \
                  "dbname", db_file, \
                 ], \
                 stdout = f_init_log, \
                 stderr = subprocess.STDOUT \
               )


p_work_sql.terminate()
f_work_log.close()

with open( f_work_log.name,'r') as f:
    for line in f:
        i=1
        if 'ENGINE_VERSION' in line:
            for word in line.split():
                if i==2:
                    engine=word
                i=i+1
            break
f.close()

'''
subprocess.call( ["fbsvcmgr", "localhost:service_mgr", \
                  "action_db_stats", "dbname", dsn, \
                  "sts_hdr_pages" \
                 ], \
                 stdout = f_init_log, \
                 stderr = subprocess.STDOUT \
               )
'''

subprocess.call( ["fbsvcmgr", "localhost:service_mgr", \
                  "action_properties", "prp_db_online", \
                  "dbname", db_file, \
                 ], \
                 stdout = f_init_log, \
                 stderr = subprocess.STDOUT \
               )
'''
subprocess.call( ["fbsvcmgr", "localhost:service_mgr", \
                  "action_db_stats", "dbname", dsn, \
                  "sts_hdr_pages" \
                 ], \
                 stdout = f_init_log, \
                 stderr = subprocess.STDOUT \
               )
'''
f_init_log.close()

f_fblog_before=open( os.path.join(context['temp_directory'],'tmp_2668_fblog_before.txt'), 'w')
svc_get_fb_log( engine, f_fblog_before )
f_fblog_before.close()

####################################################
# Make connection to database and immediatelly QUIT. 
# SWEEP should be auto started after this:
####################################################

runProgram('isql', [dsn, '-q'], 'quit;')

f_fblog_after=open( os.path.join(context['temp_directory'],'tmp_2668_fblog_after.txt'), 'w')
svc_get_fb_log( engine, f_fblog_after )
f_fblog_after.close()

# _!_!_!_!_!_!_!_!_!_! do NOT reduce this delay: firebird.log get new messages NOT instantly !_!_!_!_!_!_!_!_
# Currently firebird.log can stay with OLD content if heavy concurrent workload exists on the same host!
time.sleep(5)

oldfb=open(f_fblog_before.name, 'r')
newfb=open(f_fblog_after.name, 'r')

difftext = ''.join(difflib.unified_diff(
    oldfb.readlines(), 
    newfb.readlines()
  ))
oldfb.close()
newfb.close()

f_diff_txt=open( os.path.join(context['temp_directory'],'tmp_2668_diff.txt'), 'w')
f_diff_txt.write(difftext)
f_diff_txt.close()

#print(engine)

pattern  = re.compile("\+[\s]+OIT[ ]+[0-9]+,[\s]*OAT[\s]+[0-9]+,[\s]*OST[\s]+[0-9]+,[\s]*NEXT[\s]+[0-9]+")
# OIT 160, OAT 159, OST 159, Next 161

# NB: difflib.unified_diff() can show line(s) that present in both files, without marking that line(s) with "+". 
# Usually these are 1-2 lines that placed just BEFORE difference starts.
# So we have to check output before display diff content: lines that are really differ must start with "+".

with open( f_diff_txt.name,'r') as f:
    for line in f:
        if line.startswith('+'):
            if  'SWEEP' in line.upper() or 'bugs.core_2668.fdb'.upper() in line.upper() or pattern.match(line.upper()):
                print( ' '.join(line.split()).upper() )
f.close()

###############################
# Cleanup.
f_list=[]
f_list.append(f_init_log)
f_list.append(f_work_sql)
f_list.append(f_work_log)
f_list.append(f_fblog_before)
f_list.append(f_fblog_after)
f_list.append(f_diff_txt)
'''
for i in range(len(f_list)):
    if os.path.isfile(f_list[i].name):
        os.remove(f_list[i].name)
'''
  """,
 'expected_stdout':
  """
    + SWEEP IS STARTED BY SWEEPER
    + DATABASE "C:\MIX\FIREBIRD\QA\FBT-REPO\TMP\BUGS.CORE_2668.FDB"
    + OIT 4, OAT 159, OST 159, NEXT 160
    + SWEEP IS FINISHED
    + DATABASE "C:\MIX\FIREBIRD\QA\FBT-REPO\TMP\BUGS.CORE_2668.FDB"
    + OIT 160, OAT 159, OST 159, NEXT 161
  """,
  'substitutions':[
     ('.*BUGS.CORE_2668.FDB','BUGS.CORE_2668.FDB'),
     ('OIT [0-9]+','OIT'),
     ('OAT [0-9]+','OAT'),
     ('OST [0-9]+','OST'),
     ('NEXT [0-9]+','NEXT')
   ]
}                                                                                                      
]
}
