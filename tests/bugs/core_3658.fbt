{
'id': 'bugs.core_3658',
'qmid': None,
'tracker_id': 'CORE-3658',
'title': "FBSVCMGR connects to server as OS user name rather than value of ISC_USER environment variable",
'description': """
  ###   W A R N I N G   ###
  1) This test uses asynchronous call of external routine (fbsvcmgr) using subprocess.Popen unit,
     see: subprocess.call(["fbsvcmgr", ... ], stdout=...)
  2) It was encountered that FBSVCMGR do NOT wait for OS completes writing of its output on disk,
     (see CORE-4896), thus forced to use delays (see calls `time.sleep()`).
  3) Correct work was checked on:  WI-V2.5.6.26963; WI-V3.0.0.32281 (SS/SC/CS).
""",
'min_versions': '2.5.2',
'versions': [
{
 'firebird_version': '2.5',
 'platform': 'All',
 'test_type': 'Python',
 'init_script':
  """
  """,
 'test_script':
  """\
import os
import subprocess
from subprocess import Popen
import time

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

# Obtain engine version:
engine = str(db_conn.engine_version) # convert to text because 'float' object has no attribute 'startswith'
db_file = db_conn.database_name
db_conn.close()

#---------------------------------------------

def flush_and_close(file_handle):
    # https://docs.python.org/2/library/os.html#os.fsync
    # If you're starting with a Python file object f, 
    # first do f.flush(), and 
    # then do os.fsync(f.fileno()), to ensure that all internal buffers associated with f are written to disk.
    global os
    
    file_handle.flush()
    if file_handle.mode not in ('r', 'rb'):
        # otherwise: "OSError: [Errno 9] Bad file descriptor"!
        os.fsync(file_handle.fileno())
    file_handle.close()

#--------------------------------------------

def cleanup( f_names_list ):
    global os
    for i in range(len( f_names_list )):
       if os.path.isfile( f_names_list[i]):
            os.remove( f_names_list[i] )
            if os.path.isfile( f_names_list[i]):
                print('ERROR: can not remove file ' + f_names_list[i])

#--------------------------------------------

txt25 = '''# Trace config, format for 2.5. Generated auto, do not edit!
<services>
   enabled true
   log_services true
  log_errors true
</services>
'''

# NOTES ABOUT TRACE CONFIG FOR 3.0:
# 1) Header contain clauses in different format vs FB 2.5: its header's data must be enclosed with '{' '}';
# 2) Name and value must be separated by EQUALITY sign ('=') in FB-3 trace.conf, otherwise we get runtime error:
#    element "<. . .>" have no attribute value set
txt30 = '''# Trace config, format for 2.5. Generated auto, do not edit!
services 
{
  enabled = true
  log_services = true
  log_errors = true
}
'''

f_trccfg=open( os.path.join(context['temp_directory'],'tmp_trace_3658.cfg'), 'w')
if engine.startswith('2.5'):
    f_trccfg.write(txt25)
else:
    f_trccfg.write(txt30)
flush_and_close( f_trccfg )


# ##############################################################
# S T A R T   T R A C E   i n   S E P A R A T E    P R O C E S S
# ##############################################################

f_trclog=open( os.path.join(context['temp_directory'],'tmp_trace_3658.log'), 'w')
p = Popen([ context['fbsvcmgr_path'], "localhost:service_mgr" , "action_trace_start" , "trc_cfg" , f_trccfg.name], stdout=f_trclog, stderr=subprocess.STDOUT)
time.sleep(2)

# ####################################################
# G E T  A C T I V E   T R A C E   S E S S I O N   I D
# ####################################################
# Save active trace session info into file for further parsing it and obtain session_id back (for stop):

f_trclst=open( os.path.join(context['temp_directory'],'tmp_trace_3658.lst'), 'w')
subprocess.call([context['fbsvcmgr_path'], "localhost:service_mgr", "action_trace_list"], stdout=f_trclst, stderr=subprocess.STDOUT)
flush_and_close( f_trclst )

# !!! DO NOT REMOVE THIS LINE !!!
time.sleep(2)

trcssn=0
with open( f_trclst.name,'r') as f:
    for line in f:
        i=1
        if 'Session ID' in line:
            for word in line.split():
                if i==3:
                    trcssn=word
                i=i+1
            break

# Result: `trcssn` is ID of active trace session. Now we have to terminate it:

# ####################################################
# S E N D   R E Q U E S T    T R A C E   T O   S T O P
# ####################################################
fn_nul = open(os.devnull, 'w')
subprocess.call([context['fbsvcmgr_path'], "localhost:service_mgr", "action_trace_stop","trc_id", trcssn], stdout=fn_nul)
fn_nul.close()

# 23.02.2021. DELAY FOR AT LEAST 1 SECOND REQUIRED HERE!
# Otherwise trace log can remain empty.
time.sleep(1)

# Doc about Popen.terminate():
# https://docs.python.org/2/library/subprocess.html
# Stop the child. On Posix OSs the method sends SIGTERM to the child.
# On Windows the Win32 API function TerminateProcess() is called to stop the child.

# Doc about Win API TerminateProcess() function:
# https://msdn.microsoft.com/en-us/library/windows/desktop/ms686714%28v=vs.85%29.aspx
# The terminated process cannot exit until all pending I/O has been completed or canceled.
# TerminateProcess is ____asynchronous____; it initiates termination and returns immediately.
#                         ^^^^^^^^^^^^
p.terminate()
flush_and_close( f_trclog )

# Do not remove this line.
time.sleep(2)

# Output log of trace for comparing it with expected.
# ::: NB ::: Content if trace log is converted to UPPER case in order to reduce change of mismatching with
# updated trace output in some future versions:

with open( f_trclog.name,'r') as f:
    print(f.read().upper())

cleanup( [i.name for i in (f_trccfg, f_trclog, f_trclst) ] )

  """,
 'expected_stdout': 
  """
    SERVICE_MGR, (SERVICE 03AC7620, SYSDBA, TCPV4:192.0.0.1/1662, C:\MIX\FIREBIRD\FB30\FBSVCMGR.EXE:6624)
    SERVICE_MGR, (SERVICE 03F393A0, SYSDBA, TCPV4:127.0.0.1/1664, C:\MIX\FIREBIRD\FB30\FBSVCMGR.EXE:6396)
    SERVICE_MGR, (SERVICE 03C393A0, SYSDBA, TCPV4:127.0.0.1/1664, C:\MIX\FIREBIRD\FB30\FBSVCMGR.EXE:6396)
    SERVICE_MGR, (SERVICE 03C393A0, SYSDBA, TCPV4:127.0.0.1/1664, C:\MIX\FIREBIRD\FB30\FBSVCMGR.EXE:6396)
  """,
 'expected_stderr': 
  """
  """,
  'substitutions': [
    ( '^((?!SERVICE [0-9A-F]{8}).)*$', '' ),
    ( 'SERVICE_MGR, \(SERVICE [0-9A-F]+, SYSDBA.*', 'SERVICE_MGR, \(SERVICE [0-9A-F]{8}, SYSDBA' )
  ]

}
]
}
