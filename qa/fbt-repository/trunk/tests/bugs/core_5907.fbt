{
'id': 'bugs.core_5907',
'qmid': None,
'tracker_id': 'CORE-5907',
'title': "Regression: can not launch trace if its 'database' section contains regexp pattern with curvy brackets to enclose quantifier",
'description': 
 """
    Database file name for check: {core_5907.97}.tmp // NB: outer curvy brackets ARE INCLUDED in this name.
    This name should match to pattern: (\{core_5907.[[:DIGIT:]]{2}\}).tmp -- but we have to duplicate every "{" and "}".
    Also, we have to duplicate '\' otherwise it will be escaped by fbtest framework.
    Checked on 4.0.0.1224: OK, 14.047s.
 """,
'min_versions': '4.0',
'versions': [
{
 'firebird_version': '4.0',
 'platform': 'All',
 'test_type': 'Python',
 'init_script':
  """
    recreate table test(id int);
    commit;
  """,
 'test_script':
  """
import os
import re
import subprocess
import time
import shutil
from fdb import services
from subprocess import Popen

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

# Obtain engine version:
engine = str(db_conn.engine_version) # convert to text because 'float' object has no attribute 'startswith'
db_conn.close()

fb_home = services.connect(host='localhost', user= user_name, password= user_password).get_home_directory()

txt30 = '''# Trace config, format for 3.0. Generated auto, do not edit!
database=(%[\\\\\\\\/](\\{{core_5907.[[:DIGIT:]]{{2}}\\}}).tmp)
{
  enabled = true
  time_threshold = 0
  #log_statement_finish = true
  log_connections = true
}
'''

f_trc_cfg=open( os.path.join(context['temp_directory'],'tmp_trace_5907.cfg'), 'w')
f_trc_cfg.write(txt30)
f_trc_cfg.close()

this_fdb = "$(DATABASE_LOCATION)bugs.core_5907.fdb"
test_fdb = "$(DATABASE_LOCATION){core_5907.97}.tmp"  # name of copy will be: %FBT_REPO%\tmp\{core_5907.97}.tmp

shutil.copy2( this_fdb, test_fdb )



# ##############################################################
# S T A R T   T R A C E   i n   S E P A R A T E    P R O C E S S
# ##############################################################

f_trc_log=open( os.path.join(context['temp_directory'],'tmp_trace_5907.log'), "w")
f_trc_err=open( os.path.join(context['temp_directory'],'tmp_trace_5907.err'), "w")

p_trace = Popen( [ fb_home+'fbsvcmgr', 
                   'localhost:service_mgr',
                   'action_trace_start', 
                   'trc_cfg', f_trc_cfg.name
                 ],
                 stdout = f_trc_log, stderr = f_trc_err
               )

# this delay need for trace start and finish its output about invalid section in its config file:
time.sleep(1)

# ####################################################
# G E T  A C T I V E   T R A C E   S E S S I O N   I D
# ####################################################
# Save active trace session info into file for further parsing it and obtain session_id back (for stop):

f_trc_lst = open( os.path.join(context['temp_directory'],'tmp_trace_5907.lst'), 'w')
subprocess.call( [ fb_home+'fbsvcmgr', 
                   'localhost:service_mgr', 
                   'action_trace_list'
                 ],
                 stdout=f_trc_lst
               )
f_trc_lst.close()

# !!! DO NOT REMOVE THIS LINE !!!
time.sleep(3)

trcssn=0
with open( f_trc_lst.name,'r') as f:
    for line in f:
        i=1
        if 'Session ID' in line:
            for word in line.split():
                if i==3:
                    trcssn=word
                i=i+1
            break
f.close()
# Result: `trcssn` is ID of active trace session. Now we have to terminate it:


#.............................................................................

#sql_cmd="insert into extdecimal(dec34_34) values (1)"

sql_cmd='select mon$database_name from mon$database'

con1=fdb.connect(dsn = 'localhost:' + test_fdb)
cur=con1.cursor()
try:
    cur.execute( sql_cmd )
    for r in cur:
        print( r[0] )
except Exception,e:
    for i in e[0].split('\\n'):
        print('CLIENT GOT ERROR:',i)
finally:
    cur.close()

con1.close()
#.............................................................................

time.sleep(3)

# ####################################################
# S E N D   R E Q U E S T    T R A C E   T O   S T O P
# ####################################################
if trcssn>0:
    fn_nul = open(os.devnull, 'w')
    #f_trc_log=open( os.path.join(context['temp_directory'],'tmp_trace_5907.log'), "w")
    subprocess.call( [ fb_home+'fbsvcmgr', 
                       'localhost:service_mgr',
                       'action_trace_stop','trc_id', trcssn
                     ], 
                     stdout=fn_nul
                   )
    fn_nul.close()
    # DO NOT REMOVE THIS LINE:
    time.sleep(2)


p_trace.terminate()

f_trc_log.close()
f_trc_err.close()

time.sleep(1)

# 1. Trace STDERR log should be EMPTY:
######################################

# Example of STDERR when wrong database name pattern is spesified:
# Trace session ID 11 started
# Error creating trace session for database "":
# Passed text: illegal line <database=(%[\\/]({core_5907.[[:DIGIT:]]{2}}).tmp)>

f_list = ( f_trc_err, )
for i in range(len(f_list)):
   f_name=f_list[i].name
   if os.path.getsize(f_name) > 0:
       with open( f_name,'r') as f:
           for line in f:
               print("Unexpected STDERR, file "+f_name+": "+line)
       f.close()

# 2. Trace STDOUT log must contain one ATTACH and one DETACH events, e.g:
#########################################################################
#2018-09-26T09:42:26.7340 (508:02122400) ATTACH_DATABASE
#	C:\MIX\FIREBIRD\QA\FBT-REPO\TMP\{CORE_5907.97}.TMP (ATT_10, SYSDBA:NONE, NONE, TCPv4:127.0.0.1/4159)
#	C:\Python27\python.exe:2080
#2018-09-26T09:42:26.7500 (508:02122400) DETACH_DATABASE
#	C:\MIX\FIREBIRD\QA\FBT-REPO\TMP\{CORE_5907.97}.TMP (ATT_10, SYSDBA:NONE, NONE, TCPv4:127.0.0.1/4159)
#	C:\Python27\python.exe:2080

msg='Found expected '
with open( f_trc_log.name,'r') as f:
    for line in f:
        if 'ATTACH_DATABASE' in line:
            print( msg + 'ATTACH.')
        if 'DETACH_DATABASE' in line:
            print( msg + 'DETACH.')


# CLEANUP
#########

f_list=(f_trc_cfg, f_trc_log, f_trc_err, f_trc_lst)
for i in range(len(f_list)):
   if os.path.isfile(f_list[i].name):
       os.remove(f_list[i].name)

os.remove(test_fdb)

  """,
 'expected_stdout': 
  """
    {CORE_5907.97}.TMP
    Found expected ATTACH.
    Found expected DETACH.
  """,
 'expected_stderr': 
  """
  """,
  'substitutions':[('.*{CORE_5907.97}.TMP', '{CORE_5907.97}.TMP')]
}
]
}
