{
'id': 'bugs.core_4302_addi',
'qmid': None,
'tracker_id': 'CORE-4302',
'title': '### ADDITIONAL TEST ### Lookup (or scan) in descending index could be very inefficient for some keys',
'description': 
 """
   This is ADDITIONAL test for issue in ticket: "Pavel Zotov added a comment - 23/Dec/13 04:02 PM".
   Separate fix was required for this issue, see comments in
   https://sourceforge.net/p/firebird/mailman/message/31785278/
   ===
      + 2013-12-25 10:57  hvlad 
      +   M src/jrd/btr.cpp
      +Additional fix for bug CORE-4302 : Lookup (or scan) in descending index could be very inefficient...
   ===
   Excessive fetches count reproduced on WI-T3.0.0.30566 (Alpha1 release).
   Current results were checked on Windows (2.5.6.26994, 3.0.0.32484, 4.0.0.138) and POSIX (4.0.0.138)
 """,
'min_versions': '2.5.3',
'versions': [
{
 'firebird_version': '2.5',
 'platform': 'All',
 'test_type': 'ISQL',
 'init_script':
  """
  """,
 'test_script': 
  """
    recreate table td(id int, s varchar(50)); commit;
    set term ^;
    execute block as
    begin
      begin
        execute statement 'create sequence g';
        when any do begin end
      end
    end^
    set term ;^
    commit;
    alter sequence g restart with 0;
    commit;

    recreate table t_mon(rn smallint, pg_fetches bigint);

    recreate view v_mon as 
    select i.mon$page_fetches as pg_fetches
    from mon$attachments a
    left join mon$io_stats i on a.mon$stat_id=i.mon$stat_id     
    where a.mon$attachment_id = current_connection;

    set term ^;
    execute block as
    declare n int = 10000;
    declare m int;
    begin
        m=n; while(m>0) do insert into td(id, s) values( gen_id(g,1), 'q' ) returning :m-1 into m;
        m=n; while(m>0) do insert into td(id, s) values( gen_id(g,1), 'qw' ) returning :m-1 into m;
        m=n; while(m>0) do insert into td(id, s) values( gen_id(g,1), 'qwe' ) returning :m-1 into m;
        m=n; while(m>0) do insert into td(id, s) values( gen_id(g,1), 'qwer' ) returning :m-1 into m;
        m=n; while(m>0) do insert into td(id, s) values( gen_id(g,1), 'qwert' ) returning :m-1 into m;
        m=n; while(m>0) do insert into td(id, s) values( gen_id(g,1), 'qwerty' ) returning :m-1 into m;
        m=n; while(m>0) do insert into td(id, s) values( gen_id(g,1), 'qwertyu' ) returning :m-1 into m;
        m=n; while(m>0) do insert into td(id, s) values( gen_id(g,1), 'qwertyui' ) returning :m-1 into m;
        m=n; while(m>0) do insert into td(id, s) values( gen_id(g,1), 'qwertyuio' ) returning :m-1 into m;
        m=n; while(m>0) do insert into td(id, s) values( gen_id(g,1), 'qwertyuiop' ) returning :m-1 into m;
    end^ set term ;^ 
    commit;

    create descending index td_s_des on td(s); commit;
    alter sequence g restart with 0;
    commit;

    insert into t_mon(rn, pg_fetches) values( gen_id(g,1), (select pg_fetches from v_mon));

    set term ^;
    execute block as
        declare c int;
    begin
        select count(*) from rdb$database where exists(select * from td where s='qwertyuiop') into c;
    end
    ^
    set term ;^
    commit;

    insert into t_mon(rn, pg_fetches) values( gen_id(g,1), (select pg_fetches from v_mon));
    commit;

    insert into t_mon(rn, pg_fetches) values( gen_id(g,1), (select pg_fetches from v_mon));

    set term ^;
    execute block as
        declare c int;
    begin
        select count(*) from rdb$database where exists(select * from td where s='qwertyuioo') into c; -- note: `o` duplicated at the end of key 
    end
    ^
    set term ;^
    commit;

    insert into t_mon(rn, pg_fetches) values( gen_id(g,1), (select pg_fetches from v_mon));
    commit;

    set list on;
    select 
         rn as measure
        ,iif( fetches_diff < max_allowed,
              'OK, less then: '||max_for_25||' - for FB 2.5; '||max_for_30||' - for FB >= 3.0', 
              'BAD: '|| fetches_diff ||' - greater then ' || max_allowed 
            ) as fetches_count
    from (
        select 
            rn
           ,fetches_at_end - fetches_at_beg as fetches_diff
           ,max_for_25
           ,max_for_30
           ,cast(iif(rdb$get_context('SYSTEM','ENGINE_VERSION') >= '3.0', max_for_30, max_for_25) as int) as max_allowed
        from (
          select 
               rn
              ,max(iif(bg=1, pg_fetches, null)) as fetches_at_beg
              ,max(iif(bg=1, null, pg_fetches)) as fetches_at_end
              ,140 as max_for_25
              ,70  as max_for_30
           --  ^        ####################################################
           --  |        #                                                  #
           --  +------- #   T H R E S H O L D S    F O R    F E T C H E S  #
           --           #                                                  #
           --           ####################################################
          from (
              select 1+(rn-1)/2 as rn, mod(rn,2) as bg, pg_fetches 
              from t_mon
          )
          group by rn
        )
    )
    order by measure;
  """,
 'expected_stdout': 
  """
    MEASURE                         1
    FETCHES_COUNT                   OK, less then: 140 - for FB 2.5; 70 - for FB >= 3.0

    MEASURE                         2
    FETCHES_COUNT                   OK, less then: 140 - for FB 2.5; 70 - for FB >= 3.0
  """
}
]
}
