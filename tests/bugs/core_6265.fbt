{
'id': 'bugs.core_6265',
'qmid': None,
'tracker_id': 'CORE-6265',
'title': "mapping rules destroyed by backup / restore",
'description':
 """
    Confirmed bug on:  4.0.0.1796 CS; 3.0.6.33247 CS.
    Works fine on: 4.0.0.1806 SS; 3.0.6.33272 CS.
 """,
'min_versions': '3.0.6',
'versions': [
{
 'firebird_version': '3.0',
 'platform': 'All',
 'test_type': 'Python',
 'init_script':
  """
  """,
 'test_script':
  """\
import os
import sys
import time
import subprocess
from subprocess import PIPE
from fdb import services

#--------------------------------------------

def cleanup( f_names_list ):
    global os
    for i in range(len( f_names_list )):
       if os.path.isfile( f_names_list[i]):
            os.remove( f_names_list[i] )

#--------------------------------------------

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

fb_home = services.connect(host='localhost', user= user_name, password= user_password).get_home_directory()
db_conn.close()

sql_init=\
'''
    create role boss;
    create mapping map_boss using plugin win_sspi from user Bill to role boss;
    commit;
    create view v_map as
    select 
        rdb$map_name, 
        rdb$map_using, 
        rdb$map_plugin, 
        rdb$map_db, 
        rdb$map_from_type, 
        rdb$map_from, 
        rdb$map_to_type, 
        rdb$map_to 
    from rdb$auth_mapping;
    commit;
    set list on;
    set count on;
    select * from v_map;
'''

f_init_sql = open( os.path.join(context['temp_directory'],'tmp_6265.sql'), 'w', buffering = 0)
f_init_sql.write( sql_init )
f_init_sql.close()

f_init_log = open( '.'.join( (os.path.splitext( f_init_sql.name )[0], 'log') ), 'w', buffering = 0)
subprocess.call( [ fb_home + 'isql', dsn, '-q', '-i', f_init_sql.name ], stdout = f_init_log, stderr = subprocess.STDOUT)
f_init_log.close()

this_restored_1=os.path.join(context['temp_directory'],'tmp_6265_1.tmp')
this_restored_2=os.path.join(context['temp_directory'],'tmp_6265_2.tmp')

cleanup( (this_restored_1, this_restored_2) )

# https://docs.python.org/2/library/subprocess.html#replacing-shell-pipeline
#   output=`dmesg | grep hda`
#   becomes:
#   p1 = Popen(["dmesg"], stdout=PIPE)
#   p2 = Popen(["grep", "hda"], stdin=p1.stdout, stdout=PIPE)
#   p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.
#   output = p2.communicate()[0]
# gbak -b localhost:$fdb_init stdout | gbak -rep stdin localhost:$fdb_rest

# BACKUP-RESTORE #1:
# ~~~~~~~~~~~~~~~~~~
p_sender = subprocess.Popen( [ fb_home+'gbak', '-b', dsn, 'stdout' ], stdout=PIPE)
p_getter = subprocess.Popen( [ fb_home+'gbak', '-c', 'stdin',  'localhost:' + this_restored_1 ], stdin = p_sender.stdout, stdout = PIPE )
p_sender.stdout.close()
p_getter_stdout, p_getter_stderr = p_getter.communicate()

#---------------------------------------------------------

# BACKUP-RESTORE #2:
# ~~~~~~~~~~~~~~~~~~
p_sender = subprocess.Popen( [ fb_home+'gbak', '-b', 'localhost:' + this_restored_1, 'stdout' ], stdout=PIPE)
p_getter = subprocess.Popen( [ fb_home+'gbak', '-c', 'stdin',  'localhost:' + this_restored_2 ], stdin = p_sender.stdout, stdout = PIPE )
p_sender.stdout.close()
p_getter_stdout, p_getter_stderr = p_getter.communicate()

#----------------------------------------------------------

runProgram('isql',[ 'localhost:' + this_restored_2 ], 'set list on; set count on; select * from v_map;')

cleanup( (this_restored_1, this_restored_2, f_init_sql.name, f_init_log.name) )

  """,
 'expected_stdout': 
  """
    RDB$MAP_NAME                    MAP_BOSS
    RDB$MAP_USING                   P
    RDB$MAP_PLUGIN                  WIN_SSPI
    RDB$MAP_DB                      <null>
    RDB$MAP_FROM_TYPE               USER
    RDB$MAP_FROM                    BILL
    RDB$MAP_TO_TYPE                 1
    RDB$MAP_TO                      BOSS
    Records affected: 1
  """,
 'expected_stderr': 
  """
  """
}
]
}
