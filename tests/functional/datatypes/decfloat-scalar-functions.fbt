{
'id': 'functional.datatypes.decfloat-scalar-functions',
'qmid': None,
'tracker_id': '',
'title': 
 """
   Test common math functions that should work with DECFLOAT datatype.
   4.0.0.680: OK, 0.891s.
   4.0.0.651: FAILED on SIGN() with:
       Statement failed, SQLSTATE = 22003
       Decimal float overflow.  The exponent of a result is greater than the magnitude allowed.

   31.10.2019: adjusted output to recent FB version. Checked on 4.0.0.1635 SS: 0.917s.
   26.06.2020: adjusted output to recent FB version. Checked on 4.0.0.2079, intermediate snapshot with timestamp = 26.06.2020 14:34.
 """,
'description': 
 """
    See CORE-5535 and doc\sql.extensions\README.data_types:
    ---
        A number of standard functions can be used with DECFLOAT datatype. It is:
        ABS, CEILING, EXP, FLOOR, LN, LOG, LOG10, POWER, SIGN, SQRT.
    ---
 """,
'min_versions': '4.0.0',
'versions': [
{
 'firebird_version': '4.0',
 'platform': 'All',
 'test_type': 'ISQL',
 'test_script': 
  """
    set list on;

    with c as (
        select
            -123456789012345678901234567890.123 as n1
        from rdb$database
    )
    select n1 from c
    union all
    select abs(n1) from c
    union all
    select ceiling(n1) from c
    union all
    select floor(n1) from c
    union all
    select ceiling(abs(n1)) from c
    union all
    select floor(abs(n1)) from c
    ;

    with c as (
        select
            --1797693134862316000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 n1
n1
        from rdb$database
    )
    select n1 as n2 from c
    union all
    select ln(n1) from c
    union all
    select exp(ln(n1)) from c
    union all
    select log10(n1) from c
    union all
    select power(n1,-1.0000000000/log10(n1)) from c
    union all
    select sqrt(n1) from c
    union all
    select sign(-n1) from c -- added 25.06.2017
    ;

    --------------------------------------------------------------------

    with c as (
        select
             170141183460469231731687303715884105727 power_2_127_dec_1
            ,170141183460469231731687303715884105728 power_2_127_exact
        from rdb$database
    )
    select power_2_127_dec_1 as n3a, power_2_127_exact as n3b from c
    union all
    select ln(power_2_127_dec_1), ln(power_2_127_exact) from c
    union all
    select exp(ln(power_2_127_dec_1)), exp(ln(power_2_127_dec_1)) from c
    union all
    select log10(power_2_127_dec_1), log10(power_2_127_exact) from c
    union all
    select power(power_2_127_dec_1,-1.0000000000/log10(power_2_127_dec_1)), power(power_2_127_exact,-1.0000000000/log10(power_2_127_exact)) from c
    union all
    select sqrt(power_2_127_dec_1), sqrt(power_2_127_exact) from c
    union all
    select sign(-power_2_127_dec_1), sign(-power_2_127_exact) from c
    ;
  """,
  'expected_stdout':
  """
    N1 -1.234567890123457e+29
    N1 1.234567890123457e+29
    N1 -1.234567890123457e+29
    N1 -1.234567890123457e+29
    N1 1.234567890123457e+29
    N1 1.234567890123457e+29
    N2 1.000000000000000000000000000000000E+1024
    N2 2357.847135225902780434423249596789
    N2 9.999999999999999999999999999996197E+1023
    N2 1024
    N2 0.1000000000000000000000000000000000
    N2 1.00000000000000000E+512
    N2 -1
    N3A 1.701411834604692317316873037158841E+38
    N3B 1.701411834604692317316873037158841E+38
    N3A 88.02969193111305429598847942518842
    N3B 88.02969193111305429598847942518842
    N3A 1.701411834604692317316873037158807E+38
    N3B 1.701411834604692317316873037158807E+38
    N3A 38.23080944932561179214483963001061
    N3B 38.23080944932561179214483963001061
    N3A 0.09999999999999999999999999999999995
    N3B 0.09999999999999999999999999999999995
    N3A 13043817825332782212.34957180625251
    N3B 13043817825332782212.34957180625251
    N3A -1
    N3B -1
  """,
  'expected_stderr':
  """
  """,
  'substitutions':[ ('[ \t]+',' ') ]
}
]
}
