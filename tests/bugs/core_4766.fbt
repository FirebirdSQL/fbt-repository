{
'id': 'bugs.core_4766',
'qmid': None,
'tracker_id': 'CORE-4766',
'title': 'AV when trying to manage users list using EXECUTE STATEMENT on behalf of non-sysdba user which has RDB$ADMIN role',
'description': 
 """
    05.01.2020. Refactored in order to make its code more flexible because 3.0 and 4.0 have significant differences in stdout/stderr.
    Common SQL code was stored in fbt-repo\files\core_4766.sql with embedding variable names there from here:
        %(current_auth_plugin)s, %(dsn)s et al.

    Content of this file is stored in variable 'sql_text' and this variable is changed using common Python rule for substitutions:
        sql_text % dict(globals(), **locals()

    Then we save this variable to temporarily .sql script and run it.
    This action is done for two possible values of auth plugin (see var. current_auth_plugin): Srp and Legacy_UserManager.

    As result, we have to compare only expected* data for different FB major versions.

    ::: NB :::
    Only Legacy_UserManager is checked for FB 4.0. Srp has totally different behaviour, at  least for 4.0.0.1714.
    Sent letter to dimitr and alex, 05.01.2020 22:00.

    Crash is reproduced on WI-T3.0.0.31374 Firebird 3.0 Beta 1 (build 24-nov-2014).

    Checked on:
        4.0.0.1743 SS: 1.452s.
        4.0.0.1740 SC: 1.870s.
        4.0.0.1714 CS: 10.240s.
        3.0.6.33236 SS: 1.220s.
        3.0.5.33221 SC: 5.416s.
        3.0.5.33084 CS: 2.891s.

 """,
'min_versions': '3.0',
'versions': [
{
 'firebird_version': '3.0',
 'platform': 'All',
 'test_type': 'Python',
 'test_script':
  """
import os
import sys
import subprocess
from fdb import services

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

#--------------------------------------------
def cleanup( f_names_list ):
    global os
    for i in range(len( f_names_list )):
       if os.path.isfile( f_names_list[i]):
            os.remove( f_names_list[i] )
#--------------------------------------------

fb_home = services.connect(host='localhost', user= user_name, password= user_password).get_home_directory()
this_db = db_conn.database_name
db_conn.close()

f_sql=open(os.path.join(context['files_location'],'core_4766.sql'),'r')
sql_text = f_sql.read()
f_sql.close()

for current_auth_plugin in ('Srp', 'Legacy_UserManager'):
    f_sql_chk = open( os.path.join(context['temp_directory'],'tmp_core_4766.' + current_auth_plugin[:3] + '.sql'), 'w', buffering = 0)
    f_sql_chk.write( sql_text % dict(globals(), **locals()) )
    f_sql_chk.close()

    f_sql_log = open( '.'.join( (os.path.splitext( f_sql_chk.name )[0], 'log') ), 'w', buffering = 0)
    subprocess.call( [ fb_home + 'isql', '-q', '-i', f_sql_chk.name ], stdout = f_sql_log, stderr = subprocess.STDOUT)
    f_sql_log.close()

    with open( f_sql_log.name,'r') as f:
        for line in f:
            if line.strip():
                print( current_auth_plugin[:3] + ': ' + line )

    cleanup( (f_sql_log.name, f_sql_chk.name) )

  """,
 'expected_stdout': 
  """
    Srp: BOSS_SEC_NAME                   TMP_4766_BOSS
    Srp: BOSS_SEC_PLUGIN                 Srp
    Srp: BOSS_SEC_IS_ADMIN               <true>
    Srp: Statement failed, SQLSTATE = 28000
    Srp: add record error
    Srp: -no permission for INSERT access to TABLE PLG$SRP_VIEW

    Srp: MNGR_SEC_NAME                   <null>
    Srp: MNGR_SEC_PLUGIN                 <null>
    Srp: MNGR_SEC_IS_ADMIN               <null>
    Srp: Statement failed, SQLSTATE = 28000
    Srp: delete record error
    Srp: -no permission for DELETE access to TABLE PLG$SRP_VIEW


    Leg: BOSS_SEC_NAME                   TMP_4766_BOSS
    Leg: BOSS_SEC_PLUGIN                 Legacy_UserManager
    Leg: BOSS_SEC_IS_ADMIN               <true>
    Leg: Statement failed, SQLSTATE = 28000
    Leg: add record error
    Leg: -no permission for INSERT access to TABLE PLG$VIEW_USERS

    Leg: MNGR_SEC_NAME                   <null>
    Leg: MNGR_SEC_PLUGIN                 <null>
    Leg: MNGR_SEC_IS_ADMIN               <null>

    Leg: Statement failed, SQLSTATE = 28000
    Leg: find/delete record error
    Leg: -no permission for DELETE access to TABLE PLG$VIEW_USERS

  """,
 'expected_stderr': 
  """
  """,
 'substitutions':[
    ('TCPv.*', 'TCP'),
    ('.*After line \d+.*', ''),
    ('find/delete', 'delete'),
    ('TABLE PLG\$.*', 'TABLE PLG')
  ]
},
{
 'firebird_version': '4.0',
 'platform': 'All',
 'test_type': 'Python',
 'test_script':
  """
import os
import sys
import subprocess
from fdb import services

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

#--------------------------------------------
def cleanup( f_names_list ):
    global os
    for i in range(len( f_names_list )):
       if os.path.isfile( f_names_list[i]):
            os.remove( f_names_list[i] )
#--------------------------------------------

fb_home = services.connect(host='localhost', user= user_name, password= user_password).get_home_directory()
this_db = db_conn.database_name
db_conn.close()

f_sql=open(os.path.join(context['files_location'],'core_4766.sql'),'r')
sql_text = f_sql.read()
f_sql.close()

# ::: NB :::
# Only Legacy_UserManager is checked for FB 4.0. Srp has totally different behaviour, at  least for 4.0.0.1714.
# Sent letter to dimitr and alex, 05.01.2020 22:00.

for current_auth_plugin in ('Legacy_UserManager',):
    f_sql_chk = open( os.path.join(context['temp_directory'],'tmp_core_4766.' + current_auth_plugin[:3] + '.sql'), 'w', buffering = 0)
    f_sql_chk.write( sql_text % dict(globals(), **locals()) )
    f_sql_chk.close()

    f_sql_log = open( '.'.join( (os.path.splitext( f_sql_chk.name )[0], 'log') ), 'w', buffering = 0)
    subprocess.call( [ fb_home + 'isql', '-q', '-i', f_sql_chk.name ], stdout = f_sql_log, stderr = subprocess.STDOUT)
    f_sql_log.close()

    with open( f_sql_log.name,'r') as f:
        for line in f:
            if line.strip():
                print( current_auth_plugin[:3] + ': ' + line )

    cleanup( (f_sql_log.name, f_sql_chk.name) )

'''
 'substitutions':[
    ('TCPv.*', 'TCP'),
    ('.*After line \d+.*', ''),
    ('find/delete', 'delete'),
    ('TABLE PLG\$.*', 'TABLE PLG')
  ]
'''

  """,
 'expected_stdout': 
  """
    Leg: BOSS_SEC_NAME                   TMP_4766_BOSS
    Leg: BOSS_SEC_PLUGIN                 Legacy_UserManager
    Leg: BOSS_SEC_IS_ADMIN               <true>

    Leg: Statement failed, SQLSTATE = 28000
    Leg: add record error
    Leg: -no permission for INSERT access to TABLE PLG$VIEW_USERS
    Leg: -Effective user is TMP_4766_BOSS

    Leg: MNGR_SEC_NAME                   <null>
    Leg: MNGR_SEC_PLUGIN                 <null>
    Leg: MNGR_SEC_IS_ADMIN               <null>

    Leg: Statement failed, SQLSTATE = 28000
    Leg: find/delete record error
    Leg: -no permission for DELETE access to TABLE PLG$VIEW_USERS
    Leg: -Effective user is TMP_4766_BOSS
  """,
 'expected_stderr': 
  """
  """,
 'substitutions':[
    ('TCPv.*', 'TCP'),
    ('.*After line \d+.*', ''),
    ('find/delete', 'delete'),
    ('TABLE PLG\$.*', 'TABLE PLG')
  ]

}
]
}
