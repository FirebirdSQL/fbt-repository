{
'id': 'bugs.core_5704',
'qmid': None,
'tracker_id': 'CORE-5704',
'title': 'Avoid UPDATE of RDB$DATABASE by ALTER DATABASE statement when possible',
'description': 
 """
    Instead of doing 'nbackup -L' plus fill database with lot of new data and then 'nbackup -N' with waiting for 
    delta will be integrated into main file, we can get the same result by invoking 'alter database add difference file'
    statement in the 1st attachment in RC NO_REC_VERS and WITHOUT COMMITTING it, and then attempt to establish new connect 
    using ES/EDS. Second attachment should be made without any problem, despite that transaction in 1st connect not yet
    committed or rolled back.

    Confirmed lock of rdb$database record (which leads to inability to establish new connect) on WI-V3.0.3.32837.
    Works fine on (SS, CS):
        3.0.3.32876: OK, 5.266s.
        4.0.0.852: OK, 5.594s.
 """,
'min_versions': '3.0.3',
'versions': [
{
 'firebird_version': '3.0',
 'platform': 'All',
 'init_script':
  """
  """,
 'test_type': 'Python',
 'test_script': 
  """
import os
import subprocess
from subprocess import Popen
import time
from fdb import services

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

db_conn.close()
fb_home = services.connect(host='localhost', user= user_name, password= user_password).get_home_directory()

usr=user_name
pwd=user_password
new_diff_file=os.path.join(context['temp_directory'],'tmp_new_diff_5704.tmp')
new_main_file=os.path.join(context['temp_directory'],'tmp_new_main_5704.tmp')

eds_query='''
    set count on;
    set list on;
    set autoddl off;

    set term ^;
    create or alter procedure sp_connect returns(check_eds_result int) as
       declare usr varchar(31);
       declare pwd varchar(31);
       declare v_sttm varchar(255) = 'select 1 from rdb$database';
    begin
       usr ='%(usr)s';
       pwd = '%(pwd)s';
       execute statement v_sttm
       on external 'localhost:' || rdb$get_context('SYSTEM','DB_NAME')
       as user usr password pwd
       into check_eds_result;
       suspend;
    end
    ^
    set term ^;

    commit;
    set transaction read committed no record_version lock timeout 1;

    --set echo on;

    alter database add difference file '%(new_diff_file)s';
    select * from sp_connect;
    --select * from rdb$files;
    rollback;
    select * from rdb$files;
    rollback;

    set transaction read committed no record_version lock timeout 1;

    alter database add file '%(new_main_file)s';
    select * from sp_connect;
    --select * from rdb$files;
    rollback;
    select * from rdb$files;
'''

f_eds_to_local_host_sql = open( os.path.join(context['temp_directory'],'tmp_local_host_5704.sql'), 'w')
f_eds_to_local_host_sql.write( eds_query % locals() )
f_eds_to_local_host_sql.close()

f_eds_to_local_host_log = open( os.path.join(context['temp_directory'],'tmp_local_host_5704.log'), 'w')
f_eds_to_local_host_err = open( os.path.join(context['temp_directory'],'tmp_local_host_5704.err'), 'w')

# WARNING: we launch ISQL here in async mode in order to have ability to kill its process if it will hang!
############################################
p_isql_to_local_host=subprocess.Popen( [fb_home+"isql", dsn, "-i", f_eds_to_local_host_sql.name ],
                 stdout = f_eds_to_local_host_log,
                 stderr = f_eds_to_local_host_err
               )

time.sleep(3)

p_isql_to_local_host.terminate()
f_eds_to_local_host_log.close()
f_eds_to_local_host_err.close()

db_file="$(DATABASE_LOCATION)bugs.core_5704.fdb"

# Make DB shutdown and bring online because some internal server process still can be active!
# If we skip this step than runtime error related to dropping test DB can occur!
#########################################

f_db_reset_log=open( os.path.join(context['temp_directory'],'tmp_reset_5704.log'), 'w')
f_db_reset_err=open( os.path.join(context['temp_directory'],'tmp_reset_5704.err'), 'w')

f_db_reset_log.write('Point before DB shutdown.'+os.linesep)
f_db_reset_log.seek(0,2)
subprocess.call( ["fbsvcmgr", "localhost:service_mgr",
                  "action_properties", "prp_shutdown_mode", "prp_sm_full", "prp_shutdown_db", "0",
                  "dbname", db_file,
                 ],
                 stdout = f_db_reset_log,
                 stderr = f_db_reset_err
               )
f_db_reset_log.write(os.linesep+'Point after DB shutdown.'+os.linesep)

subprocess.call( ["fbsvcmgr", "localhost:service_mgr",
                  "action_properties", "prp_db_online",
                  "dbname", db_file,
                 ],
                 stdout = f_db_reset_log,
                 stderr = f_db_reset_err
               )

f_db_reset_log.write(os.linesep+'Point after DB online.'+os.linesep)
f_db_reset_log.close()
f_db_reset_err.close()


with open( f_eds_to_local_host_log.name,'r') as f:
  for line in f:
      if line.split():
        print('STDOUT in ISQL: ', ' '.join(line.split()) )
f.close()

with open( f_eds_to_local_host_err.name,'r') as f:
  for line in f:
      if line.split():
        print('UNEXPECTED STDERR in '+f_eds_to_local_host_err.name+': '+line)
f.close()

with open( f_db_reset_log.name,'r') as f:
  for line in f:
      if line.split():
        print('STDOUT in DB reset: ', ' '.join(line.split()) )
f.close()

with open( f_db_reset_err.name,'r') as f:
  for line in f:
      if line.split():
        print('UNEXPECTED STDERR in '+f_db_reset_log.name+': '+line)
f.close()

###############################
# Cleanup.
time.sleep(1)

f_list=( 
     f_eds_to_local_host_sql 
    ,f_eds_to_local_host_log 
    ,f_eds_to_local_host_err 
    ,f_db_reset_log 
    ,f_db_reset_err 
)

for i in range(len(f_list)):
    if os.path.isfile(f_list[i].name):
        os.remove(f_list[i].name)

  """,
 'expected_stdout':
  """
    STDOUT in ISQL:  CHECK_EDS_RESULT 1
    STDOUT in ISQL:  Records affected: 1
    STDOUT in ISQL:  Records affected: 0
    STDOUT in ISQL:  CHECK_EDS_RESULT 1
    STDOUT in ISQL:  Records affected: 1
    STDOUT in ISQL:  Records affected: 0
    STDOUT in DB reset:  Point before DB shutdown.
    STDOUT in DB reset:  Point after DB shutdown.
    STDOUT in DB reset:  Point after DB online.
  """,
 'expected_stderr':
  """
  """
}
]
}
