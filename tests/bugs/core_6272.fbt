{
'id': 'bugs.core_6272',
'qmid': None,
'tracker_id': 'CORE-6272',
'title': "Failed attach to database not traced",
'description': 
 """
    NB: connect to services must be done using LOCAL protocol rather than remote.
    Otherwise trace log will have only records about connect/disconnect to security.db.
    NO messages about failed search of non-existing database will appear.
    This is known bug, see Alex's issue in the tracker, 07-apr-2020 10:39.

    Checked on 4.0.0.1865 SS/CS.
 """,
'min_versions': '4.0.0',
'versions': [
{
 'firebird_version': '4.0',
 'platform': 'All',
 'test_type': 'Python',
 'init_script':
  """
  """,
 'test_script':
  """
import os
import subprocess
import time
import re
from fdb import services
from subprocess import Popen

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

#--------------------------------------------

def cleanup( f_names_list ):
    global os
    for i in range(len( f_names_list )):
       if os.path.isfile( f_names_list[i]):
            os.remove( f_names_list[i] )

#--------------------------------------------

# Obtain engine version:
engine = str(db_conn.engine_version) # convert to text because 'float' object has no attribute 'startswith'
db_conn.close()

# NB, 06.12.2016: as of  fdb 1.6.1 one need to EXPLICITLY specify user+password pair when doing connect 
# via to FB services API by services.connect() - see FB tracker, PYFB-69
# ("Can not connect to FB services if set ISC_USER & ISC_PASSWORD by os.environ[ ... ]")

fb_home = services.connect(host='localhost', user= user_name, password= user_password).get_home_directory()
# fb_home = services.connect(host='localhost').get_home_directory()

#--------------------------------------------------

txt = '''
    database
    {
        enabled = true
        log_connections = true
        log_errors = true
        log_initfini = false
    }
'''

f_trc_cfg=open( os.path.join(context['temp_directory'],'tmp_trace_6272.cfg'), 'w', buffering = 0)
f_trc_cfg.write(txt)
f_trc_cfg.close()

# ##############################################################
# S T A R T   T R A C E   i n   S E P A R A T E    P R O C E S S
# ##############################################################

f_trc_log=open( os.path.join(context['temp_directory'],'tmp_trace_6272.log'), "w", buffering = 0)
f_trc_err=open( os.path.join(context['temp_directory'],'tmp_trace_6272.err'), "w", buffering = 0)

# ::: NB ::: DO NOT USE 'localhost:service_mgr' here! Use only local protocol:
p_trace = Popen( [ fb_home+'fbsvcmgr', 'service_mgr', 'action_trace_start' , 'trc_cfg', f_trc_cfg.name],stdout=f_trc_log,stderr=f_trc_err)
 

time.sleep(1)

# ####################################################
# G E T  A C T I V E   T R A C E   S E S S I O N   I D
# ####################################################
# Save active trace session info into file for further parsing it and obtain session_id back (for stop):

f_trc_lst = open( os.path.join(context['temp_directory'],'tmp_trace_6272.lst'), 'w', buffering = 0)
subprocess.call([fb_home+'fbsvcmgr', 'localhost:service_mgr', 'action_trace_list'], stdout=f_trc_lst)
f_trc_lst.close()

# !!! DO NOT REMOVE THIS LINE !!!
time.sleep(1)

trcssn=0
with open( f_trc_lst.name,'r') as f:
    for line in f:
        i=1
        if 'Session ID' in line:
            for word in line.split():
                if i==3:
                    trcssn=word
                i=i+1
            break
f.close()
# Result: `trcssn` is ID of active trace session. Now we have to terminate it:

#------------------------------------------------

try:
    con = fdb.connect(dsn = 'localhost:non_such_alias')
except Exception,e:
    # print('Error:', e)
    pass

#------------------------------------------------

# Let trace log to be entirely written on disk:
time.sleep(1)

# ####################################################
# S E N D   R E Q U E S T    T R A C E   T O   S T O P
# ####################################################
if trcssn>0:
    fn_nul = open(os.devnull, 'w')
    subprocess.call([fb_home+'fbsvcmgr', 'localhost:service_mgr', 'action_trace_stop','trc_id', trcssn], stdout=fn_nul)
    fn_nul.close()
    # DO NOT REMOVE THIS LINE:
    time.sleep(1)

p_trace.terminate()
f_trc_log.close()
f_trc_err.close()

allowed_patterns = [ 
    re.compile(' FAILED ATTACH_DATABASE', re.IGNORECASE)
   ,re.compile(' ERROR AT JProvider::attachDatabase', re.IGNORECASE)
   ,re.compile('335544344 : I/O error', re.IGNORECASE)
   ,re.compile('335544734 : Error while trying to open', re.IGNORECASE)
]

with open(f_trc_log.name, 'r') as f:
    for line in f:
        #print(line)
        for p in allowed_patterns:
            if p.search(line):
                print(line)

time.sleep(1)
cleanup( [ i.name for i in ( f_trc_log, f_trc_err, f_trc_cfg, f_trc_lst ) ]  )

  """,
 'expected_stdout': 
  """
    FAILED ATTACH_DATABASE
    ERROR AT JProvider::attachDatabase
    335544344 : I/O error during "CreateFile (open)" operation for file "non_such_alias"
    335544734 : Error while trying to open file
    FAILED ATTACH_DATABASE
    ERROR AT JProvider::attachDatabase
    FAILED ATTACH_DATABASE
    ERROR AT JProvider::attachDatabase
    335544344 : I/O error during "CreateFile (open)" operation for file "non_such_alias"
    335544734 : Error while trying to open file
  """,
 'expected_stderr': 
  """
  """,
  'substitutions':[
       ('^((?!(ATTACH_DATABASE|ERROR AT|335544344|335544734)).)*$','')
      ,('[ \t]+',' ')
      ,('.* FAILED ATTACH_DATABASE', 'FAILED ATTACH_DATABASE')
      ,('.* ERROR AT JProvider::attachDatabase', 'ERROR AT JProvider::attachDatabase')
  ]
}
]
}
