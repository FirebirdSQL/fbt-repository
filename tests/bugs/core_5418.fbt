{
'id': 'bugs.core_5418',
'qmid': None,
'tracker_id': 'CORE-5418',
'title': 'Inconsistent output when retrieving the server log via Services API',
'description':
 """
   Test gets FB home directory and copies firebird.log to *.tmp.
   Then it makes firebird.log empty and retrieves it via services API. Output should be empty.
   Finally, it opens firebird.log and adds to it several empty newlines. 
   Repeat retrieveing content - it also should not contain any characters except newline.
   Checked on 2.5.7.27030, 4.0.0.465
 """,
'min_versions': '2.5.7',
'versions': [
{
 'firebird_version': '2.5',
 'platform': 'All',
 'test_type': 'Python',
 'init_script':
  """
  """,
 'test_script':
  """
import os
from fdb import services
import subprocess
import time
import shutil
import difflib
import re

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

#---------------------------------------------

def flush_and_close(file_handle):
    # https://docs.python.org/2/library/os.html#os.fsync
    # If you're starting with a Python file object f, 
    # first do f.flush(), and 
    # then do os.fsync(f.fileno()), to ensure that all internal buffers associated with f are written to disk.
    global os
    
    file_handle.flush()
    if file_handle.mode not in ('r', 'rb'):
        # otherwise: "OSError: [Errno 9] Bad file descriptor"!
        os.fsync(file_handle.fileno())
    file_handle.close()

#--------------------------------------------

def cleanup( f_names_list ):
    global os
    for i in range(len( f_names_list )):
       if os.path.isfile( f_names_list[i]):
            os.remove( f_names_list[i] )
            if os.path.isfile( f_names_list[i]):
                print('ERROR: can not remove file ' + f_names_list[i])

#--------------------------------------------


# Get engine version and FB binaries folder:
############################################
engine = str(db_conn.engine_version) # convert to text because 'float' object has no attribute 'startswith'

# NB, 06.12.2016: as of  fdb 1.6.1 one need to EXPLICITLY specify user+password pair when doing connect 
# via to FB services API by services.connect() - see FB tracker, PYFB-69
# ("Can not connect to FB services if set ISC_USER & ISC_PASSWORD by os.environ[ ... ]")

fb_home = services.connect(host='localhost', user= user_name, password= user_password).get_home_directory()
fb_bins = fb_home
if engine.startswith('2.5'):
  fb_bins = fb_home + 'bin'+os.sep
  get_firebird_log_key='action_get_ib_log'
else:
  get_firebird_log_key='action_get_fb_log'

db_conn.close()
fb_log=fb_home+'firebird.log'
fb_bak=fb_home+'firebird.tmp'
shutil.copy2( fb_log, fb_bak )
open(fb_log, 'w').close()

f_init_log = open( os.path.join(context['temp_directory'],'tmp_5418_old.log'), 'w')
subprocess.call( [ fb_bins + "fbsvcmgr","localhost:service_mgr",  get_firebird_log_key ], stdout = f_init_log, stderr = subprocess.STDOUT)
flush_and_close( f_init_log )

f=open(fb_log, 'w')
for i in range(0,10):
  f.write(os.linesep)
flush_and_close( f )

f_curr_log = open( os.path.join(context['temp_directory'],'tmp_5418_new.log'), 'w')
subprocess.call( [ fb_bins + "fbsvcmgr","localhost:service_mgr",  get_firebird_log_key ], stdout = f_curr_log, stderr = subprocess.STDOUT )
flush_and_close( f_curr_log )

shutil.copy2( fb_bak, fb_log )
os.remove( fb_bak )

f_init_log=open(f_init_log.name, 'r')
f_curr_log=open(f_curr_log.name, 'r')
difftext = ''.join(difflib.unified_diff(
    f_init_log.readlines(), 
    f_curr_log.readlines()
  ))
f_init_log.close()
f_curr_log.close()

f_diff_txt=open( os.path.join(context['temp_directory'],'tmp_5418_diff.txt'), 'w')
f_diff_txt.write(difftext)
flush_and_close( f_diff_txt )

p = re.compile('\+\s?\S+')
with open( f_diff_txt.name,'r') as f:
    for line in f:
        if line.startswith('+') and line.strip() != '+++' and p.search(line):
            print( 'UNEXPECTED content in firebird.log: %(line)s' % locals() )

###############################
# Cleanup.
time.sleep(1)
cleanup( [x.name for x in (f_init_log,f_curr_log,f_diff_txt) ] )

  """,
 'expected_stdout': 
  """
  """,
 'expected_stderr': 
  """
  """
}
]
}
