{
'id': 'bugs.core_5269',
'qmid': None,
'tracker_id': 'CORE-5269',
'title': "FBTRACEMGR should understand 'role <name>' command switch (needed to explicitly connect with role with 'TRACE_ANY_ATTACHMENT' privilege)",
'description':
 """
   We create two users and one of them is granted with role that allows him to watch other users activity.
   Than we start FBSVCMGR utility with specifying this user and his ROLE so that he can start wathing.
   After this we make trivial query to database from another user.
   Finally, we check trace log that was recived by watching user: this log must contain phrases about
   preprating, starting and executing statements.

   Checked on 4.0.0.321 - works fine.
 """,
'min_versions': '4.0',
'versions': [
{
 'firebird_version': '4.0',
 'platform': 'All',
 'init_script':
  """
  """,
 'test_type': 'Python',
 'test_script': 
  """
import os
import sys
import subprocess
import time

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

db_conn.close()

# Result: file tmp_core_5269.fdb is extracted into context['temp_directory']
db_file="$(DATABASE_LOCATION)bugs.core_5269.fdb"

sql_ddl='''\
     set wng off;
     set bail on;
     set list on;

     create or alter user TMP$C5269_1 password '123' revoke admin role;
     create or alter user TMP$C5269_2 password '456' revoke admin role;
     revoke all on all from TMP$C5269_1;
     revoke all on all from TMP$C5269_2;
     commit;

     -- Trace other users' attachments
     create role role_for_trace_any_attachment
         set system privileges to TRACE_ANY_ATTACHMENT;
     commit;

     grant role_for_trace_any_attachment to user TMP$C5269_2;
     commit; 

     set list on;
     select p.rdb$user as role_grantee, p.rdb$grantor as role_grantor, r.rdb$role_name as role_name, r.rdb$owner_name as role_owner
     from rdb$user_privileges p
     join rdb$roles r on p.rdb$relation_name = r.rdb$role_name
     where p.rdb$user = upper('TMP$C5269_2');
'''
runProgram('isql',[dsn],sql_ddl)

att1 = kdb.connect(dsn=dsn,user='TMP$C5269_1',password='123')
cur1 = att1.cursor()

txt30 = '''# Trace config, format for 3.0. Generated auto, do not edit!
database=#%[\\\\\\\\/]bugs.core_5269.fdb
{
  enabled = true
  log_statement_prepare = true
  log_statement_start = true
  log_statement_finish = true
  time_threshold = 0
  max_sql_length = 5000
}
'''

f_trccfg=open( os.path.join(context['temp_directory'],'tmp_trace_5269.cfg'), 'w')
f_trccfg.write(txt30)
f_trccfg.close()


# Now we run TRACE in child process (asynchronous)
##################

f_trclog=open( os.path.join(context['temp_directory'],'tmp_trace_5269.log'), 'w')
f_trcerr=open( os.path.join(context['temp_directory'],'tmp_trace_5269.err'), 'w')
#'''
p_trace=subprocess.Popen( ["fbsvcmgr","localhost:service_mgr",
                           "user", "TMP$C5269_2",
                           "password", "456",
                           "role", "role_for_trace_any_attachment",
                           "action_trace_start", "trc_cfg", f_trccfg.name
                          ],
                          stdout=f_trclog, stderr=f_trcerr
                        )
# Wait! Trace session is initialized not instantly!
time.sleep(2)

cur1.execute("select current_user from rdb$database")

att1.close()

# Wait! Trace log will be filled not instantly!
time.sleep(2)

p_trace.terminate()
f_trclog.close()
f_trcerr.close()

#####################################################################
# Cleanup.

# Wait! Otherwise get WindowsError 32 on attempt to remove trace log and err files:
time.sleep(1)

with open( f_trclog.name,'r') as f:
    for line in f:
        print('TRACE LOG: '+line)

with open( f_trcerr.name,'r') as f:
    for line in f:
        print('UNEXPECTED TRACE ERR: '+line)

f_list=[f_trclog, f_trcerr, f_trccfg]
for i in range(len(f_list)):
    if os.path.isfile(f_list[i].name):
        os.remove(f_list[i].name)

runProgram('isql',[dsn],'drop user TMP$C5269_1; drop user TMP$C5269_2; commit;')
 
  """,
 'expected_stdout': 
  """
    ROLE_GRANTEE                    TMP$C5269_2
    ROLE_GRANTOR                    SYSDBA
    ROLE_NAME                       ROLE_FOR_TRACE_ANY_ATTACHMENT
    ROLE_OWNER                      SYSDBA
    TRACE LOG: 2016-08-06T11:51:38.9360 (2536:01FD0CC8) PREPARE_STATEMENT
    TRACE LOG: 2016-08-06T11:51:38.9360 (2536:01FD0CC8) EXECUTE_STATEMENT_START
    TRACE LOG: 2016-08-06T11:51:38.9360 (2536:01FD0CC8) EXECUTE_STATEMENT_FINISH
  """,
 'expected_stderr': 
  """
  """,
  'substitutions':[ 
     ('\t+', ' '), 
     ('^((?!ROLE_|PREPARE_STATEMENT|EXECUTE_STATEMENT_START|EXECUTE_STATEMENT_FINISH).)*$',''),
     ('.*PREPARE_STATEMENT', 'TRACE_LOG: PREPARE_STATEMENT'),
     ('.*EXECUTE_STATEMENT_START', 'TRACE_LOG: EXECUTE_STATEMENT_START'),
     ('.*EXECUTE_STATEMENT_FINISH', 'TRACE_LOG: EXECUTE_STATEMENT_FINISH')
   ]
}
]
}
