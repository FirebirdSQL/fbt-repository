{
'id': 'bugs.core_5364',
'qmid': None,
'tracker_id': 'CORE-5364',
'title': 'gfix -online normal <db> (being issued in window #1) does not produce error when there is sysdba attachment in window #2',
'description': 
 """
    We create new DB and immediately change its state to single-user maintanance.
    Then we attach to this DB ans run (in separate process) 'gfix -online normal <localhost:this_db>'.
    This command must produce in its STDERR error: "database ... shutdown" - and we check that this actually occurs.
    Also, we check that after reconnect to this DB value of mon$database.mon$shutdown_mode remains the same: 2.

    Confirmed bug on: 4.0.0.1850 SS, 3.0.6.33276 SS - no error when doing 'gfix -online normal'.
    Checked on 4.0.0.1881 SS, 3.0.6.33283 SS -- all fine, DB state is not changed to normal.
 """,
'min_versions': '3.0.6',
'versions': [
{
 'firebird_version': '3.0',
 'platform': 'All',
 'init_script': 
  """
  """,
 'test_type': 'Python',
 'test_script':
  """
import os
import time
import subprocess
from subprocess import Popen
from fdb import services

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password
DB_PATH = os.sep.join( db_conn.database_name.split(os.sep)[:-1] )

#--------------------------------------------

def cleanup( f_names_list ):
    global os
    for i in range(len( f_names_list )):
       if os.path.isfile( f_names_list[i]):
            os.remove( f_names_list[i] )
            if os.path.isfile( f_names_list[i]):
                print('ERROR: can not remove file ' + f_names_list[i])

#-------------------------------------------

dbx = os.path.join( DB_PATH, 'tmp_5364.fdb')
if os.path.isfile(dbx):
    os.remove(dbx)

con1=fdb.create_database(dsn = 'localhost:' + dbx)
con1.close()
subprocess.call( ['gfix', 'localhost:' + dbx, '-shut', 'single', '-force', '0'] )

con1=fdb.connect(dsn = 'localhost:' + dbx)

f_gfix_online_log=open( os.path.join(context['temp_directory'],'tmp_5364_online.log'), 'w', buffering = 0)
f_gfix_online_err=open( os.path.join(context['temp_directory'],'tmp_5364_online.err'), 'w', buffering = 0)

subprocess.call( ['gfix', 'localhost:' + dbx, '-online', 'normal'], stdout=f_gfix_online_log, stderr=f_gfix_online_err )

f_gfix_online_log.close()
f_gfix_online_err.close()

con1.close()

con1=fdb.connect(dsn = 'localhost:' + dbx)
cur1=con1.cursor()
cur1.execute('select d.mon$shutdown_mode from mon$database d')
for r in cur1:
    print( 'DB shutdown mode:', r[0] )
cur1.close()
con1.close()

with open(f_gfix_online_err.name, 'r') as f:
    for line in f:
        if line.split():
            print(line)

# cleanup
##########

f_list = [ i.name for i in ( f_gfix_online_log, f_gfix_online_err ) ] + [ dbx, ]
cleanup( f_list )

  """,
 'expected_stdout':
  """
    DB shutdown mode: 2
    database C:\FBTESTING\QA\FBT-REPO\TMP\TMP_5364.FDB shutdown
  """,
 'expected_stderr':
  """
  """,
  'substitutions': [ ('database .*TMP_5364.FDB shutdown', 'database shutdown') ]
}
]
}
