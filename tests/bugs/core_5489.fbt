{
'id': 'bugs.core_5489',
'qmid': None,
'tracker_id': 'CORE-5489',
'title': "Bad performance for NULLs filtering inside a navigational index scan",
'description': 
 """
   See prototype and explanations for this test in CORE_5435.fbt
   Confirmed improvement:

   3.0.2.32643, 4.0.0.563:
   **********
       PLAN (TEST ORDER TEST_F01_ID)
       1 records fetched
          1143 ms, 2375 read(s), 602376 fetch(es) ---------------- poor :(
       Table                              Natural     Index
       ****************************************************
       TEST                                          300000                                                            
   **********

  
   3.0.2.32708, 4.0.0.572:
   **********
        PLAN (TEST ORDER TEST_F01_ID)
        0 ms, 22 read(s), 63 fetch(es) --------------------------- cool :)
       Table                              Natural     Index
       ****************************************************
       TEST                                              20                                                            
   **********

 """,
'min_versions': '3.0.2',
'versions': [
{
 'firebird_version': '3.0',
 'platform': 'All',
 'page_size': '8192',
 'test_type': 'Python',
 'init_script':
  """
  """,
 'test_script':
  """
import os
import subprocess
import time
from fdb import services
from subprocess import Popen

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

FETCHES_THRESHOLD = 80

# Obtain engine version:
engine = str(db_conn.engine_version) # convert to text because 'float' object has no attribute 'startswith'
db_conn.close()

# NB, 06.12.2016: as of  fdb 1.6.1 one need to EXPLICITLY specify user+password pair when doing connect 
# via to FB services API by services.connect() - see FB tracker, PYFB-69
# ("Can not connect to FB services if set ISC_USER & ISC_PASSWORD by os.environ[ ... ]")

fb_home = services.connect(host='localhost', user= user_name, password= user_password).get_home_directory()
# fb_home = services.connect(host='localhost').get_home_directory()

if engine.startswith('2.5'):
  fb_home += 'bin'+os.sep


# Change FW to OFF in order to speed up initial data filling:
##################
db_file="$(DATABASE_LOCATION)bugs.core_5489.fdb"

fn_nul = open(os.devnull, 'w')

subprocess.call([ fb_home+"fbsvcmgr", "localhost:service_mgr",
                  "action_properties", "prp_write_mode", "prp_wm_async",
                  "dbname", db_file ],
                  stdout = fn_nul,
                  stderr = subprocess.STDOUT
               )

fn_nul.close()


#####################
# Prepare table: add data.

sql_init=\
'''
  recreate table test
  (
      id int not null,
      f01 int,
      f02 int
  );

  set term ^;
  create or alter procedure sp_add_init_data(a_rows_to_add int)
  as
      declare n int;
      declare i int = 0;
  begin
      n = a_rows_to_add;
      while ( i < n ) do
      begin
          insert into test(id, f01, f02) values( :i, nullif(mod(:i, :n/20), 0), iif( mod(:i,3)<2, 0, 1) )
          returning :i+1 into i;
      end
  end
  ^
  set term ^;
  commit;

  execute procedure sp_add_init_data( 300000 );
  commit;

  create index test_f01_id on test(f01, id);
  create index test_f02_only on test(f02); 
  commit;
'''

sql_cmd=open(os.path.join(context['temp_directory'],'tmp_core_5489.sql'), 'w')

sql_cmd.write(sql_init)
sql_cmd.close()

sql_log=open(os.path.join(context['temp_directory'],'tmp_core_5489.log'),'w')
sql_err=open(os.path.join(context['temp_directory'],'tmp_core_5489.err'),'w')

subprocess.call([fb_home+"isql", dsn, "-i", sql_cmd.name],stdout=sql_log, stderr=sql_err)

sql_log.close()
sql_err.close()

#########################

# ::: NB ::: Trace config file format in 3.0 differs from 2.5 one:
# 1) header section must be enclosed in "[" and "]",
# 2) parameter-value pairs must be separated with '=' sign:
#    services
#    {
#      parameter =  value
#    }

if engine.startswith('2.5'):
    txt = '''# Generated auto, do not edit!
      <database %[\\\\\\\\/]security?.fdb>
          enabled false
      </database>

      <database %[\\\\\\\\/]bugs.core_5489.fdb>
          enabled true
          time_threshold 0
          log_statement_finish true
          print_plan true
          print_perf true
      </database>
    '''
else:
    txt = '''# Generated auto, do not edit!
      database=%[\\\\\\\\/]security?.fdb
      {
          enabled = false
      }
      database=%[\\\\\\\\/]bugs.core_5489.fdb
      {
          enabled = true
          time_threshold = 0
          log_statement_finish = true
          print_plan = true
          print_perf = true
      }
    '''

f_trc_cfg=open( os.path.join(context['temp_directory'],'tmp_trace_5489.cfg'), 'w')
f_trc_cfg.write(txt)
f_trc_cfg.close()

# ##############################################################
# S T A R T   T R A C E   i n   S E P A R A T E    P R O C E S S
# ##############################################################

f_trc_log=open( os.path.join(context['temp_directory'],'tmp_trace_5489.log'), "w")
f_trc_err=open( os.path.join(context['temp_directory'],'tmp_trace_5489.err'), "w")

p_trace = Popen( [ fb_home+'fbsvcmgr', 'localhost:service_mgr', 'action_trace_start' , 'trc_cfg', f_trc_cfg.name],stdout=f_trc_log,stderr=f_trc_err)

time.sleep(1)


sql_run=\
'''
  set list on;
  --show version;
  select count(*) cnt_check 
  from (
      select *
      from test               
      where f01               -- ###################################################################
            IS NULL           -- <<< ::: NB ::: we check here 'f01 is NULL', exactly as ticket says.
            and f02=0         -- ###################################################################
      order by f01, id
  )
  ;
'''

sql_cmd=open(os.path.join(context['temp_directory'],'tmp_core_5489.sql'), 'w')

sql_cmd.write(sql_run)
sql_cmd.close()

sql_log=open(os.path.join(context['temp_directory'],'tmp_core_5489.log'),'w')
sql_err=open(os.path.join(context['temp_directory'],'tmp_core_5489.err'),'w')

subprocess.call([fb_home+"isql", dsn, "-i", sql_cmd.name],stdout=sql_log, stderr=sql_err)

sql_log.close()
sql_err.close()

# ####################################################
# G E T  A C T I V E   T R A C E   S E S S I O N   I D
# ####################################################
# Save active trace session info into file for further parsing it and obtain session_id back (for stop):

f_trc_lst = open( os.path.join(context['temp_directory'],'tmp_trace_5489.lst'), 'w')
subprocess.call([fb_home+'fbsvcmgr', 'localhost:service_mgr', 'action_trace_list'], stdout=f_trc_lst)
f_trc_lst.close()

# !!! DO NOT REMOVE THIS LINE !!!
time.sleep(1)

trcssn=0
with open( f_trc_lst.name,'r') as f:
    for line in f:
        i=1
        if 'Session ID' in line:
            for word in line.split():
                if i==3:
                    trcssn=word
                i=i+1
            break
f.close()
# Result: `trcssn` is ID of active trace session. Now we have to terminate it:

# ####################################################
# S E N D   R E Q U E S T    T R A C E   T O   S T O P
# ####################################################
if trcssn>0:
    fn_nul = open(os.devnull, 'w')
    subprocess.call([fb_home+'fbsvcmgr', 'localhost:service_mgr', 'action_trace_stop','trc_id', trcssn], stdout=fn_nul)
    fn_nul.close()
    # DO NOT REMOVE THIS LINE:
    time.sleep(2)

p_trace.terminate()
f_trc_log.close()
f_trc_err.close()


run_with_plan=''
num_of_fetches=99999999

with open( f_trc_log.name,'r') as f:
  for line in f:
    if line.lower().startswith('plan ('):
        run_with_plan = line.upper()
    if 'fetch(es)' in line:
       words = line.split()
       for k in range(len(words)):
         if words[k].startswith('fetch'):
           num_of_fetches = int( words[k-1] )

print(run_with_plan)
print(  'Number of fetches: acceptable.' 
        if num_of_fetches < FETCHES_THRESHOLD else 
        'Too much fetches %(num_of_fetches)s -- more than threshold = %(FETCHES_THRESHOLD)s' % locals()
     )

# CLEANUP
#########

f_list=(f_trc_cfg, f_trc_lst, f_trc_log, f_trc_err, sql_log, sql_err, sql_cmd)

for i in range(len(f_list)):
   if os.path.isfile(f_list[i].name):
       os.remove(f_list[i].name)

  """,
 'expected_stdout': 
  """
    PLAN (TEST ORDER TEST_F01_ID)
    Number of fetches: acceptable.
  """,
 'expected_stderr': 
  """
  """
}
]
}
