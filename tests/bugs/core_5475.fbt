{
'id': 'bugs.core_5475',
'qmid': None,
'tracker_id': 'CORE-5475',
'title': "Cache physical numbers of often used data pages to reduce number of fetches of pointer pages",
'description': 
 """
   For FB 2.5 we verify that one may to suppress messages like TRACE_INIT/FINI ("log_initfini false")
   Also, by default no more warnings should appear in the trace.

   For FB 3.0 and above we check that trace log contains only those gdscodes which we expect.
   Also, trace should NOT contain gdscodes which we explicitly prohibit or which we do not expect 
   because not empty list in 'include_gds_codes' parameter.
   Also, we verify that no more TRACE_INIT / TRACE_FINI in trace because log_initfini=false.

   Checked on 2.5.7.27048, 3.0.2.32685, 4.0.0.531 -- all fine.
 """,
'min_versions': '2.5.7',
'versions': [
{
 'firebird_version': '2.5',
 'platform': 'All',
 'sql_dialect': 1,
 'test_type': 'Python',
 'init_script':
  """
    recreate table test(
        id int not null, 
        x smallint, 
        y timestamp
    );
    commit;
    insert into test(id, x, y) values(1,32767, null);
    commit;
  """,
 'test_script':
  """
import os
import subprocess
import time
from fdb import services
from subprocess import Popen

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

# Obtain engine version:
engine = str(db_conn.engine_version) # convert to text because 'float' object has no attribute 'startswith'

db_conn.close()

# NB, 06.12.2016: as of  fdb 1.6.1 one need to EXPLICITLY specify user+password pair when doing connect 
# via to FB services API by services.connect() - see FB tracker, PYFB-69
# ("Can not connect to FB services if set ISC_USER & ISC_PASSWORD by os.environ[ ... ]")

fb_home = services.connect(host='localhost', user= user_name, password= user_password).get_home_directory()
# fb_home = services.connect(host='localhost').get_home_directory()
fb_home = fb_home + 'bin'+os.sep

txt = '''# Generated auto, do not edit!
  <database %[\\\\\\\\/]security?.fdb>
      enabled false
  </database>

  <database %[\\\\\\\\/]bugs.core_5475.fdb>
      enabled        true
      time_threshold 0
      log_initfini   false
      log_errors     true
      # log_warnings   true
  </database>
'''

f_trc_cfg=open( os.path.join(context['temp_directory'],'tmp_trc_5475_25x.cfg'), 'w')
f_trc_cfg.write(txt)
f_trc_cfg.close()

# ##############################################################
# S T A R T   T R A C E   i n   S E P A R A T E    P R O C E S S
# ##############################################################

f_trc_log=open( os.path.join(context['temp_directory'],'tmp_trc_5475_25x.log'), "w")
f_trc_err=open( os.path.join(context['temp_directory'],'tmp_trc_5475_25x.err'), "w")

p_trace = Popen( [ fb_home+'fbsvcmgr', 'localhost:service_mgr', 'action_trace_start' , 'trc_cfg', f_trc_cfg.name],stdout=f_trc_log,stderr=f_trc_err)

time.sleep(1)

# ####################################################
# G E T  A C T I V E   T R A C E   S E S S I O N   I D
# ####################################################
# Save active trace session info into file for further parsing it and obtain session_id back (for stop):

f_trc_lst = open( os.path.join(context['temp_directory'],'tmp_trace_5475_25x.lst'), 'w')
subprocess.call([fb_home+'fbsvcmgr', 'localhost:service_mgr', 'action_trace_list'], stdout=f_trc_lst)
f_trc_lst.close()

# !!! DO NOT REMOVE THIS LINE !!!
time.sleep(1)

trcssn=0
with open( f_trc_lst.name,'r') as f:
    for line in f:
        i=1
        if 'Session ID' in line:
            for word in line.split():
                if i==3:
                    trcssn=word
                i=i+1
            break
f.close()
# Result: `trcssn` is ID of active trace session. Now we have to terminate it:

#############################################
# ::::: NB ::::: !HERE 2.5.7 ONLY IS CHECKED! 
# BRANCH FOR 3.0 SEE BELOW, IN SEPARATE BLOCK
#############################################

con5 = fdb.connect(dsn=dsn, sql_dialect=1)
cur5 = con5.cursor()
try:
    # Leads to WARNING in trace:
    # 335544807 : SQL warning code = 301
    # 335544808 : DATE data type is now called TIMESTAMP
    cur5.execute( "update test set y = cast('now' as date)" ) 
except Exception as e:
    print(e[0])
con5.close()


con6 = fdb.connect(dsn=dsn)
cur6 = con6.cursor()
try:
    # Should raise
    # 335544347 : validation error for column "TTT"."X", value "*** null ***"
    # NB: this gdscode was NOT specified neither in include_gds nor in exclude_gds lists.
    # We do attempt to violate not null and check what does appear in the trace log.
    cur6.execute('insert into test(id) values(null)')
except Exception as e:
    print(e[0])
con6.close()


con7 = fdb.connect(dsn=dsn)
# Should raise:
# (warning) 336068855 : Warning: ALL on ALL is not granted to <...>.
con7.execute_immediate('revoke all on all from tmp$c5475')
con7.close()

# Let trace log to be entirely written on disk:
time.sleep(2)

# ####################################################
# S E N D   R E Q U E S T    T R A C E   T O   S T O P
# ####################################################
if trcssn>0:
    fn_nul = open(os.devnull, 'w')
    subprocess.call([fb_home+'fbsvcmgr', 'localhost:service_mgr', 'action_trace_stop','trc_id', trcssn], stdout=fn_nul)
    fn_nul.close()
    # DO NOT REMOVE THIS LINE:
    time.sleep(2)

p_trace.terminate()
f_trc_log.close()
f_trc_err.close()

# Following file should be EMPTY:
################


f_list=(f_trc_err,)
for i in range(len(f_list)):
   f_name=f_list[i].name
   if os.path.getsize(f_name) > 0:
       with open( f_name,'r') as f:
           for line in f:
               print("Unexpected STDERR, file "+f_name+": "+line)
       f.close()

# 1. We ALLOW to be logged (and EXPECT because of current test scenario):
# error 335544347 : validation error for column "TTT"."X", value "*** null ***" 

# 2. We PROHIBIT logging: 
# 2.1. TRACE INIT / FINI messages
# 2.2. Any warnings:
#      "DATE data type is now called TIMESTAMP" // 335544808 - warning
#      ALL on ALL is not granted to <...>       // 336068855 - warning

# Following gdscodes MUST BE found in the trace log:
expected_set={'335544347' : 'ERROR_NOT_found'}

# Following gdscodes must NOT present on trace log because we explicitly PROHIBIT them:
prohibit_set={'335544808' : 'OK_NOT_FOUND', '336068855' : 'OK_NOT_FOUND', 'TRACE_INIT' : 'OK_NOT_FOUND', 'TRACE_FINI' : 'OK_NOT_FOUND'}

with open( f_trc_log.name,'r') as f:
    for line in f:
       if line.split():
           starting_word=line.split()[0]
           if starting_word in expected_set:
               expected_set[ starting_word ] = 'OK_FOUND'
           elif starting_word in prohibit_set:
               prohibit_set[ starting_word ] = 'ERROR_PROHIBIT'

for k,v in sorted(expected_set.items()):
    print('expected_token:', k, '; message in trace:', v)

for k,v in sorted(prohibit_set.items()):
    print('prohibit_token:', k, '; message in trace:', v)

# CLEANUP
#########
f_list=(f_trc_cfg, f_trc_lst, f_trc_log, f_trc_err)

for i in range(len(f_list)):
   if os.path.isfile(f_list[i].name):
       os.remove(f_list[i].name)

  """,
 'expected_stdout': 
  """
    Error while executing SQL statement:
    - SQLCODE: -625
    - validation error for column "TEST"."ID", value "*** null ***"
    expected_token: 335544347 ; message in trace: OK_FOUND
    prohibit_token: 335544808 ; message in trace: OK_NOT_FOUND
    prohibit_token: 336068855 ; message in trace: OK_NOT_FOUND
    prohibit_token: TRACE_FINI ; message in trace: OK_NOT_FOUND
    prohibit_token: TRACE_INIT ; message in trace: OK_NOT_FOUND
  """,
 'expected_stderr': 
  """
  """
}
,
{
 'firebird_version': '3.0',
 'platform': 'All',
 'sql_dialect': 1,
 'test_type': 'Python',
 'init_script':
  """
    recreate table test(
        id int not null, 
        x smallint, 
        y timestamp,
        constraint test_pk primary key(id) using index test_id
    );
    commit;
    insert into test(id, x, y) values(1,32767, null);
    commit;
  """,
 'test_script':
  """
import os
import subprocess
import time
from fdb import services
from subprocess import Popen

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

# Obtain engine version:
engine = str(db_conn.engine_version) # convert to text because 'float' object has no attribute 'startswith'
db_conn.close()

# NB, 06.12.2016: as of  fdb 1.6.1 one need to EXPLICITLY specify user+password pair when doing connect 
# via to FB services API by services.connect() - see FB tracker, PYFB-69
# ("Can not connect to FB services if set ISC_USER & ISC_PASSWORD by os.environ[ ... ]")

fb_home = services.connect(host='localhost', user= user_name, password= user_password).get_home_directory()
# fb_home = services.connect(host='localhost').get_home_directory()

txt = '''# Generated auto, do not edit!
  database=%[\\\\\\\\/]security?.fdb
  {
      enabled = false
  }
  database=%[\\\\\\\\/]bugs.core_5475.fdb
  {
      enabled         = true
      log_connections = true
      time_threshold  = 0
      log_initfini    = false
      log_errors      = true
      log_warnings    = true

      #log_statement_prepare = true
      #log_statement_finish = true

      # 335544321 = arithmetic exception, numeric overflow, or string truncation
      # NOTE. dialect_1: 335544772 : Floating-point divide by zero.  The code attempted to divide a floating-point value by zero.
      # NOTE. dialect_3: 335544778 : Integer divide by zero.  The code attempted to divide an integer value by an integer divisor of zero.

      # 335544665 : violation of PRIMARY or UNIQUE KEY constraint "..." on table "..."
      # 335545072 : Problematic key value is ("..." = ...)

      # 335544321 : arithmetic exception, numeric overflow, or string truncation
      # 335544916 : numeric value is out of range

      # 335544321 : arithmetic exception, numeric overflow, or string truncation
      # 335544914 : string right truncation
      # 335545033 : expected length 5, actual 6


      # 335544807 : SQL warning code = 301
      # 335544808 : DATE data type is now called TIMESTAMP // dtype_renamed

      # 336068855 : Warning: ALL on ALL is not granted to <...>.

      # this will NOT specified neither in include_gds nor in exclude_gds lists.
      # We'll do attempt to violate not null finally and check what does appear in the trace log.
      # 335544347 : validation error for column "TTT"."X", value "*** null ***"

      # 1. We ALLOW to be logged (and EXPECT because of current test scenario): 
      # 1.1) any kind of "arithmetic exc, num ovf, or string trunc" 
      # 1.2) PK/UK violation
      # 1.3) (warning) 336068855 : Warning: ALL on ALL is not granted to <...>.
      include_gds_codes = arith_except,unique_key_violation,336068855

      # We PREVENT from logging:
      # 2.1 "FP divide by zero",
      # 2.2 "Integer divide by zero" and 
      # 2.3 (warning) "DATE data type is now called TIMESTAMP" (warning)
      exclude_gds_codes = 335544772,335544778,335544808

      # we do not prevent but do not expect to be logged:
      # 335544347 : validation error for column "TTT"."X", value "*** null ***"

  }
'''

f_trc_cfg=open( os.path.join(context['temp_directory'],'tmp_trace_5475.cfg'), 'w')
f_trc_cfg.write(txt)
f_trc_cfg.close()

# ##############################################################
# S T A R T   T R A C E   i n   S E P A R A T E    P R O C E S S
# ##############################################################

f_trc_log=open( os.path.join(context['temp_directory'],'tmp_trace_5475.log'), "w")
f_trc_err=open( os.path.join(context['temp_directory'],'tmp_trace_5475.err'), "w")

p_trace = Popen( [ fb_home+'fbsvcmgr', 'localhost:service_mgr', 'action_trace_start' , 'trc_cfg', f_trc_cfg.name],stdout=f_trc_log,stderr=f_trc_err)

time.sleep(1)

# ####################################################
# G E T  A C T I V E   T R A C E   S E S S I O N   I D
# ####################################################
# Save active trace session info into file for further parsing it and obtain session_id back (for stop):

f_trc_lst = open( os.path.join(context['temp_directory'],'tmp_trace_5475.lst'), 'w')
subprocess.call([fb_home+'fbsvcmgr', 'localhost:service_mgr', 'action_trace_list'], stdout=f_trc_lst)
f_trc_lst.close()

# !!! DO NOT REMOVE THIS LINE !!!
time.sleep(1)

trcssn=0
with open( f_trc_lst.name,'r') as f:
    for line in f:
        i=1
        if 'Session ID' in line:
            for word in line.split():
                if i==3:
                    trcssn=word
                i=i+1
            break
f.close()
# Result: `trcssn` is ID of active trace session. Now we have to terminate it:


con1 = fdb.connect(dsn=dsn)
cur1 = con1.cursor()
try:
    # 335544321 : arithmetic exception, numeric overflow, or string truncation
    # NOTE. dialect_1: 335544772 : Floating-point divide by zero.  The code attempted to divide a floating-point value by zero.
    # NOTE. dialect_3: 335544778 : Integer divide by zero.  The code attempted to divide an integer value by an integer divisor of zero.
    cur1.execute('insert into test(id,x) values(2, 1/0)') # -------- should raise zero divide
except Exception as e:
    print(e[0])
con1.close()



con2 = fdb.connect(dsn=dsn)
cur2 = con2.cursor()
try:
    # Should raise
    # 335544665 : violation of PRIMARY or UNIQUE KEY constraint "INTEG_10" on table "TEST"
    # 335545072 : Problematic key value is ("ID" = 1)
    cur2.execute('insert into test(id,x) values(?, ?)', (1, 1) )
except Exception as e:
    print(e[0])
con2.close()


con3 = fdb.connect(dsn=dsn)
cur3 = con3.cursor()
try:
    # Should raise
    # 335544321 : arithmetic exception, numeric overflow, or string truncation
    # 335544916 : numeric value is out of range
    cur3.execute('update test set x = x + 1')
except Exception as e:
    print(e[0])
con3.close()


con4 = fdb.connect(dsn=dsn)
cur4 = con4.cursor()
try:
    # Should raise
    # 335544321 : arithmetic exception, numeric overflow, or string truncation
    # 335544914 : string right truncation
    # 335545033 : expected length 5, actual 6
    cur4.execute("select cast('qwerty' as varchar(5)) from rdb$database")
except Exception as e:
    print(e[0])
con4.close()


con5 = fdb.connect(dsn=dsn, sql_dialect=1)
cur5 = con5.cursor()
try:
    # Leads to WARNING in trace:
    # 335544807 : SQL warning code = 301
    # 335544808 : DATE data type is now called TIMESTAMP
    cur5.execute( "update test set y = cast('now' as date)" ) 
except Exception as e:
    print(e[0])
con5.close()


con6 = fdb.connect(dsn=dsn)
cur6 = con6.cursor()
try:
    # Should raise
    # 335544347 : validation error for column "TTT"."X", value "*** null ***"
    # NB: this gdscode was NOT specified neither in include_gds nor in exclude_gds lists.
    # We do attempt to violate not null and check what does appear in the trace log.
    cur6.execute('insert into test(id) values(null)')
except Exception as e:
    print(e[0])
con6.close()


con7 = fdb.connect(dsn=dsn)
# Should raise:
# (warning) 336068855 : Warning: ALL on ALL is not granted to <...>.
con7.execute_immediate('revoke all on all from tmp$c5475')
con7.close()


          # 1. We ALLOW to be logged: 
          # 1.1) any kind of "arithmetic exc, num ovf, or string trunc" 
          # 1.2) PK/UK violation
          # 1.3) (warning) 336068855 : Warning: ALL on ALL is not granted to <...>.
          #include_gds_codes = arith_except,no_dup,336068855

          # We PREVENT from logging:
          # 2.1 "FP divide by zero",
          # 2.2 "Integer divide by zero" and 
          # 2.3 (warning) "DATE data type is now called TIMESTAMP" (warning)
          #exclude_gds_codes = 335544772,335544778,335544808


# Let trace log to be entirely written on disk:
time.sleep(2)


# ####################################################
# S E N D   R E Q U E S T    T R A C E   T O   S T O P
# ####################################################
if trcssn>0:
    fn_nul = open(os.devnull, 'w')
    subprocess.call([fb_home+'fbsvcmgr', 'localhost:service_mgr', 'action_trace_stop','trc_id', trcssn], stdout=fn_nul)
    fn_nul.close()
    # DO NOT REMOVE THIS LINE:
    time.sleep(2)

p_trace.terminate()
f_trc_log.close()
f_trc_err.close()

# Following file should be EMPTY:
################

f_list=(f_trc_err,)
for i in range(len(f_list)):
   f_name=f_list[i].name
   if os.path.getsize(f_name) > 0:
       with open( f_name,'r') as f:
           for line in f:
               print("Unexpected STDERR, file "+f_name+": "+line)
       f.close()


          # 1. We ALLOW to be logged (and EXPECT because of current test scenario): 
          # 1.1) "arithmetic exc" caused by numeric overflow // 335544321, 335544916
          # 1.2) PK/UK violation                             // 335544665
          # 1.3) ALL on ALL is not granted to <...>          // 336068855 - warning
          #include_gds_codes = arith_except,unique_key_violation,336068855

          # We PREVENT from logging:
          # 2.1 "FP divide by zero"                          // 335544772 - occurs when dialect=1
          # 2.2 "Integer divide by zero"                     // 335544778 - occurs when dialect=3
          # 2.3 (warning) "DATE data type is now called TIMESTAMP" // 335544808 - warning
          #exclude_gds_codes = 335544772,335544778,335544808

          # we do not prevent but do not expect to be logged:
          # 335544347 : validation error for column "TTT"."X", value "*** null ***"
          # 335544914 : string right truncation (plus 335545033 : expected length 5, actual 6)

# Following gdscodes MUST BE found in the trace log:
expected_set={'335544321' : 'ERROR_NOT_found', '335544916' : 'ERROR_NOT_found', '335544665' : 'ERROR_NOT_found', '336068855' : 'ERROR_NOT_found'}

# Following gdscodes must NOT present on trace log because we explicitly PROHIBIT them:
prohibit_set={'335544772' : 'OK_NOT_FOUND', '335544778' : 'OK_NOT_FOUND','335544808' : 'OK_NOT_FOUND', 'TRACE_INIT' : 'OK_NOT_FOUND', 'TRACE_FINI' : 'OK_NOT_FOUND'}

# Following gdscodes are UNEXPECTED, i.e. we did not prohibit them explicitly
# but none of them are in include_gds_codes ==> they should NOT appear in the trace:
unexpect_set={'335544347' : 'OK_NOT_FOUND', '335544914' : 'OK_NOT_FOUND'}

with open( f_trc_log.name,'r') as f:
    for line in f:
       if line.split():
           starting_word=line.split()[0]
           if starting_word in expected_set:
               expected_set[ starting_word ] = 'OK_FOUND'
           elif starting_word in prohibit_set:
               prohibit_set[ starting_word ] = 'ERROR_PROHIBIT'
           elif starting_word in unexpect_set:
               unexpect_set[ starting_word ] = 'ERROR_UNEXPECT'

for k,v in sorted(expected_set.items()):
    print('expected_token:', k, '; message in trace:', v)

for k,v in sorted(prohibit_set.items()):
    print('prohibit_token:', k, '; message in trace:', v)

for k,v in sorted(unexpect_set.items()):
    print('unexpect_token:', k, '; message in trace:', v)


# CLEANUP
#########
f_list=(f_trc_cfg, f_trc_lst, f_trc_log, f_trc_err)

for i in range(len(f_list)):
   if os.path.isfile(f_list[i].name):
       os.remove(f_list[i].name)

  """,
 'expected_stdout': 
  """
    Error while executing SQL statement:
    - SQLCODE: -802
    - arithmetic exception, numeric overflow, or string truncation
    - Integer divide by zero.  The code attempted to divide an integer value by an integer divisor of zero.
    Error while executing SQL statement:
    - SQLCODE: -803
    - violation of PRIMARY or UNIQUE KEY constraint "TEST_PK" on table "TEST"
    - Problematic key value is ("ID" = 1)
    Error while executing SQL statement:
    - SQLCODE: -802
    - arithmetic exception, numeric overflow, or string truncation
    - numeric value is out of range
    Error while executing SQL statement:
    - SQLCODE: -625
    - validation error for column "TEST"."ID", value "*** null ***"

    expected_token: 335544321 ; message in trace: OK_FOUND
    expected_token: 335544665 ; message in trace: OK_FOUND
    expected_token: 335544916 ; message in trace: OK_FOUND
    expected_token: 336068855 ; message in trace: OK_FOUND

    prohibit_token: 335544772 ; message in trace: OK_NOT_FOUND
    prohibit_token: 335544778 ; message in trace: OK_NOT_FOUND
    prohibit_token: 335544808 ; message in trace: OK_NOT_FOUND
    prohibit_token: TRACE_FINI ; message in trace: OK_NOT_FOUND
    prohibit_token: TRACE_INIT ; message in trace: OK_NOT_FOUND

    unexpect_token: 335544347 ; message in trace: OK_NOT_FOUND
    unexpect_token: 335544914 ; message in trace: OK_NOT_FOUND
  """,
 'expected_stderr': 
  """
  """
}
]
}
