{
'id': 'bugs.core_2879',
'qmid': None,
'tracker_id': 'CORE-2879',
'title': "Sweep could raise error : page 0 is of wrong type (expected 6, found 1)",
'description':
 """
     https://github.com/FirebirdSQL/firebird/issues/3263

     Test receives content of firebird.log _before_ and _after_ running query from ticket.
     Then we compare these two files.
     Difference between them should relate ONLY to sweep start and finish details, and NOT about page wrong type.

     Checked 01-feb-2020 on:
         4.0.0.1759 SS: 4.754s.
         3.0.6.33240 SS: 3.704s.
         2.5.9.27119 SS: 6.607s.

    REFACTORED 24-mar-2022.
    We must check that diff-file of firebird.log meets TWO requirements:
        1) contains messages about SWEEP start and finish;
        2) does NOT contain message from ticket issue: "page ... is of wrong type (expected ..., found ...)"
    Any other messages, e.g. "DEBUG_...:" must be ignored.
 """,
'min_versions': '2.5.1',
'versions': [
{
 'firebird_version': '2.5',
 'platform': 'All',
 'test_type': 'Python',
 'test_script': 
  """
import os
import sys
import subprocess
from subprocess import Popen
import difflib
import re
import time
import datetime
from datetime import datetime

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

engine = str(db_conn.engine_version)
db_file = db_conn.database_name # "$(DATABASE_LOCATION)bugs.core_2879.fdb"

db_conn.close()

#--------------------------------------------

def flush_and_close(file_handle):
    # https://docs.python.org/2/library/os.html#os.fsync
    # If you're starting with a Python file object f, 
    # first do f.flush(), and 
    # then do os.fsync(f.fileno()), to ensure that all internal buffers associated with f are written to disk.
    global os
    
    file_handle.flush()
    if file_handle.mode not in ('r', 'rb'):
        # otherwise: "OSError: [Errno 9] Bad file descriptor"!
        os.fsync(file_handle.fileno())
    file_handle.close()

#--------------------------------------------

def cleanup( f_names_list ):
    global os
    for i in range(len( f_names_list )):
       if os.path.isfile( f_names_list[i]):
            os.remove( f_names_list[i] )

#--------------------------------------------

def svc_get_fb_log( engine, f_fb_log ):

  global subprocess

  if engine.startswith('2.5'):
      get_firebird_log_key='action_get_ib_log'
  else:
      get_firebird_log_key='action_get_fb_log'

  subprocess.call([ context['fbsvcmgr_path'],
                    "localhost:service_mgr",
                    get_firebird_log_key
                  ],
                   stdout=f_fb_log, 
                   stderr=subprocess.STDOUT
                 )

  return

#-----------------------------------------------------

sql_ddl='''\
    set list on;
    set term ^;
    execute block returns (dts timestamp, sql varchar(80)) as
        declare i int;
        declare s varchar(256);
    begin
        i = 1;
        while (i < 32767) do
        begin
            s = 'tmp' || :i;
            dts = 'now';
            sql = 'create global temporary table ' || :s || ' (id int);';
            execute statement sql with autonomous transaction;
            suspend;

            dts = 'now';
            sql = 'drop table ' || :s || ';';
            execute statement sql with autonomous transaction;
            suspend;

            i = i + 1;
        end
    end ^
    set term ;^
'''

f_isql_cmd=open( os.path.join(context['temp_directory'],'tmp_make_lot_GTT_2879.sql'), 'w', buffering = 0)
f_isql_cmd.write(sql_ddl)
f_isql_cmd.close()

# Get content of firebird.log BEFORE test:
##########################################

f_fblog_before=open( os.path.join(context['temp_directory'],'tmp_2879_fblog_before.txt'), 'w', buffering = 0)
svc_get_fb_log( engine, f_fblog_before )
flush_and_close( f_fblog_before )

# LAUNCH ISQL ASYNCHRONOUSLY
############################

f_isql_log=open( os.path.join(context['temp_directory'],'tmp_make_lot_GTT_2879.log'), 'w', buffering = 0)
p_isql=subprocess.Popen( [context['isql_path'], dsn, "-i", f_isql_cmd.name],
                         stdout=f_isql_log, 
                         stderr=subprocess.STDOUT
                       )
#------------
time.sleep(2)
#------------

# LAUNCH SWEEP while ISQL is working:
# ############
fbsvc_log=open( os.path.join(context['temp_directory'],'tmp_svc_2879.log'), 'w', buffering = 0)
subprocess.call( [ context['fbsvcmgr_path'],"localhost:service_mgr", "action_repair", "dbname", db_file, "rpr_sweep_db"], stdout=fbsvc_log, stderr=subprocess.STDOUT )
flush_and_close( fbsvc_log )

p_isql.terminate()
f_isql_log.close()

# 01.02.2020. We have to change DB state to full shutdown and bring it back online
# in order to prevent "Object in use" while fbtest will try to drop this DB
#####################################
runProgram('gfix',[dsn,'-shut','full','-force','0'])
runProgram('gfix',[dsn,'-online'])

# Get content of firebird.log AFTER test:
#########################################

f_fblog_after=open( os.path.join(context['temp_directory'],'tmp_2879_fblog_after.txt'), 'w', buffering = 0)
svc_get_fb_log( engine, f_fblog_after )
flush_and_close( f_fblog_after )

# 07.08.2016
# DIFFERENCE in the content of firebird.log should be EMPTY:
####################

oldfb=open(f_fblog_before.name, 'r')
newfb=open(f_fblog_after.name, 'r')

difftext = ''.join(difflib.unified_diff(
    oldfb.readlines(), 
    newfb.readlines()
  ))
oldfb.close()
newfb.close()

f_diff_txt=open( os.path.join(context['temp_directory'],'tmp_2879_diff.txt'), 'w', buffering = 0)
f_diff_txt.write(difftext)
flush_and_close( f_diff_txt )

# NB: difflib.unified_diff() can show line(s) that present in both files, without marking that line(s) with "+". 
# Usually these are 1-2 lines that placed just BEFORE difference starts.
# So we have to check output before display diff content: lines that are really differ must start with "+".


must_missing_pattern = re.compile ('page \d+ is of wrong type \(expected \d+, found \d+\)' )
must_present_pattern = re.compile( 'Sweep is ((started by SYSDBA)|finished)' )
with open( f_diff_txt.name,'r') as f:
    for line in f:
        if line.startswith('+') and line.split('+'):
            if must_missing_pattern.search(line):
                print('UNEXPECTED MESSAGE IN FIREBIRD.LOG: ' + line.strip())
            elif must_present_pattern.search(line):
                print('FOUND EXPECTED MESSAGE: ' + line)
            else:
                # 24.03.2022: do NOTHING if encounter some DEBUG messages, e.g.:
                # DEBUG_LCK_LIST: irsb_nav_btr_gc_lock && !irsb_nav_page
                pass




# Cleanup:
##########
time.sleep(1)
cleanup( [i.name for i in (f_isql_cmd, f_isql_log, fbsvc_log, f_fblog_before,f_fblog_after, f_diff_txt)] )

  """,
 'expected_stdout': 
  """
    FOUND EXPECTED MESSAGE: + Sweep is started by SYSDBA
    FOUND EXPECTED MESSAGE: + Sweep is finished
  """,
 'expected_stderr': 
  """
  """,
  'substitutions':[ ('\t+', ' '), ('^((?!start|finish|expected|page|wrong).)*$','')]
}
]
}
