{
'id': 'bugs.core_5737',
'qmid': None,
'tracker_id': 'CORE-5737',
'title': ' Invalid parameters of gds transaction in ISQL',
'description': 
 """
    ISQL hangs when trying to show various system objects in a case when other attachment has uncommitted changes to that objects
    We create (in Python connection) one table TEST1 with PK and commit transaction.
    Then we create second (similar) table TEST2 but do not commit transaction.
    After this we launch ISQL in async. mode and ask him to perform SHOW TABLE and SHOW INDEX commands.
    ISQL:
    1) should NOT hang (it did this because of launching Tx in read committed NO record_version);
    2) should output only info about table TEST1 and ints PK index.
    3) should not output any info about non-committed DDL of table TEST2.

    Confirmed bug on 3.0.3.32837 and 4.0.0.800 (ISQL did hang when issued any of 'SHOW TABLE' / 'SHOW INDEX' copmmand).
    Checked on:
        3.0.3.32901: OK, 3.938s.
        4.0.0.875: OK, 3.969s.
 """,
'min_versions': '3.0.3',
'versions': [
{
 'firebird_version': '3.0',
 'platform': 'All',
 'init_script':
  """
  """,
 'test_type': 'Python',
 'test_script': 
  """
import os
import subprocess
from subprocess import Popen
import time
from fdb import services

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

fb_home = services.connect(host='localhost', user = user_name, password = user_password).get_home_directory()

cur = db_conn.cursor()
db_conn.execute_immediate('recreate table test1(id int primary key using descending index test1_id_pk_desc)')
db_conn.commit()
cur.execute('recreate table test2(id int primary key using descending index test2_id_pk_desc)')

show_query='''
    show table;
    show index;
'''

f_show_command_sql = open( os.path.join(context['temp_directory'],'tmp_local_host_5737.sql'), 'w')
f_show_command_sql.write( show_query )
f_show_command_sql.close()

f_show_command_log = open( os.path.join(context['temp_directory'],'tmp_local_host_5737.log'), 'w')
f_show_command_err = open( os.path.join(context['temp_directory'],'tmp_local_host_5737.err'), 'w')

# WARNING: we launch ISQL here in async mode in order to have ability to kill its process if it will hang!
############################################
p_isql_to_local_host=subprocess.Popen( [fb_home+"isql", dsn, "-i", f_show_command_sql.name ],
                 stdout = f_show_command_log,
                 stderr = f_show_command_err
               )

time.sleep(2)

p_isql_to_local_host.terminate()
f_show_command_log.close()
f_show_command_err.close()


with open( f_show_command_log.name,'r') as f:
  for line in f:
      if line.split():
        print('STDOUT: ', ' '.join(line.split()) )
f.close()

with open( f_show_command_err.name,'r') as f:
  for line in f:
      if line.split():
        print('STDERR: ', ' '.join(line.split()) )
f.close()            
cur.close()

###############################
# Cleanup.
time.sleep(1)

f_list=( 
     f_show_command_sql 
    ,f_show_command_log 
    ,f_show_command_err 
)


for i in range(len(f_list)):
    if os.path.isfile(f_list[i].name):
        os.remove(f_list[i].name)

  """,
 'expected_stdout':
  """
    STDOUT:  TEST1
    STDOUT:  TEST1_ID_PK_DESC UNIQUE DESCENDING INDEX ON TEST1(ID)
  """,
 'expected_stderr':
  """
  """
}
]
}
