{
'id': 'bugs.core_5921',
'qmid': None,
'tracker_id': 'CORE-5921',
'title': "Provide information about Global Commit Number, Commit Number of currently used database snapshot (if any) and Commit Numbers assigned to the committed transactions",
'description':
 """
    From doc\sql.extensions\README.builtin_functions.txt about rdb$get_transaction_cn() function:
    ===
      ... numbers returned by RDB$GET_TRANSACTION_CN could have values below:
            -2 - transaction is dead (rolled back)
            -1 - transaction is in limbo
             0 - transaction is active,
             1 - transaction committed before database started |||or less than OIT||| -- additional comment by hvlad, privately, letter 24.09.2018 09:50
            >1 - transaction committed after database started
            NULL - given transaction number is NULL or greater than database Next Transaction
    ===
    Checked on: 4.0.0.1218, 2.578 s.
    ::: NB :::
    This ISQL-based test does NOT verify cases when tx is dead or in limbo.
    Perhaps, Python-based implementation is required and will be created later.
 """,
'min_versions': '4.0',
'versions': [
{
 'firebird_version': '4.0',
 'platform': 'All',
 'init_script': 
  """
  """,
 'test_type': 'ISQL',
 'test_script': 
  """
    set list on;
    set term ^;
    create or alter procedure sp_set_tx_ctx( a_ctx_var_name varchar(80) ) as
    begin
        rdb$set_context('USER_SESSION', :a_ctx_var_name, current_transaction);
    end
    ^
    set term ;^
    commit;

    set list on;
    execute procedure sp_set_tx_ctx('tx_a');

    select 
         iif( tx_a < tx_oit, 'For TX < OIT', iif( tx_a = tx_oit, 'For OIT', 'For TX > OIT') ) as msg_a
        ,rdb$get_transaction_cn( tx_a ) as get_tx_a_cn
    from (
        select 
             d.mon$oldest_transaction as tx_oit
            ,cast( rdb$get_context('USER_SESSION','tx_a') as int ) as tx_a
        from mon$database d
    )
    ;
    rollback;

    execute procedure sp_set_tx_ctx('tx_b');
    commit;

    select 
         iif( tx_b < tx_oit, 'For TX < OIT', iif( tx_b = tx_oit, 'For OIT', 'For TX > OIT') ) as msg_b
        ,rdb$get_transaction_cn( tx_b ) as get_tx_b_cn
    from (
        select 
             d.mon$oldest_transaction as tx_oit
            ,cast( rdb$get_context('USER_SESSION','tx_b') as int ) as tx_b
        from mon$database d
    )
    ;

    select
         rdb$get_transaction_cn( d.mon$oldest_transaction ) as get_oit_cn
        ,rdb$get_transaction_cn( current_transaction ) as get_tx_c_cn
        ,rdb$get_transaction_cn( null ) as get_tx_nul_cn
        ,rdb$get_transaction_cn( mon$next_transaction + 1 ) as get_tx_nxx_cn
    from mon$database d;

    /*
    set sqlda_display on;
    set planonly;
    select
        rdb$get_context('SYSTEM', 'GLOBAL_CN') as global_cn
       ,rdb$get_context('SYSTEM', 'SNAPSHOT_CN') as snapshot_cn
    from rdb$database;
    */

    set term ^;
    execute block returns( global_cn_sign smallint, snapshot_cn smallint ) as
    begin
       global_cn_sign = sign( rdb$get_context('SYSTEM', 'GLOBAL_CN') );
       snapshot_cn = sign( rdb$get_context('SYSTEM', 'SNAPSHOT_CN') );
       suspend;
    end
    ^

  """,
 'expected_stdout': 
  """
    MSG_A                           For TX > OIT
    GET_TX_A_CN                     0

    MSG_B                           For TX < OIT
    GET_TX_B_CN                     1

    GET_OIT_CN                      9
    GET_TX_C_CN                     0

    GET_TX_NUL_CN                   <null>
    GET_TX_NXX_CN                   <null>

    GLOBAL_CN_SIGN                  1
    SNAPSHOT_CN                     1
  """,
 'expected_stderr': 
  """
  """
}
]
}
