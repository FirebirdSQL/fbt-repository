{
'id': 'bugs.core_3598',
'qmid': None,
'tracker_id': 'CORE-3598',
'title': "TRACE: add statistics of actions that were after transaction finished",
'description':
 """
   1. Obtain engine_version from built-in context variable.
   2. Make config for trace in proper format according to FB engine version.
   3. Launch trace session in separate child process using 'FBSVCMGR action_trace_start'
   4. Run ISQL with test commands.
   5. Stop trace session. Output its log with filtering only interested lines.

   Checked on: 
   *  WI-V2.5.6.26963 -- absent line with per-table info for ROLLBACK event, see issue in the ticket 20.01.2016
   *  WI-V3.0.0.32280 (SS, SC, CS). -- works fine.
   
   ##########################
   NB: implementation for 2.5 was deferred because its output does not contain per-table block for ROLLBACK event.
 """,
'min_versions': '2.5.2',
'versions': [
{
 'firebird_version': '2.5',
 'platform': 'All',
 'test_type': 'Python',
 'init_script':
  """
    recreate table tfix(id int);
    recreate global temporary table gtt_ssn(id int) on commit preserve rows;
    recreate global temporary table gtt_tra(id int) on commit delete rows;
  """,
 'test_script':
  """\
import os
import subprocess
from subprocess import Popen
import time

db_conn.close()

#####################################################
# Obtain engine version, 2.5 or 3.0, for make trace config in appropriate format:

sqltxt='''set list on;select rdb$get_context('SYSTEM','ENGINE_VERSION') as engine_version from rdb$database;'''
sqllog=open( os.path.join(context['temp_directory'],'tmp_isql_3598.log'), 'w')
sqllog.close()
runProgram('isql',[dsn,'-user',user_name,'-pas',user_password,'-q','-o',sqllog.name],sqltxt)
with open( sqllog.name,'r') as f:
    for line in f:
        i=1
        if 'ENGINE_VERSION' in line:
            for word in line.split():
                if i==2:
                    engine=word
                i=i+1
            break
f.close()

txt25 = '''# Trace config, format for 2.5. Generated auto, do not edit!
<database %[\\\\\\\\/]bugs.core_3598.fdb>
  enabled true
  log_transactions true
  print_perf true
  time_threshold 0 
</database>
'''

# NOTES ABOUT TRACE CONFIG FOR 3.0:
# 1) Header contains `database` clause in different format vs FB 2.5: its data must be enclosed with '{' '}'
# 2) Name and value must be separated by EQUALITY sign ('=') in FB-3 trace.conf, otherwise we get runtime error:
#    element "<. . .>" have no attribute value set

txt30 = '''# Trace config, format for 3.0. Generated auto, do not edit!
database=%[\\\\\\\\/]bugs.core_3598.fdb
{
  enabled = true
  log_transactions = true
  print_perf = true
  time_threshold = 0 
}
'''
trccfg=open( os.path.join(context['temp_directory'],'tmp_trace_3598.cfg'), 'w')
if engine.startswith('2.5'):
    trccfg.write(txt25)
else:
    trccfg.write(txt30)
trccfg.close()

trclog=open( os.path.join(context['temp_directory'],'tmp_trace_3598.log'), 'w')
trclog.close()
trclst=open( os.path.join(context['temp_directory'],'tmp_trace_3598.lst'), 'w')
trclst.close()

#####################################################
# Starting trace session in new child process (async.):

f_trclog=open(trclog.name,'w')
# Execute a child program in a new process, redirecting STDERR to the same target as of STDOUT:
p_trace=Popen(["fbsvcmgr", "localhost:service_mgr", "user", "SYSDBA", "password", "masterkey",\
               "action_trace_start",\
                "trc_cfg", trccfg.name],\
                stdout=f_trclog, stderr=subprocess.STDOUT)

# Wait! Trace session is initialized not instantly!
time.sleep(1)

#####################################################
# Running ISQL with test commands:

sqltxt=\
'''
insert into tfix(id) values(1);
commit;
insert into tfix(id) values(2);
rollback;
insert into gtt_ssn(id) values(1);
commit;
insert into gtt_ssn(id) values(2);
rollback;
insert into gtt_tra(id) values(1);
commit;
insert into gtt_tra(id) values(2);
rollback;
'''

runProgram('isql',[dsn,'-user',user_name,'-pas',user_password,'-n'],sqltxt)

# do NOT remove this otherwise trace log can contain only message about its start before being closed!
time.sleep(2)

#####################################################
# Getting ID of launched trace session and STOP it:

# Save active trace session info into file for further parsing it and obtain session_id back (for stop):
f_trclst=open(trclst.name,'w')
subprocess.call(["fbsvcmgr", "localhost:service_mgr", "user", "SYSDBA", "password", "masterkey",\
                 "action_trace_list"],\
                 stdout=f_trclst, stderr=subprocess.STDOUT
               )
f_trclst.close()

trcssn=0
with open( trclst.name,'r') as f:
    for line in f:
        i=1
        if 'Session ID' in line:
            for word in line.split():
                if i==3:
                    trcssn=word
                i=i+1
            break
f.close()

# Result: `trcssn` is ID of active trace session. Now we have to terminate it:
f_trclst=open(trclst.name,'a')
f_trclst.seek(0,2)
subprocess.call(["fbsvcmgr", "localhost:service_mgr", "user", "SYSDBA", "password", "masterkey",\
                 "action_trace_stop",\
                 "trc_id",trcssn],\
                 stdout=f_trclst, stderr=subprocess.STDOUT
               )
f_trclst.close()

# Terminate child process of launched trace session (though it should already be killed):
p_trace.terminate()
f_trclog.close()

###################################################################

# Output log of trace session, with filtering only interested info:

# Pwerformance header text (all excessive spaces will be removed before comparison - see below):
perf_header='Table                             Natural     Index    Update    Insert    Delete   Backout     Purge   Expunge'
i=0
with open( trclog.name,'r') as f:
    for line in f:
        if ' ms,' in line and ('fetch' in line or 'mark' in line): # One of these always WILL be in trace statistics.
            print('Statement statistics detected.')
            i =  i +1
            if engine.startswith('2.5') and (i==2 or i==4):

                # Dummy emulation of output in 2.5 for it will match to 3.0 - see comment by hvlad in the ticket, 21/Jan/16 11:26 AM:
                # Per-table statistics at transaction level are not accumulated in v2.5
                # Enabling it is possible but have almost no sence as it adds some run-time cost, 
                # while there is no way to query it (except of "tx end" trace event). 

                print('Performance block detected.')
                if i==2:
                    print('Found table statistics for: TFIX')
                else:
                    print('Found table statistics for: GTT_SSN')
        if ' '.join(line.split()).upper() == ' '.join(perf_header.split()).upper():
            print('Performance block detected.')
        if line.startswith('TFIX') or line.startswith('GTT_SSN') or line.startswith('GTT_TRA'):
            print('Found table statistics for: '+line.split()[0])
f.close()

# Cleanup:
##########
time.sleep(1)

if os.path.isfile(sqllog.name):
    os.remove(sqllog.name)
if os.path.isfile(trccfg.name):
    os.remove(trccfg.name)
if os.path.isfile(trclst.name):
    os.remove(trclst.name)
if os.path.isfile(trclog.name):
    os.remove(trclog.name)

  """,
 'expected_stdout': 
  """
    Statement statistics detected.
    Statement statistics detected.
    Performance block detected.
    Found table statistics for: TFIX
    Statement statistics detected.
    Statement statistics detected.
    Performance block detected.
    Found table statistics for: GTT_SSN
    Statement statistics detected.
    Statement statistics detected.
  """,
 'expected_stderr': 
  """
  """
}
]
}
