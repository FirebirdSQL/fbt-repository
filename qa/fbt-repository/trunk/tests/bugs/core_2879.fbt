{
'id': 'bugs.core_2879',
'qmid': None,
'tracker_id': 'CORE-2879',
'title': "Sweep could raise error : page 0 is of wrong type (expected 6, found 1)",
'description':
 """
   Test receives content of firebird.log _before_ and _after_ running query that is show in the ticket.
   Then we compare these two files.
   Difference between them should relate ONLY to sweep start and finish details, and NOT about page wrong type.

   Checked on: WI-V2.5.7.27024, WI-V3.0.1.32570, WI-T4.0.0.316 -- all works OK.
 """,
'min_versions': '2.5.1',
'versions': [
{
 'firebird_version': '2.5',
 'platform': 'All',
 'test_type': 'Python',
 'test_script': 
  """
import os
import sys
import subprocess
from subprocess import Popen
import difflib
import time
import datetime
from datetime import datetime

def svc_get_fb_log( engine, f_fb_log ):

  import subprocess

  if engine.startswith('2.5'):
      get_firebird_log_key='action_get_ib_log'
  else:
      get_firebird_log_key='action_get_fb_log'

  subprocess.call([ "fbsvcmgr",
                    "localhost:service_mgr",
                    get_firebird_log_key
                  ],
                   stdout=f_fb_log, 
                   stderr=subprocess.STDOUT
                 )

  return


os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

db_conn.close()

# Obtain engine version:

att1 = kdb.connect(dsn=dsn)
cur1 = att1.cursor()

cur1.execute("select rdb$get_context('SYSTEM','ENGINE_VERSION') as engine_version from rdb$database")
for row in cur1:
    engine = row[0]

att1.close()


# Result: file tmp_core_2879.fdb is extracted into context['temp_directory']
db_file="$(DATABASE_LOCATION)bugs.core_2879.fdb"

sql_ddl='''\
    set list on;
    set term ^;
    execute block returns (dts timestamp, sql varchar(80))
    as
    declare n int;
    declare i int;
    declare s varchar(256);
    begin
      n = 0;
      while (n < 20) do
      begin
        i = 1;
        while (i < 10) do
        begin
          s = 'tmp' || :i;
          dts = 'now';
          sql = 'create global temporary table ' || :s || ' (id int);';
          execute statement sql with autonomous transaction;
          suspend;

          dts = 'now';
          sql = 'drop table ' || :s || ';';
          execute statement sql with autonomous transaction;
          suspend;

          i = i + 1;
        end
        n = n + 1;
      end
    end ^
    set term ;^
'''

f_isql_cmd=open( os.path.join(context['temp_directory'],'tmp_ddl_2879.sql'), 'w')
f_isql_cmd.write(sql_ddl)
f_isql_cmd.close()

# Get content of firebird.log BEFORE test:
##########################################

f_fblog_before=open( os.path.join(context['temp_directory'],'tmp_2879_fblog_before.txt'), 'w')
svc_get_fb_log( engine, f_fblog_before )
f_fblog_before.close()

# 07.08.2016
time.sleep(1)

# RUN ISQL
##########

f_isql_log=open( os.path.join(context['temp_directory'],'tmp_ddl_2879.log'), 'w')
p_isql=subprocess.Popen( ["isql", dsn, "-i", f_isql_cmd.name],
                         stdout=f_isql_log, 
                         stderr=subprocess.STDOUT
                       )

#--------------------------------------------------
time.sleep(2)
#--------------------------------------------------

# Now we run SWEEP in child process (asynchronous) and while it will in work - try to establish several attachments.
##################

fbsvc_log=open( os.path.join(context['temp_directory'],'tmp_svc_2879.log'), 'w')
p_sweep=subprocess.Popen([ "fbsvcmgr","localhost:service_mgr",
                           "action_repair", "dbname", db_file, "rpr_sweep_db"],
                           stdout=fbsvc_log, stderr=subprocess.STDOUT
                        )

time.sleep(3)

p_isql.terminate()
f_isql_log.close()

p_sweep.terminate()
fbsvc_log.close()

# 07.08.2016
time.sleep(2)

# Get content of firebird.log AFTER test:
#########################################

f_fblog_after=open( os.path.join(context['temp_directory'],'tmp_2879_fblog_after.txt'), 'w')
svc_get_fb_log( engine, f_fblog_after )
f_fblog_after.close()


# 07.08.2016
time.sleep(1)

# DIFFERENCE in the content of firebird.log should be EMPTY:
####################

oldfb=open(f_fblog_before.name, 'r')
newfb=open(f_fblog_after.name, 'r')

difftext = ''.join(difflib.unified_diff(
    oldfb.readlines(), 
    newfb.readlines()
  ))
oldfb.close()
newfb.close()

f_diff_txt=open( os.path.join(context['temp_directory'],'tmp_2879_diff.txt'), 'w')
f_diff_txt.write(difftext)
f_diff_txt.close()

# NB: difflib.unified_diff() can show line(s) that present in both files, without marking that line(s) with "+". 
# Usually these are 1-2 lines that placed just BEFORE difference starts.
# So we have to check output before display diff content: lines that are really differ must start with "+".

with open( f_diff_txt.name,'r') as f:
    for line in f:
        if line.startswith('+') and line.split('+'):
            print(line.replace('+',' '))
f.close()

#####################################################################
# Cleanup:
time.sleep(1)

f_list=[f_isql_cmd, f_isql_log, fbsvc_log, f_fblog_before,f_fblog_after, f_diff_txt]
for i in range(len(f_list)):
    if os.path.isfile(f_list[i].name):
        os.remove(f_list[i].name)

  """,
 'expected_stdout': 
  """
    Sweep is started by SYSDBA
    Sweep is finished
  """,
 'expected_stderr': 
  """
  """,
  'substitutions':[ ('\t+', ' '), ('^((?!start|finish|expected|page|wrong).)*$','')]
}
]
}
