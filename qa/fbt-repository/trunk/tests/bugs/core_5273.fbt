{
'id': 'bugs.core_5273',
'qmid': None,
'tracker_id': 'CORE-5273',
'title': "Crash when attempt to create database with running trace ( internal Firebird consistency check (cannot find tip page (165), file: tra.cpp line: 2233) )",
'description':
 """
    1. Get the content of firebird.log before test.
    2. Make config file and launch trace session, with separate logging of its STDOUT and STDERR.
    3. Make DDLfile and run ISQL, with separate logging of its STDOUT and STDERR.
    4. Stop trace session
    5. Get the content of firebird.log after test.
    6. Ensure that files which should store STDERR results are empty.
    7. Ensure that there is no difference in the content of firebird.log.
        
    Confirmed on 4.0.0.254 (SS, SC):
    1) unexpected STDERR logs:
        + Unexpected STDERR, file ...\tmp_5273_ddl.err: Statement failed, SQLSTATE = 08006
        + Unexpected STDERR, file ...\tmp_5273_ddl.err: Error reading data from the connection.
        + Unexpected STDERR, file ...\tmp_5273_ddl.err: After line 3 in file ...\tmp_5273_ddl.sql
        + Unexpected STDERR, file ...\tmp_trace_5273.err: Error reading data from the connection.
    2) diff in firebird.log:
        +CSPROG	Thu Jun 16 14:17:13 2016
        +	Database: C:\MIX\FIREBIRD\QA\FBT-REPO\TMP\TMP_5273.FDB
        +	internal Firebird consistency check (cannot find tip page (165), file: tra.cpp line: 2233)
        +
        +
        +CSPROG	Thu Jun 16 14:17:13 2016
        +	INET/inet_error: read errno = 10054, server host = localhost, address = 127.0.0.1/3430

    Works fine on 4.0.0.256.
 """,
'min_versions': '4.0',
'versions': [
{
 'firebird_version': '4.0',
 'platform': 'All',
 'test_type': 'Python',
 'init_script':
  """
  """,
 'test_script':
  """\
import os
import time
import subprocess
import difflib
from subprocess import Popen

def svc_get_fb_log( engine, f_fb_log ):

  import subprocess

  if engine.startswith('2.5'):
      get_firebird_log_key='action_get_ib_log'
  else:
      get_firebird_log_key='action_get_fb_log'

  subprocess.call([ "fbsvcmgr",
                    "localhost:service_mgr",
                    get_firebird_log_key
                  ],
                   stdout=f_fb_log, 
                   stderr=subprocess.STDOUT
                 )

  return


os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

db_conn.close()

# Obtain engine version:

att1 = kdb.connect(dsn=dsn)
cur1 = att1.cursor()

cur1.execute("select rdb$get_context('SYSTEM','ENGINE_VERSION') as engine_version from rdb$database")
for row in cur1:
    engine = row[0]

att1.close()


fbb='' # 'C:/MIX/firebird/fb40sc/' # '/opt/fb40ss/bin/'
tmpfdb1=os.path.join(context['temp_directory'],'tmp_5273.fdb')
if os.path.isfile(tmpfdb1):
    os.remove(tmpfdb1)

sql_ddl='''\
  set list on;
  set bail on;
  create database 'localhost:%(tmpfdb1)s';
  select mon$database_name from mon$database;
  commit;
  drop database;
''' % locals()

trace_options = '''# Trace config, format for 3.0 and above. Generated auto, do not edit!
database=%[\\\\\\\\/]tmp_5273.fdb
{
  enabled = true
  log_sweep = true
  log_errors = true
  time_threshold = 0
  log_connections = true
  log_transactions = true
  log_statement_prepare = true
  log_statement_start = true
  log_statement_finish = true
  log_statement_free = true
  log_trigger_start = true
  log_trigger_finish = true
  print_perf = true
  max_sql_length = 16384
  max_log_size = 5000000
}
services
{
  enabled = false
  log_services = true
  log_service_query = true
  log_errors = true
} 
'''
f_trccfg=open( os.path.join(context['temp_directory'],'tmp_trace_5273.cfg'), 'w')
f_trccfg.write(trace_options)
f_trccfg.close()

# Get content of firebird.log BEFORE test:
##########################################

f_fblog_before=open( os.path.join(context['temp_directory'],'tmp_5273_fblog_before.txt'), 'w')
svc_get_fb_log( engine, f_fblog_before )
f_fblog_before.close()


# Starting trace session in new child process (async.):
#######################################################

f_trclog=open( os.path.join(context['temp_directory'],'tmp_trace_5273.log'), 'w')
f_trcerr=open( os.path.join(context['temp_directory'],'tmp_trace_5273.err'), 'w')

# Execute a child program in a new process, redirecting STDERR to the same target as of STDOUT:
p_trace=Popen([fbb+"fbsvcmgr", "localhost:service_mgr",
               "action_trace_start",
                "trc_cfg", f_trccfg.name],
                stdout=f_trclog, 
                stderr=f_trcerr
             )

# Wait! Trace session is initialized not instantly!
time.sleep(2)

f_create_db_sql = open( os.path.join(context['temp_directory'],'tmp_5273_ddl.sql'), 'w')
f_create_db_sql.write(sql_ddl)
f_create_db_sql.close()


# CREATE DATABASE 
#################

f_create_db_log = open( os.path.join(context['temp_directory'],'tmp_5273_ddl.log'), 'w')
f_create_db_err = open( os.path.join(context['temp_directory'],'tmp_5273_ddl.err'), 'w')
subprocess.call( [fbb+"isql", "-q", "-i", f_create_db_sql.name ],
                 stdout = f_create_db_log,
                 stderr = f_create_db_err
               )
f_create_db_log.close()
f_create_db_err.close()


# do NOT remove this otherwise trace log can contain only message about its start before being closed!
time.sleep(3)

#####################################################
# Getting ID of launched trace session and STOP it:

# Save active trace session info into file for further parsing it and obtain session_id back (for stop):
f_trclst=open( os.path.join(context['temp_directory'],'tmp_trace_5273.lst'), 'w')
subprocess.call([fbb+"fbsvcmgr", "localhost:service_mgr",
                 "action_trace_list"],
                 stdout=f_trclst, 
                 stderr=subprocess.STDOUT
               )
f_trclst.close()

trcssn=0
with open( f_trclst.name,'r') as f:
    for line in f:
        i=1
        if 'Session ID' in line:
            for word in line.split():
                if i==3:
                    trcssn=word
                i=i+1
            break
f.close()

# Result: `trcssn` is ID of active trace session. Now we have to terminate it:
f_trclst=open(f_trclst.name,'a')
f_trclst.seek(0,2)
subprocess.call([fbb+"fbsvcmgr", "localhost:service_mgr",
                 "action_trace_stop",
                 "trc_id",trcssn],
                 stdout=f_trclst, stderr=subprocess.STDOUT
               )
f_trclst.close()

# do NOT remove this delay: trase session can not be stopped immediatelly:
time.sleep(2)

# Terminate child process of launched trace session (though it should already be killed):
p_trace.terminate()
f_trclog.close()
f_trcerr.close()


# Get content of firebird.log AFTER test:
#########################################

f_fblog_after=open( os.path.join(context['temp_directory'],'tmp_5273_fblog_after.txt'), 'w')
svc_get_fb_log( engine, f_fblog_after )
f_fblog_after.close()


# STDERR for ISQL (that created DB) and trace session - they both must be EMPTY:
#################
f_list=[f_create_db_err, f_trcerr]
for i in range(len(f_list)):
   f_name=f_list[i].name
   if os.path.getsize(f_name) > 0:
       with open( f_name,'r') as f:
           for line in f:
               print("Unexpected STDERR, file "+f_name+": "+line)
       f.close()


# DIFFERENCE in the content of firebird.log should be EMPTY:
####################

oldfb=open(f_fblog_before.name, 'r')
newfb=open(f_fblog_after.name, 'r')

difftext = ''.join(difflib.unified_diff(
    oldfb.readlines(), 
    newfb.readlines()
  ))
oldfb.close()
newfb.close()

f_diff_txt=open( os.path.join(context['temp_directory'],'tmp_5273_diff.txt'), 'w')
f_diff_txt.write(difftext)
f_diff_txt.close()

with open( f_diff_txt.name,'r') as f:
    for line in f:
        print("Unexpected DIFF in firebird.log: "+line)
f.close()

#####################################################################
# Cleanup:

f_list=[f_create_db_sql, f_create_db_log, f_create_db_err, f_trccfg, f_trclst, f_trclog, f_trcerr,f_fblog_before,f_fblog_after,f_diff_txt]

for i in range(len(f_list)):
    if os.path.isfile(f_list[i].name):
        os.remove(f_list[i].name)

if os.path.isfile(tmpfdb1):
    os.remove(tmpfdb1)

  """,
 'expected_stdout': 
  """
  """,
 'expected_stderr': 
  """
  """
}
]
}
