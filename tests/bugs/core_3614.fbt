{
'id': 'bugs.core_3614',
'qmid': None,
'tracker_id': 'CORE-3614',
'title': 'Plan returned for query with recursive CTE return wrong count of parenthesis',
'description':
 """
 """,
'min_versions': '3.0.0',
'versions': [
{
 'firebird_version': '3.0',
 'platform': 'All',
 'init_script':
  """
    recreate table test_tree(
        id integer not null,
        id_header integer,
        constraint pk_test_tree__id primary key (id)
    );

    create index ixa_test_tree__id_header on test_tree (id_header);
    commit;

    insert into test_tree values ('1', null);
    insert into test_tree values ('2', null);
    insert into test_tree values ('3', null);
    insert into test_tree values ('4', '1');
    insert into test_tree values ('5', '4');
    insert into test_tree values ('6', '2');
    commit;
  """,
 'test_type': 'Python',
 'test_script':
  """
import os
import subprocess
import time

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

sql='''
    set planonly;
    with recursive
    r_tree as
    (
        select tt.id as a, cast(tt.id as varchar(100)) as asum
        from test_tree tt
        where tt.id_header is null

        union all
         
        select tt.id as a, rt.asum || '_' || tt.id
        from test_tree tt join r_tree rt on rt.a = tt.id_header
    )
    select *
    from r_tree rt2  join test_tree tt2 on tt2.id=rt2.a
    ;
'''
f_isql_cmd=open( os.path.join(context['temp_directory'],'tmp_isql_3614.sql'), 'w')
f_isql_cmd.write(sql)
f_isql_cmd.close()

f_isql_log=open( os.path.join(context['temp_directory'],'tmp_isql_3614.log'), 'w')

subprocess.call( ['isql', dsn, '-i', f_isql_cmd.name], stdout=f_isql_log, stderr=subprocess.STDOUT)

f_isql_log.close()

# Let buffer be flushed on disk before we open log and parse it:
time.sleep(1)

# For every line which contains word 'PLAN' we count number of '(' and ')' occurences: they must be equal.
# We display difference only when it is not so, thus 'expected_stdout' section must be EMPTY.
with open( f_isql_log.name,'r') as f:
    for line in f:
        if 'PLAN' in line and line.count( '(' ) - line.count( ')' ) != 0:
            print(  'Difference in opening vs close parenthesis: ' + str( line.count( '(' ) - line.count( ')' ) )  )
f.close()

os.remove(f_isql_cmd.name)
os.remove(f_isql_log.name)

  """,
 'expected_stdout': 
  """
  """,
 'expected_stderr': 
  """
  """
}
]
}
