{
'id': 'bugs.core_3168',
'qmid': None,
'tracker_id': 'CORE-3168',
'title': "exclude_filter doesn't work for <services></section> section of the Trace facility",
'description': """###   W A R N I N G   ###
1) This test uses async. calls of external routine (fbsvcmgr) with opening it in separate command window,
   see: subprocess.call('start /min cmd /c ...', shell=True).
2) It was encountered that launching trace session by FBSVCMGR requires 1-2 seconds to be finished,
   so this test intentionally uses delay (see calls `time.sleep()`).
3) Correct work was checked on: WI-V2.5.5.26916 (SS, SC) and WI-V3.0.0.31948 (SS, SC, CS)
""",
'min_versions': '2.5.0',
'versions': [
{
 'firebird_version': '2.5',
 'platform': 'Windows',
 'test_type': 'Python',
 'init_script':
  """
  """,
 'test_script':
  """import os
import subprocess
import time

db_conn.close()
# format in 3.0 differ: services { ... }
txt = '''# Generated auto, do not edit!
<services>
   enabled true
   log_services true

   # This should prevent appearance of messages like "List Trace Session(s)" or "Start Trace Session(s)":
   exclude_filter "%(List|LIST|list|Start|START|start)[[:WHITESPACE:]]+(Trace|TRACE|trace)[[:WHITESPACE:]]+(Session|SESSION|session)%"

   # This should work even if we filter out messages about list/start trace session(s)
   # (and test also check corret work of THIS filter beside previous `exclude`):
   include_filter "Database Stats"
</services>
'''
trccfg=open( os.path.join(context['temp_directory'],'tmp_trace_3168.cfg'), 'w')
trccfg.write(txt)
trccfg.close()
trclog=open( os.path.join(context['temp_directory'],'tmp_trace_3168.log'), 'w')
trclog.close()
trclst=open( os.path.join(context['temp_directory'],'tmp_trace_3168.lst'), 'w')
trclst.close()

trc_launch='"fbsvcmgr localhost:service_mgr user SYSDBA password masterkey action_trace_start trc_cfg %s 1>%s 2>&1"' % (trccfg.name, trclog.name )

# Launch program in separate (new) window via START command:
subprocess.call('start /min cmd /c %s' % trc_launch, shell=True)

# Wait! Trace session is initialized not instantly!
time.sleep(2)

# Retrieve DB statistics via SERVICES: message about this action should appear in trace log
# (will be checked below in expected_stdout):
runProgram('fbsvcmgr',['localhost:service_mgr','user','SYSDBA','password','masterkey','action_db_stats','dbname','$(DATABASE_LOCATION)bugs.core_3168.fdb','sts_hdr_pages'])

# Save active trace session info into file for further parsing it and obtain session_id back (for stop):
svc_launch='"fbsvcmgr localhost:service_mgr user SYSDBA password masterkey action_trace_list 1>%s 2>&1"' % trclst.name
subprocess.call('cmd /c %s' % svc_launch)

trcssn=0
with open( trclst.name,'r') as f:
    for line in f:
        i=1
        if 'Session ID' in line:
            for word in line.split():
                if i==3:
                    trcssn=word
                i=i+1
            break

# Result: `trcssn` is ID of active trace session. Now we have to terminate it:
runProgram('fbsvcmgr', ['localhost:service_mgr','user','SYSDBA','password','masterkey','action_trace_stop','trc_id',trcssn])

time.sleep(1)

# Repeat: check that this trace session really have been terminated:
runProgram('fbsvcmgr', ['localhost:service_mgr','user','SYSDBA','password','masterkey','action_trace_list'])

# Output log of trace for comparing it with expected.
# ::: NB ::: Content if trace log is converted to UPPER case in order to reduce change of mismatching with
# updated trace output in some future versions:

with open( trclog.name,'r') as f:
    print(f.read().upper())
f.close()

if os.path.isfile(trccfg.name):
    os.remove(trccfg.name)
if os.path.isfile(trclst.name):
    os.remove(trclst.name)
if os.path.isfile(trclog.name):
    os.remove(trclog.name)
  """,
 'expected_stdout': 
  """
    DATABASE STATS
  """,
 'expected_stderr': 
  """
  """,
  'substitutions': [
    ('^((?!ERROR|ELEMENT|(START|LIST) TRACE SESSION|DATABASE STATS).)*$',''),
    ('"DATABASE STATS"','DATABASE STATS')
  ]
},
{
 'firebird_version': '3.0',
 'platform': 'Windows',
 'test_type': 'Python',
 'init_script':
  """
  """,
 'test_script':
  """import os
import subprocess
import time

db_conn.close()
# ::: NB ::: Terace config file format in 3.0 differs from 2.5 one:
# 1) header section must be enclosed in "[" and "]",
# 2) parameter-value pairs must be separated with '=' sign:
#    services
#    {
#      parameter =  value
#    }
txt = '''# Generated auto, do not edit!
services
{
   enabled = true
   log_services = true

   # This should prevent appearance of messages like "List Trace Session(s)" or "Start Trace Session(s)":
   exclude_filter = "%(List|LIST|list|Start|START|start)[[:WHITESPACE:]]+(Trace|TRACE|trace)[[:WHITESPACE:]]+(Session|SESSION|session)%"

   # This should work even if we filter out messages about list/start trace session(s)
   # (and test also check corret work of THIS filter beside previous `exclude`):
   include_filter = "Database Stats"
}
'''
trccfg=open( os.path.join(context['temp_directory'],'tmp_trace_3168.cfg'), 'w')
trccfg.write(txt)
trccfg.close()
trclog=open( os.path.join(context['temp_directory'],'tmp_trace_3168.log'), 'w')
trclog.close()
trclst=open( os.path.join(context['temp_directory'],'tmp_trace_3168.lst'), 'w')
trclst.close()

trc_launch='"fbsvcmgr localhost:service_mgr user SYSDBA password masterkey action_trace_start trc_cfg %s 1>%s 2>&1"' % (trccfg.name, trclog.name )

# Launch program in separate (new) window via START command:
subprocess.call('start /min cmd /c %s' % trc_launch, shell=True)

# Wait! Trace session is initialized not instantly!
time.sleep(2)

# Retrieve DB statistics via SERVICES: message about this action should appear in trace log
# (will be checked below in expected_stdout):
runProgram('fbsvcmgr',['localhost:service_mgr','user','SYSDBA','password','masterkey','action_db_stats','dbname','$(DATABASE_LOCATION)bugs.core_3168.fdb','sts_hdr_pages'])

# Save active trace session info into file for further parsing it and obtain session_id back (for stop):
svc_launch='"fbsvcmgr localhost:service_mgr user SYSDBA password masterkey action_trace_list 1>%s 2>&1"' % trclst.name
subprocess.call('cmd /c %s' % svc_launch)

trcssn=0
with open( trclst.name,'r') as f:
    for line in f:
        i=1
        if 'Session ID' in line:
            for word in line.split():
                if i==3:
                    trcssn=word
                i=i+1
            break

# Result: `trcssn` is ID of active trace session. Now we have to terminate it:
runProgram('fbsvcmgr', ['localhost:service_mgr','user','SYSDBA','password','masterkey','action_trace_stop','trc_id',trcssn])

time.sleep(1)

# Repeat: check that this trace session really have been terminated:
runProgram('fbsvcmgr', ['localhost:service_mgr','user','SYSDBA','password','masterkey','action_trace_list'])

# Output log of trace for comparing it with expected.
# ::: NB ::: Content if trace log is converted to UPPER case in order to reduce change of mismatching with
# updated trace output in some future versions:

with open( trclog.name,'r') as f:
    print(f.read().upper())
f.close()

if os.path.isfile(trccfg.name):
    os.remove(trccfg.name)
if os.path.isfile(trclst.name):
    os.remove(trclst.name)
if os.path.isfile(trclog.name):
    os.remove(trclog.name)
  """,
 'expected_stdout': 
  """
    DATABASE STATS
  """,
 'expected_stderr': 
  """
  """,
  'substitutions': [
    ('^((?!ERROR|ELEMENT|(START|LIST) TRACE SESSION|DATABASE STATS).)*$',''),
    ('"DATABASE STATS"','DATABASE STATS')
  ]
}
]
}
