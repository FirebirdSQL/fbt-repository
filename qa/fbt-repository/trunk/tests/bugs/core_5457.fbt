{
'id': 'bugs.core_5457',
'qmid': None,
'tracker_id': 'CORE-5457',
'title': "Bugcheck 167 (invalid SEND request)",
'description':
 """
     Reproduced on: WI-V3.0.1.32609 - got in firebird.log:
         "internal Firebird consistency check (invalid SEND request (167), file: JrdStatement.cpp line: 325)"
     On client side got:
         DatabaseError:
         Error while rolling back transaction:
         - SQLCODE: -902
         - internal Firebird consistency check (can't continue after bugcheck)
         -902
         335544333

     Test extracts content of firebird.log, then runs scenario which earlier led to "invalid SEND request (167)"
     and then again get firebird.log for comparing with its previous content.
     The only new record in firebird.log must be:
         "Modifying procedure SP_CALC_VAL which is currently in use by active user requests"
     Checked on:
         fb30Cs, build 3.0.4.32972: OK, 2.984s.
         FB30SS, build 3.0.4.32988: OK, 3.047s.
         FB40CS, build 4.0.0.955: OK, 4.531s.
         FB40SS, build 4.0.0.1008: OK, 3.141s.

 """,
'min_versions': '3.0.2',
'versions': [
{
 'firebird_version': '3.0',
 'platform': 'All',
 'test_type': 'Python',
 'test_script': 
  """
import os
import sys
import subprocess
import difflib
import re
import time
from fdb import services

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password
db_conn.close()


fb_home = services.connect(host='localhost', user= user_name, password= user_password).get_home_directory()
# Resut: fb_home is full path to FB instance home (with trailing slash).
#################################################################################################

def svc_get_fb_log( fb_home, f_fb_log ):

  global subprocess

  subprocess.call( [ fb_home + "fbsvcmgr",
                     "localhost:service_mgr",
                     "action_get_fb_log"
                   ],
                   stdout=f_fb_log, stderr=subprocess.STDOUT
                 )
  return

###########################################################################################

f_fblog_before=open( os.path.join(context['temp_directory'],'tmp_5457_fblog_before.txt'), 'w')
svc_get_fb_log( fb_home, f_fblog_before )
f_fblog_before.close()


con1=fdb.connect(dsn = dsn)

sp_test_ddl='''create procedure sp_calc_val(a_id int) returns(val int) as
begin
   val = a_id * 10;
   suspend;
end
'''
test_table_ddl='''create table test(
    id int primary key, 
    txt varchar(80), 
    calc_val computed by ( (select val from sp_calc_val(test.id) ) )
)
'''
con1.execute_immediate(sp_test_ddl)
con1.commit()
con1.execute_immediate(test_table_ddl)
con1.commit()

cur1=con1.cursor()
cur1.execute('insert into test select row_number()over(), ascii_char( 96+row_number()over() ) from rdb$types rows 7')
con1.commit()


cur1.execute('select count(*), sum(calc_val) from test')
for r in cur1:
    pass;


sp_alter_ddl='''
alter procedure sp_calc_val (a_id int) returns (val int) as 
begin 
    val = a_id * 7; 
    suspend; 
end
'''

con1.execute_immediate(sp_alter_ddl)

cur1.execute('select count(*), sum(calc_val) from test')
for r in cur1:
    pass;
con1.commit()

cur1.execute('select count(*), sum(calc_val) from test')
for r in cur1:
    pass;

time.sleep(1)

f_fblog_after=open( os.path.join(context['temp_directory'],'tmp_5457_fblog_after.txt'), 'w')
svc_get_fb_log( fb_home, f_fblog_after )
f_fblog_after.close()


# Compare firebird.log versions BEFORE and AFTER this test:
######################

oldfb=open(f_fblog_before.name, 'r')
newfb=open(f_fblog_after.name, 'r')

difftext = ''.join(difflib.unified_diff(
    oldfb.readlines(), 
    newfb.readlines()
  ))
oldfb.close()
newfb.close()

f_diff_txt=open( os.path.join(context['temp_directory'],'tmp_5457_diff.txt'), 'w')
f_diff_txt.write(difftext)
f_diff_txt.close()

unexpected_patterns =(
    re.compile('\s+internal\s+Firebird\s+consistency\s+check', re.IGNORECASE),
)

with open( f_diff_txt.name,'r') as f:
    for line in f:
        if line.startswith('+'):
            #print( 'UNEXPECTED TEXT IN FIREBIRD.LOG: ' + (' '.join(line.split()).upper()) )
            match2some = filter( None, [ p.search(line) for p in unexpected_patterns ] )
            if match2some:
                print( 'UNEXPECTED TEXT IN FIREBIRD.LOG: ' + (' '.join(line.split()).upper()) )

# Cleanup:

# do NOT remove this pause otherwise some of logs will not be enable for deletion and test will finish with 
# Exception raised while executing Python test script. exception: WindowsError: 32
time.sleep(1)

f_list=( 
     f_diff_txt
    ,f_fblog_before
    ,f_fblog_after
)

for i in range(len(f_list)):
    if os.path.isfile(f_list[i].name):
        os.remove(f_list[i].name)


  """,
  'expected_stdout':
  """
  """,
  'expected_stderr':
  """
  """
}
]
}
