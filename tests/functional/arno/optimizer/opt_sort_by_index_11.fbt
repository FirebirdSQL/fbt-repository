{
'id': 'functional.arno.optimizer.opt_sort_by_index_11',
'qmid': 'functional.arno.optimizer.opt_sort_by_index_11',
'tracker_id': '',
'title': 'ORDER BY ASC using index (multi)',
'description': 
 """
   ORDER BY X, Y
   When more fields are given in ORDER BY clause try to use a compound index.
   *** NB ***
   Refactored 26-feb-2016: use common .zip archieve with queries for miscelan tests
   related to optimizer set. For this test we extract from this zip only one file 
   ('opt_sort_by_index_11.sql') and run ISQL with passing to it this file.
   ISQL will ouput PLAN of execution and we store it into log.
   Finally, we compare plan with expected string which differ depending on FB version.
 """,
'min_versions': '2.5.0',
'versions': [
{
 'firebird_version': '2.5',
 'platform': 'All',
 'test_type': 'Python',
 'test_script': 
  """
import os
import sys
import time
import subprocess
import zipfile

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

c1 = db_conn.cursor()

c1.execute("select rdb$get_context('SYSTEM','ENGINE_VERSION') as engine_version from rdb$database")
for row in c1:
    engine = row[0]
db_conn.close()

zf = zipfile.ZipFile( os.path.join(context['files_location'],'functional.arno.optimizer.zip ') )
zf.extract('opt_sort_by_index_11.sql', context['temp_directory'] )
zf.close()

# Result: file opt_sort_by_index_11.sql is extracted into context['temp_directory']

f_sql=open( os.path.join(context['temp_directory'],'opt_sort_by_index_11.sql'), 'r')
f_sql.close()

f_log = open( os.path.join(context['temp_directory'],'opt_sort_by_index_11.log'), 'w')

subprocess.call( ["isql", dsn, "-i", f_sql.name],\
                 stdout=f_log, \
                 stderr=subprocess.STDOUT
               )
f_log.close()

time.sleep(1)

plan_25 = 'PLAN (T53 ORDER I_TABLE_53_ID2_ID1_ASC INDEX (I_TABLE_53_ID1_ID2_ASC))'
plan_30 = 'PLAN (T53 ORDER I_TABLE_53_ID2_ID1_ASC)'
with open(f_log.name) as f:
    for line in f:
        if engine.startswith('2.') and line.upper().startswith(plan_25):
            print( 'EXPECTED' )
        if engine.startswith('3.') and line.upper().startswith(plan_30):
            print( 'EXPECTED' )
f.close()

if os.path.isfile(f_log.name):
    os.remove(f_log.name)
if os.path.isfile(f_sql.name):
    os.remove(f_sql.name)

  """,
 'expected_stdout': 
  """
    EXPECTED
  """,
 'expected_stderr': 
  """
  """
}
]
}
