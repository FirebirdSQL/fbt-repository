{
'id': 'functional.tabloid.join-transformation-008',
'qmid': '',
'tracker_id': '',
'title': 'Check ability of outer join simplification.',
'description': 
 """
   For two sources, S and T, which:
   1) are separated by at least one "intermediate" source G (e.g. which is just "after" S and is "before" T), and 
   2) are involved into left join predicate P(S,T) which does not participate in disjunction ("OR"ed) expression
   -- one may to replace all LEFT joins starting from G and up to T with INNER ones.
   Join condition between S and its adjacent datasource (G) should be preserved as it is in original query.
   I can not found strict (theoretical) proof for this statement but lot of my runs of query like below DO comfirm this :-)
 """,
'min_versions': '3.0',
'versions': [
{
 'firebird_version': '3.0',
 'platform': 'All',
 'database': 'Restore',
 'backup_file': 'join-transformations.fbk',
 'test_type': 'ISQL',
 'test_script': 
  """
    execute procedure sp_fill( 20, 20 );
    --                         ^    ^- probability of assign each field on each row to NULL (percent).
    --                         +- number of rows in each of tables t1...t6

    commit;
    execute procedure sp_recalc_idx_stat;
    commit;
    
    set list on;
    set term ^;
    execute block returns(result varchar(50)) as
    begin
        select result
        from sp_run(
            ---------------------- Query-1 (not simplified)
            -- NB: we have to make "padding" of null literals up to 6 fields
            -- if query returns less columns:
            'select a.id, b.id, c.id, d.id, e.id, f.id
            --    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
            --    S                                                            T
            --    |         G                                                  |
            --    v         |                                                  |
            from t1 a --    v                                                  |
                 left join t2 b                                         --     |
                              left join t3 c                            --     |
                                           left join t4 d               --     |
                                                        left join t5 e  --     v
                                                                     left join t6 as f
                                                                     on e.x = f.x -- ^
                                                        on d.u = e.z           --    |
                                           on c.z = d.y                        --    |
                              on b.x = c.y                                     --    |
                 on a.w = f.u'                                                 --    |
                 -- ^     ^                                                    --    |
                 -- |     |                                                    --    |
                 -- S     +--------------------------------------------------------- T
           ,
            ---------------------- Query-2 (simplified and we assume that it ALWAYS produces the same result as Q1)
            'select a.id, b.id, c.id, d.id, e.id, f.id
            from t1 a
                 LEFT -- ::: NB ::: this should NOT be changed, because "t2 b" is "G" in above mentioned notation.
                      join t2 b 
                             inner -- ::: starting from this we can replace LEFT with INNER, up to this
                                  join t3 c                                         --             |
                                          inner join t4 d                           --             |
                                                       inner join t5 e              --             |
                                                                    inner join t6 f -- <------------
                                                                     on e.x = f.x
                                                        on d.u = e.z
                                           on c.z = d.y
                              on b.x = c.y
                 on a.w = f.u'

          , 0 ------------------------------------ nr_total: when 0 then do NOT run sp_fill because we already do have data for checking
        ) into result;

        suspend;

        if ( result not containing 'Passed' ) then
            -- this context variable serves as 'flag' to show 
            -- problematic data (see following EB):
            rdb$set_context('USER_SESSION', 'FAULT', '1'); 
    end
    ^
    execute block returns( failed_on varchar(255) ) as
    begin
        -- When queries are NOT equal on some data then we have to output
        -- rows from all tables in order to reproduce this trouble later:
        if ( rdb$get_context('USER_SESSION', 'FAULT') = '1' ) then
        begin
          for 
              select dml from sp_show_data 
              into failed_on
          do
              suspend;
        end
    end
    ^
    set term ^;


  """,
 'expected_stdout': 
  """
    RESULT                          Passed.
  """,
 'expected_stderr': 
  """
  """
}
]
}
