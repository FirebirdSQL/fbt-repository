{
'id': 'bugs.core_5222',
'qmid': None,
'tracker_id': 'CORE-5222',
'title': "SELECT WITH LOCK may raise unexpected update conflict errors under concurrent load",
'description':
 """
    Prototype: https://groups.yahoo.com/neo/groups/firebird-support/conversations/messages/128920
    Done with suggestions from dimitr, see letter 01-may-2016 09:15.
    Confirmed on WI-V3.0.0.32366 - it was enough to async. start THREE child ISQLs sessions, 
    one of them always raise exception after few seconds with 'deadlock / update conflicts'
    and could not finish its job.

    Checked on: WI-V3.0.0.32503, WI-T4.0.0.157 - works fine.
 """,
'min_versions': '3.0.0',
'versions': [
{
 'firebird_version': '3.0',
 'platform': 'All',
 'test_type': 'Python',
 'init_script':
  """
    create or alter procedure p_increment as begin end;
    commit;
    recreate table gen_tab(
        id bigint primary key
    );
    recreate table gen_log (
        id bigint primary key,
        id_new bigint not null,
        id_diff bigint not null
    );

    set term ^;
    alter procedure p_increment (a_iter_cnt int default 1000) 
    returns (
        proc_start timestamp, 
        selected_id bigint, 
        proc_finish timestamp
    ) as
        declare i bigint;
        declare id_new bigint;
    begin
        i = 1;
        proc_start = 'now';
        while (i <= a_iter_cnt ) do
        begin
            in autonomous transaction do
            begin
                
                select id 
                from gen_tab with lock -- this raised SQLSTATE = 40001 / -update conflicts with concurrent update
                into selected_id;
                i = i + 1;

                id_new = selected_id + 1;
                insert into gen_log(id, id_new, id_diff) 
                            values( :selected_id, :id_new, :id_new - :selected_id);

                update gen_tab set id = :id_new 
                where id = :selected_id;

            end
        end
        proc_finish = 'now';

        suspend;
    end ^
    set term ;^
    commit;

    insert into gen_tab (id) values (0);
    commit;
  """,
 'test_script':
  """\
import os
import time
import subprocess
from subprocess import Popen

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

db_conn.close()


f_run_sql=open( os.path.join(context['temp_directory'],'tmp_5222_run.sql'), 'w')
f_run_sql.write('''\
--show version;
commit; 
set list on;
set transaction read committed no record_version lock timeout 30; 
select current_timestamp as before_proc 
from rdb$database;

execute procedure p_increment;

select current_timestamp as after_proc
from rdb$database;
''')
f_run_sql.close()

##########################################################################################
#  Launching several concurrent child ISQL processes which perform script from `f_run_sql`
##########################################################################################
planned_dml_attachments = 3

f_list = []
p_list = []


for i in range(0, planned_dml_attachments):
    sqllog=open( os.path.join(context['temp_directory'],'tmp_dml_5222_'+str(i)+'.log'), 'w')
    f_list.append(sqllog)

for i in range(len(f_list)):
    p_isql=Popen( [ "isql" , dsn, "-i", f_run_sql.name ], \
                  stdout=f_list[i], \
                  stderr=subprocess.STDOUT \
                )
    p_list.append(p_isql)

time.sleep(20)

for i in range(len(f_list)):
    f_list[i].close()

for i in range(len(p_list)):
    p_list[i].terminate()

          

###########################
# CHECK RESULTS and CLEANUP
###########################

# 1. Each log _should_ contain ONLY following lines: 
#    BEFORE_PROC                     2016-05-03 09:27:57.6210
#    PROC_START                      2016-05-03 09:27:57.6210
#    SELECTED_ID                     1569
#    PROC_FINISH                     2016-05-03 09:28:04.0740
#    AFTER_PROC                      2016-05-03 09:28:04.0740
# 2. _NO_ log should contain 'SQLSTATE = 40001'

# Open every log and print 1st word from each line, ignoring values of timestamp and ID.
# Then close log and remove it:
for i in range(len(f_list)):
    with open( f_list[i].name, 'r') as f:
        for line in f:
            if line.split():
                print( 'LOG #'+str(i)+': '+line.split()[0] )
    f.close()
    os.remove(f_list[i].name)

os.remove(f_run_sql.name)

  """,
 'expected_stdout': 
  """
    LOG #0: BEFORE_PROC
    LOG #0: PROC_START
    LOG #0: SELECTED_ID
    LOG #0: PROC_FINISH
    LOG #0: AFTER_PROC
    LOG #1: BEFORE_PROC
    LOG #1: PROC_START
    LOG #1: SELECTED_ID
    LOG #1: PROC_FINISH
    LOG #1: AFTER_PROC
    LOG #2: BEFORE_PROC
    LOG #2: PROC_START
    LOG #2: SELECTED_ID
    LOG #2: PROC_FINISH
    LOG #2: AFTER_PROC
  """,
 'expected_stderr': 
  """
  """
}
]
}
