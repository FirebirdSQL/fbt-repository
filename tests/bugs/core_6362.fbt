{
'id': 'bugs.core_6362',
'qmid': '',
'tracker_id': 'CORE-6362',
'title': "Better diagnostic when 'Missing security context'",
'description': 
 """
    ::: NB :::
    List of AuthClient plugins must contain Win_Sspi in order to reproduce this test expected results.
    Otherwise firebird.log will not contain any message like "Available context(s): ..."

    Checked on 4.0.0.2119 (SS/CS): OK.
 """,
'min_versions': '4.0',
'versions': [
{
 'firebird_version': '4.0',
 'platform': 'All',
 'init_script':
  """
  """,
 'test_type': 'Python',
 'test_script': 
  """
import os
import subprocess
import re
import difflib
from fdb import services
import time

os.unsetenv("ISC_USER")
os.unsetenv("ISC_PASSWORD")
db_conn.close()

fb_home = services.connect(host='localhost', user= user_name, password= user_password).get_home_directory()

#-----------------------------------

def flush_and_close(file_handle):
    # https://docs.python.org/2/library/os.html#os.fsync
    # If you're starting with a Python file object f, 
    # first do f.flush(), and 
    # then do os.fsync(f.fileno()), to ensure that all internal buffers associated with f are written to disk.
    global os
    
    file_handle.flush()
    os.fsync(file_handle.fileno())

    file_handle.close()

#--------------------------------------------

def cleanup( f_names_list ):
    global os
    for i in range(len( f_names_list )):
       if os.path.isfile( f_names_list[i]):
            os.remove( f_names_list[i] )
            if os.path.isfile( f_names_list[i]):
                print('ERROR: can not remove file ' + f_names_list[i])

#--------------------------------------------

def svc_get_fb_log( fb_home, f_fb_log ):

  global subprocess
  subprocess.call( [ fb_home + "fbsvcmgr",
                     "localhost:service_mgr",
                     "user", user_name,
                     "password", user_password,
                     "action_get_fb_log"
                   ],
                   stdout=f_fb_log, stderr=subprocess.STDOUT
                 )
  return

#--------------------------------------------

# Get FB log *before* unsuccessful attempt to obtain server version:
#####################

f_fblog_before=open( os.path.join(context['temp_directory'],'tmp_6362_fblog_before.txt'), 'w')
svc_get_fb_log( fb_home, f_fblog_before )
flush_and_close( f_fblog_before )

f_log=open( os.path.join(context['temp_directory'],'tmp_6362_info_server.log'), 'w')
f_err=open( os.path.join(context['temp_directory'],'tmp_6362_info_server.err'), 'w')

# This must FAIL because we do not specify user/password pair and there absent in OS env.:
################
subprocess.call( ['fbsvcmgr', 'localhost:service_mgr', 'info_server_version'], stdout=f_log, stderr=f_err )
flush_and_close( f_log )
flush_and_close( f_err )

# Get FB log *after* unsuccessful attempt to obtain server version:
####################
f_fblog_after=open( os.path.join(context['temp_directory'],'tmp_6362_fblog_after.txt'), 'w')
svc_get_fb_log( fb_home, f_fblog_after )
flush_and_close( f_fblog_after )

old_fb_log=open(f_fblog_before.name, 'r')
new_fb_log=open(f_fblog_after.name, 'r')

fb_log_diff = ''.join(difflib.unified_diff(
    old_fb_log.readlines(), 
    new_fb_log.readlines()
  ))
old_fb_log.close()
new_fb_log.close()


f_diff=open( os.path.join(context['temp_directory'],'tmp_6362_fblog_diff.txt'), 'w')
f_diff.write(fb_log_diff)
flush_and_close( f_diff )

# Missing security context required for C:\FB\40SS\SECURITY4.FDB
# Available context(s): USER IMAGE-PC1\PASHAZ plugin Win_Sspi

allowed_patterns = (
     re.compile('Missing\s+security\s+context\.*', re.IGNORECASE)
    ,re.compile('Available context\.*', re.IGNORECASE)
)

with open( f_diff.name,'r') as f:
    for line in f:
        if line.startswith('+'):
            match2some = filter( None, [ p.search(line) for p in allowed_patterns ] )
            if match2some:
                print( line.upper() )
# Cleanup.
##########
f_list = [ i.name for i in (f_log, f_err, f_fblog_before, f_fblog_after, f_log, f_err, f_diff) ]
cleanup( f_list )


  """,
 'expected_stdout':
  """
     + MISSING SECURITY CONTEXT REQUIRED FOR <FULL-NAME-OF-SECURITY-DB>
     + AVAILABLE CONTEXT(S): USER <THIS_COMPUTER>\<WHOAMI> PLUGIN WIN_SSPI
  """,
 'expected_stderr':
  """
  """,
 'substitutions': [
     ('[ \t]+',' '),
     ('MISSING SECURITY CONTEXT REQUIRED.*', 'MISSING SECURITY CONTEXT REQUIRED'),
     ('AVAILABLE CONTEXT.*', 'AVAILABLE CONTEXT')
  ]
},
]
}
