{
'id': 'functional.datatypes.decfloat-scalar-functions',
'qmid': None,
'tracker_id': 'CORE-5535',
'title': 
 """
   Test common math functions that should work with DECFLOAT datatype.
   4.0.0.680: OK, 0.891s.
   4.0.0.651: FAILED on SIGN() with:
       Statement failed, SQLSTATE = 22003
       Decimal float overflow.  The exponent of a result is greater than the magnitude allowed.
 """,
'description': 
 """
    See CORE-5535 and doc\sql.extensions\README.data_types:
    ---
        A number of standard functions can be used with DECFLOAT datatype. It is:
        ABS, CEILING, EXP, FLOOR, LN, LOG, LOG10, POWER, SIGN, SQRT.
    ---
 """,
'min_versions': '4.0.0',
'versions': [
{
 'firebird_version': '4.0',
 'platform': 'All',
 'test_type': 'ISQL',
 'test_script': 
  """
    set list on;

    with c as (
        select
            -123456789012345678901234567890.123 as n1
        from rdb$database
    )
    select n1 from c
    union all
    select abs(n1) from c
    union all
    select ceiling(n1) from c
    union all
    select floor(n1) from c
    union all
    select ceiling(abs(n1)) from c
    union all
    select floor(abs(n1)) from c
    ;

    with c as (
        select
n1
n1
        from rdb$database
    )
    select n1 from c
    union all
    select ln(n1) from c
    union all
    select exp(ln(n1)) from c
    union all
    select log10(n1) from c
    union all
    select power(n1,-1.0000000000/log10(n1)) from c
    union all
    select sqrt(n1) from c
    union all
    select sign(-n1) from c -- added 25.06.2017
    ;


  """,
  'expected_stdout':
  """
    N1                                     -123456789012345678901234567890.123
    N1                                      123456789012345678901234567890.123
    N1                                         -123456789012345678901234567890
    N1                                         -123456789012345678901234567891
    N1                                          123456789012345678901234567891
    N1                                          123456789012345678901234567890


    N1                               1.000000000000000000000000000000000E+1024
    N1                                     2357.847135225902780434423249596789
    N1                               9.999999999999999999999999999996197E+1023
    N1                                                                    1024
    N1                                    0.1000000000000000000000000000000000
    N1                                                1.00000000000000000E+512
    N1                                                                      -1
  """,
  'expected_stderr':
  """
  """
}
]
}
