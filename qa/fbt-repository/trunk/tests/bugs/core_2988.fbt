{
'id': 'bugs.core_2988',
'qmid': None,
'tracker_id': 'CORE-2988',
'title': 'Concurrent transaction number not reported if lock timeout occurs',
'description':
 """
     08-aug-2018.
     ::: ACHTUNG :::
     Important change has been added in FB 4.0.
     According to doc\README.read_consistency.md, read committed isolation level
     was modified and new transaction with RC effectively is launched like:
     SET TRANSACTION READ COMMITTED READ CONSISTENCY
     Moreover, it is unable to start transaction in NO_record_version until
     config parameter ReadConsistency will be changed from 1(default) to 0.
     This mean that now it is unable to use NO_record_version setting in RC mode
     with default firebird.conf ==> we can not check behaviour of engine exactly
     as ticket says in its case-1:
     ===
         set transaction read committed no record_version lock timeout 10;
         select * from test; 
     ===
     For this reason it was decided to create separate section for major version 4.0
     and use UPDATE statement instead of 'select * from test' (UPDATE also must READ 
     data before changing).

     Checked on:
         FB25SC, build 2.5.9.27115: OK, 3.750s.
         FB30SS, build 3.0.4.33022: OK, 4.343s.
         FB40SS, build 4.0.0.1154: OK, 4.875s.
 """,
'min_versions': '2.5.4',
'versions': [
{
 'firebird_version': '2.5',
 'platform': 'All',
 'test_type': 'ISQL',
 'init_script':
  """
  """,
 'test_script':
  """
    drop user tmp$2988;
    commit;
    create user tmp$2988 password 'tmp$2988';
    commit;
    
    recreate table test (id integer);
    insert into test values(1);
    commit;

    revoke all on all from tmp$2988;
    grant select,update on test to tmp$2988;
    commit;

    set transaction lock timeout 1;
    update test set id = id;
    
    set term ^;
    execute block as
        declare v_usr char(31) = 'tmp$2988';
        declare v_pwd varchar(20) = 'tmp$2988';
        declare v_connect varchar(255);
        declare v_dummy int;
    begin
        execute statement ('update test set id = -1')
        with autonomous transaction
        as user v_usr password v_pwd
        into v_dummy;
    end
    ^
    set term ;^
    rollback;
    
    set transaction read committed no record_version lock timeout 1;
    update test set id = id;
    
    set term ^;
    execute block as
        declare v_usr char(31) = 'tmp$2988';
        declare v_pwd varchar(20) = 'tmp$2988';
        declare v_connect varchar(255);
        declare v_dummy int;
    begin
        execute statement ('select id from test')
        with autonomous transaction
        as user v_usr password v_pwd
        into v_dummy;
    end
    ^
    set term ;^
    rollback;
    
    set list on;
    set transaction read committed no record_version lock timeout 1;
    select id from test with lock;
    
    set term ^;
    execute block as
        declare v_usr char(31) = 'tmp$2988';
        declare v_pwd varchar(20) = 'tmp$2988';
        declare v_connect varchar(255);
        declare v_dummy int;
    begin
        execute statement ('select id from test with lock')
        with autonomous transaction
        as user v_usr password v_pwd
        into v_dummy;
    end
    ^
    set term ;^

    drop user tmp$2988;
    commit;
  """,
 'expected_stdout': 
  """
    ID                              1
  """,
 'expected_stderr': 
  """
    Statement failed, SQLSTATE = HY000
    record not found for user: TMP$2988
    Warning: ALL on ALL is not granted to TMP$2988.
    Statement failed, SQLSTATE = 40001
    lock time-out on wait transaction
    -deadlock
    -update conflicts with concurrent update
    -concurrent transaction number is 127
    -At block line: 7, col: 9

    Statement failed, SQLSTATE = 40001
    lock time-out on wait transaction
    -deadlock
    -concurrent transaction number is 130
    -At block line: 7, col: 9

    Statement failed, SQLSTATE = 40001
    lock time-out on wait transaction
    -deadlock
    -concurrent transaction number is 133
    -At block line: 7, col: 9
  """,
  'substitutions': [
    ('record not found for user:.*',''),
    ('-concurrent transaction number is.*','-concurrent transaction number is'),
    ('-At block line: [\d]+, col: [\d]+', '-At block line')

  ]
},
{
 'firebird_version': '3.0',
 'platform': 'All',
 'test_type': 'ISQL',
 'init_script':
  """
  """,
 'test_script':
  """
    drop user tmp$2988;
    commit;
    create user tmp$2988 password 'tmp$2988';
    commit;
    
    recreate table test (id integer);
    insert into test values(1);
    commit;

    revoke all on all from tmp$2988;
    grant select,update on test to tmp$2988;
    commit;

    set transaction lock timeout 1;
    update test set id = id;
    
    set term ^;
    execute block as
        declare v_usr char(31) = 'tmp$2988';
        declare v_pwd varchar(20) = 'tmp$2988';
        declare v_connect varchar(255);
        declare v_dummy int;
    begin
        execute statement ('update test set id = -1')
        with autonomous transaction
        as user v_usr password v_pwd
        into v_dummy;
    end
    ^
    set term ;^
    rollback;
    
    set transaction read committed no record_version lock timeout 1;
    update test set id = id;
    
    set term ^;
    execute block as
        declare v_usr char(31) = 'tmp$2988';
        declare v_pwd varchar(20) = 'tmp$2988';
        declare v_connect varchar(255);
        declare v_dummy int;
    begin
        execute statement ('select id from test')
        with autonomous transaction
        as user v_usr password v_pwd
        into v_dummy;
    end
    ^
    set term ;^
    rollback;
    
    set list on;
    set transaction read committed no record_version lock timeout 1;
    select id from test with lock;
    
    set term ^;
    execute block as
        declare v_usr char(31) = 'tmp$2988';
        declare v_pwd varchar(20) = 'tmp$2988';
        declare v_connect varchar(255);
        declare v_dummy int;
    begin
        execute statement ('select id from test with lock')
        with autonomous transaction
        as user v_usr password v_pwd
        into v_dummy;
    end
    ^
    set term ;^

    drop user tmp$2988;
    commit;
  """,
 'expected_stdout': 
  """
    ID                              1
  """,
 'expected_stderr': 
  """
    Statement failed, SQLSTATE = HY000
    record not found for user: TMP$2988
    Warning: ALL on ALL is not granted to TMP$2988.
    Statement failed, SQLSTATE = 40001
    deadlock
    -update conflicts with concurrent update
    -concurrent transaction number is 18
    -At block line: 7, col: 9

    Statement failed, SQLSTATE = 40001
    deadlock
    -read conflicts with concurrent update
    -concurrent transaction number is 21
    -At block line: 7, col: 9

    Statement failed, SQLSTATE = 40001
    deadlock
    -read conflicts with concurrent update
    -concurrent transaction number is 24
    -At block line: 7, col: 9
  """,
  'substitutions': [
    ('record not found for user:.*',''),
    ('-concurrent transaction number is.*','-concurrent transaction number is'),
    ('-At block line: [\d]+, col: [\d]+', '-At block line')
  ]
},
{
 'firebird_version': '4.0',
 'platform': 'All',
 'test_type': 'Python',
 'init_script':
  """
    create table test(id int, x int, constraint test_pk primary key(id) using index test_pk);
    commit;
    insert into test(id, x) values(1, 111);
    commit;
  """,
 'test_script':
  """
import os
db_conn.close()

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password

con = fdb.connect(dsn = dsn)

tx1 = con.trans() 
tx1.begin()
cur1=tx1.cursor()
cur1.execute( 'update test set x = ? where id = ?', (222, 1) )


# **INSTEAD** of ticket case-1:
#     set transaction read committed no record_version lock timeout N;
# -- we start Tx with lock_timeout using custom TPB and try just to **update** record which is locked now
# (but NOT 'SELECT ...'! It is useless with default value of confign parameter ReadConsistency = 1).
# Message about concurrent transaction (which holds lock) in any case must appear in exception text.
# NB: NO_rec_version is USELESS in default FB 4.0 config!


# Linsk to doc for creating instance of custom TPB and start transaction which using it:
# https://pythonhosted.org/fdb/reference.html#fdb.TPB
# https://pythonhosted.org/fdb/reference.html#fdb.Connection.trans

custom_tpb = fdb.TPB()
custom_tpb.access_mode = fdb.isc_tpb_write
custom_tpb.isolation_level = (fdb.isc_tpb_read_committed, fdb.isc_tpb_rec_version) # ::: NB ::: NO_rec_version is USELESS in default FB 4.0 config!
custom_tpb.lock_timeout = 1

tx2 = con.trans( default_tpb = custom_tpb ) 
tx2.begin()
cur2=tx2.cursor()

try:
    cur2.execute( 'update test set x = ? where id = ?', (333, 1) )
except Exception,e:
    print('Exception in cur2:')
    print( '-'*30 )
    for x in e:
        print(x)
    print( '-'*30 )
finally:
    tx2.commit()

#----------------------------------------------------------

# This is for ticket case-2:
#     set transaction read committed lock timeout N;
#     select * from test with lock; 

custom_tpb.access_mode = fdb.isc_tpb_write
custom_tpb.isolation_level = fdb.isc_tpb_concurrency
custom_tpb.lock_timeout = 1

tx3 = con.trans( default_tpb = custom_tpb ) 
tx3.begin()
cur3=tx3.cursor()

try:
    cur3.execute( 'select x from test where id = ? with lock', (1,) )
    for r in cur3:
        print( r[0] )
except Exception,e:
    print('Exception in cur3:')
    print( '-'*30 )
    for x in e:
        print(x)
    print( '-'*30 )
finally:
    tx3.commit()

tx1.commit()
con.close()

  """,
 'expected_stdout': 
  """
    - concurrent transaction number is 13
    - concurrent transaction number is 13
  """,
 'expected_stderr': 
  """
  """,
  'substitutions': [ ('^((?!concurrent transaction number is).)*$','') ]

}
]
}
