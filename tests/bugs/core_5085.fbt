{
'id': 'bugs.core_5085',
'qmid': '',
'tracker_id': 'CORE-5085',
'title': 'Allow to fixup (nbackup) database via Services API',
'description': 
 """
    Checked on 4.0.0.2119: OK.
 """,
'min_versions': '4.0',
'versions': [
{
 'firebird_version': '4.0',
 'platform': 'All',
 'init_script':
  """
  """,
 'test_type': 'Python',
 'test_script': 
  """
import os
import subprocess

os.environ["ISC_USER"] = user_name
os.environ["ISC_PASSWORD"] = user_password
db_conn.close()

db_source='$(DATABASE_LOCATION)bugs.core_5085.fdb'
db_delta = db_source +'.delta'
nbk_level_0='$(DATABASE_LOCATION)tmp_core_5085.nbk_00'

#--------------------------------------------

def cleanup( f_names_list ):
    global os
    for i in range(len( f_names_list )):
       if os.path.isfile( f_names_list[i]):
            os.remove( f_names_list[i] )
            if os.path.isfile( f_names_list[i]):
                print('ERROR: can not remove file ' + f_names_list[i])

#--------------------------------------------

cleanup( ( db_delta, nbk_level_0, ) )

# 1. Create standby copy: make clone of source DB using nbackup -b 0:
########################
f_nbk0_log=open( os.path.join(context['temp_directory'],'tmp_nbk0_5085.log'), 'w')
f_nbk0_err=open( os.path.join(context['temp_directory'],'tmp_nbk0_5085.err'), 'w')
subprocess.call( ['nbackup', '-L', db_source], stdout=f_nbk0_log, stderr=f_nbk0_err )
subprocess.call( ['fbsvcmgr', 'service_mgr', 'action_nfix', 'dbname', db_source], stdout=f_nbk0_log, stderr=f_nbk0_err )
f_nbk0_log.close()
f_nbk0_err.close()

# test connect to ensure that all OK after fixup:
##############
con=fdb.connect(dsn = dsn)
cur=con.cursor()
cur.execute('select mon$backup_state from mon$database')
for r in cur:
    print(r[0])
cur.close()
con.close()

# Check. All of these files must be empty:
###################################
f_list=(f_nbk0_log, f_nbk0_err)
for i in range(len(f_list)):
    with open( f_list[i].name,'r') as f:
        for line in f:
            if line.split():
                print( 'UNEXPECTED output in file '+f_list[i].name+': '+line.upper() )

# Cleanup.
##########
f_list = [ i.name for i in (f_nbk0_log,f_nbk0_err) ] + [db_delta, nbk_level_0]
cleanup( f_list )

  """,
 'expected_stdout':
  """
    0
  """,
 'expected_stderr':
  """
  """
},
]
}
