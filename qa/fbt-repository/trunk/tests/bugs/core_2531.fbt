{
'id': 'bugs.core_2531',
'qmid': None,
'tracker_id': 'CORE-2531',
'title': 'The famous "cannot transliterate" error may be thrown when selecting data from the monitoring tables',
'description': 
 """
   In order to check issues of ticket we have to create Python script which is encoded in non-ascii codepage and also
   its codepage should be NON utf8 (choosed: Windows 1252). This is because all .fbt files have to be encoded only in UTF8,
   so we can not put inside .fbt a statement which contains non-ascii SINGLE-BYTE characters.
   
   Character |å|, "LATIN SMALL LETTER A WITH RING ABOVE",  was selected in order to verify ticket issue, see:
   http://www.fileformat.info/info/unicode/char/00e5/index.htm
   
   Temporary Python file ("tmp_2531_run.py") will contain encoding statement ('# coding: latin-1') followed by commands for:
   1) make first attachment to database, by Python itself, with charset = Win1252, with preparing: "select 'gång' from rdb$database";
      also, this attachments SAVES string of this query into table (NOTE: it works with charset = win1252);
   2) make second attachment by ISQL, with charset = utf8, which will query mon$statements.mon$sql_text - this should return query
      which has been prepared by first attachment. This query is compared to that which was stored into table by attachment-1,
      and these rows should be equal: |select 'gång' from rdb$database|
   
   Confirmed wrong (incompleted) output of mon$sql_text on 2.1.0.17798 (but there is no "cannot transliterate" error):
   ===
        select 'gång: ' || current_timestamp from rdb$database                                                                                                                                                                                                                                                                          
        select 'g   
                 ^^^
                  |
                  +--- three white-spaces here (after 'g')
   ===    
   No such effect on builds >= 2.1.3.18185.

   Refactored 08-may-2067: replaced buggy "folder.replace()" with bulk of backslashes ("\") with locals() usage.
   Checked again on Classic for: WI-V3.0.2.32708, WI-T4.0.0.633 
   (added expression to WHERE-block to filter out record from mon$statements with RDB$AUTH_MAPPING data).

 """,
'min_versions': '2.5.0',
'versions': [
{
 'firebird_version': '2.5',
 'platform': 'All',
 'connection_character_set': 'UTF8',
 'init_script': 
  """
     recreate table non_ascii(sql varchar(80) character set utf8);
  """,
 'test_type': 'Python',
 'test_script': 
  """\
import os
import time
db_conn.close()
import codecs

#non_ascii_query="select 'gång' from rdb$database"
non_ascii_query=u"select 'g\u00E5ng' as non_ascii_literal from rdb$database"

f_sql_txt=\
'''
    set count on;
    set list on; 
    set blob all;
    select sql from non_ascii;
    select s.mon$sql_text as sql_text_blob_id
    from mon$statements s
    where
        s.mon$attachment_id<>current_connection
        and s.mon$sql_text containing 'non_ascii_literal'
    ;
'''

tmppath=context['temp_directory']
user_name='SYSDBA'
user_password='masterkey'
dbnm=dsn


f_mon_sql = os.path.join(tmppath, 'tmp_2531_w1252.sql')

f_sql = open( f_mon_sql, 'w')
f_sql.write(f_sql_txt)
f_sql.close()

f_mon_log = os.path.join(tmppath, 'tmp_2531_w1252.log')


f_python_txt=\
'''# coding: latin-1
import os
import fdb
import subprocess

att1 = fdb.connect(dsn=r'%(dbnm)s', user='%(user_name)s', password='%(user_password)s', charset='win1252')
att1.execute_immediate("recreate table non_ascii(sql varchar(255) character set win1252)")
att1.commit()

txt="%(non_ascii_query)s"

cur1=att1.cursor()
cur1.execute( "insert into non_ascii(sql) values('%%s')"  %% txt.replace("'","''")  )
att1.commit()

cur1.prep(txt)

f_log = open( r'%(f_mon_log)s', 'w')
subprocess.call(["isql", r'%(dbnm)s', "-user", '%(user_name)s', "-password", "%(user_password)s", "-ch", "utf8", "-i", r"%(f_mon_sql)s" ], stdout = f_log)
f_log.close()

att1.commit()
att1.close()
os.remove( r"%(f_mon_sql)s" )

''' %locals()


#####################################################################
### Create temporary Python script with code page = Windows-1252, ###
### so |select 'gång' from rdb$database| will be written there in ###
### single-byte encoding rather than in utf8.                     ### 
####################################################################
f_python_run=codecs.open( os.path.join(context['temp_directory'],'tmp_2531_run.py'), encoding='cp1252', mode='w')
f_python_run.write(f_python_txt)
f_python_run.close()

runProgram('python',[f_python_run.name])
time.sleep(1)

f_python_log=os.path.join( context['temp_directory'], 'tmp_2531_w1252.log')
with open(f_python_log) as f:
    print(f.read())
f.close()

os.remove(f_python_run.name)
os.remove(f_python_log)

  """,
 'expected_stdout':
  """
    SQL                             select 'gång' as non_ascii_literal from rdb$database
    Records affected: 1

    select 'gång' as non_ascii_literal from rdb$database
    Records affected: 1
  """,
  'substitutions':[('SQL_TEXT_BLOB_ID .*','')]
}
]
}
